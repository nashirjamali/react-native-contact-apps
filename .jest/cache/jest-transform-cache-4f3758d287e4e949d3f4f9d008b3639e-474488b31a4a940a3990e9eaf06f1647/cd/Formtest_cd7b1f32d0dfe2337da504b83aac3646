770e10239799f4070abd51e1d6c3a435
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useIsFocused: jest.fn()
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Form = _interopRequireDefault(require("../Form"));
var _testUtils = require("../../utils/test-utils");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var createTestProps = function createTestProps(props) {
  return Object.assign({
    navigation: Object.assign({
      navigate: jest.fn()
    }, props)
  }, props);
};
describe('Form', function () {
  test('renders correctly and enables next button when form is complete', function () {
    var props = createTestProps({});
    var _renderWithProviders = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_Form.default, Object.assign({
        route: {
          key: 'Form',
          name: 'Form',
          params: {
            isEdit: false
          }
        }
      }, props))),
      getByPlaceholderText = _renderWithProviders.getByPlaceholderText,
      getByLabelText = _renderWithProviders.getByLabelText;
    var firstNameInput = getByPlaceholderText('First Name');
    var lastNameInput = getByPlaceholderText('Last Name');
    var ageInput = getByPlaceholderText('Age');
    var nextButton = getByLabelText('button-next');
    _reactNative.fireEvent.changeText(firstNameInput, 'John');
    _reactNative.fireEvent.changeText(lastNameInput, 'Doe');
    _reactNative.fireEvent.changeText(ageInput, '30');
    expect(firstNameInput.props.value).toBe('John');
    expect(lastNameInput.props.value).toBe('Doe');
    expect(ageInput.props.value).toBe('30');
    expect(nextButton.props.accessibilityState.disabled).toBe(false);
  });
  test('navigates to ChooseAvatar screen when Next button is clicked', function () {
    var props = createTestProps({});
    var _renderWithProviders2 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_Form.default, Object.assign({
        route: {
          key: 'Form',
          name: 'Form',
          params: {
            isEdit: false
          }
        }
      }, props))),
      getByPlaceholderText = _renderWithProviders2.getByPlaceholderText,
      getByLabelText = _renderWithProviders2.getByLabelText;
    var firstNameInput = getByPlaceholderText('First Name');
    var lastNameInput = getByPlaceholderText('Last Name');
    var ageInput = getByPlaceholderText('Age');
    var nextButton = getByLabelText('button-next');
    _reactNative.fireEvent.changeText(firstNameInput, 'John');
    _reactNative.fireEvent.changeText(lastNameInput, 'Doe');
    _reactNative.fireEvent.changeText(ageInput, '30');
    _reactNative.fireEvent.press(nextButton);
    expect(props.navigation.navigate).toHaveBeenCalledWith('ChooseAvatar', {
      isEdit: false
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsInVzZUlzRm9jdXNlZCIsImZuIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfRm9ybSIsIl90ZXN0VXRpbHMiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwiY3JlYXRlVGVzdFByb3BzIiwicHJvcHMiLCJuYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJkZXNjcmliZSIsInRlc3QiLCJfcmVuZGVyV2l0aFByb3ZpZGVycyIsInJlbmRlcldpdGhQcm92aWRlcnMiLCJqc3giLCJkZWZhdWx0Iiwicm91dGUiLCJrZXkiLCJuYW1lIiwicGFyYW1zIiwiaXNFZGl0IiwiZ2V0QnlQbGFjZWhvbGRlclRleHQiLCJnZXRCeUxhYmVsVGV4dCIsImZpcnN0TmFtZUlucHV0IiwibGFzdE5hbWVJbnB1dCIsImFnZUlucHV0IiwibmV4dEJ1dHRvbiIsImZpcmVFdmVudCIsImNoYW5nZVRleHQiLCJleHBlY3QiLCJ2YWx1ZSIsInRvQmUiLCJhY2Nlc3NpYmlsaXR5U3RhdGUiLCJkaXNhYmxlZCIsIl9yZW5kZXJXaXRoUHJvdmlkZXJzMiIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiXSwic291cmNlcyI6WyJGb3JtLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICByZW5kZXIsXG4gIGZpcmVFdmVudCxcbiAgc2NyZWVuLFxuICB3YWl0Rm9yLFxufSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQge1Byb3ZpZGVyfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgRm9ybSBmcm9tICcuLi9Gb3JtJztcbmltcG9ydCB7cmVuZGVyV2l0aFByb3ZpZGVyc30gZnJvbSAnLi4vLi4vdXRpbHMvdGVzdC11dGlscyc7XG5pbXBvcnQge1N0YWNrTmF2aWdhdGlvblByb3B9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL3N0YWNrJztcbmltcG9ydCB7Um9vdFN0YWNrUGFyYW1MaXN0fSBmcm9tICcuLi8uLi90eXBlcyc7XG5cbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4gKHtcbiAgLi4uamVzdC5yZXF1aXJlQWN0dWFsKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnKSxcbiAgdXNlSXNGb2N1c2VkOiBqZXN0LmZuKCksXG59KSk7XG5cbnR5cGUgTmF2aWdhdGlvblByb3BzID0gU3RhY2tOYXZpZ2F0aW9uUHJvcDxSb290U3RhY2tQYXJhbUxpc3QsICdGb3JtJz47XG5cbmNvbnN0IGNyZWF0ZVRlc3RQcm9wcyA9IChwcm9wczogUGFydGlhbDxOYXZpZ2F0aW9uUHJvcHM+KSA9PiAoe1xuICBuYXZpZ2F0aW9uOiB7XG4gICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcbiAgICAuLi5wcm9wcyxcbiAgfSBhcyBOYXZpZ2F0aW9uUHJvcHMsXG4gIC4uLnByb3BzLFxufSk7XG5cbmRlc2NyaWJlKCdGb3JtJywgKCkgPT4ge1xuICB0ZXN0KCdyZW5kZXJzIGNvcnJlY3RseSBhbmQgZW5hYmxlcyBuZXh0IGJ1dHRvbiB3aGVuIGZvcm0gaXMgY29tcGxldGUnLCAoKSA9PiB7XG4gICAgY29uc3QgcHJvcHMgPSBjcmVhdGVUZXN0UHJvcHMoe30pO1xuICAgIGNvbnN0IHtnZXRCeVBsYWNlaG9sZGVyVGV4dCwgZ2V0QnlMYWJlbFRleHR9ID0gcmVuZGVyV2l0aFByb3ZpZGVycyhcbiAgICAgIDxGb3JtXG4gICAgICAgIHJvdXRlPXt7a2V5OiAnRm9ybScsIG5hbWU6ICdGb3JtJywgcGFyYW1zOiB7aXNFZGl0OiBmYWxzZX19fVxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAvPixcbiAgICApO1xuXG4gICAgY29uc3QgZmlyc3ROYW1lSW5wdXQgPSBnZXRCeVBsYWNlaG9sZGVyVGV4dCgnRmlyc3QgTmFtZScpO1xuICAgIGNvbnN0IGxhc3ROYW1lSW5wdXQgPSBnZXRCeVBsYWNlaG9sZGVyVGV4dCgnTGFzdCBOYW1lJyk7XG4gICAgY29uc3QgYWdlSW5wdXQgPSBnZXRCeVBsYWNlaG9sZGVyVGV4dCgnQWdlJyk7XG4gICAgY29uc3QgbmV4dEJ1dHRvbiA9IGdldEJ5TGFiZWxUZXh0KCdidXR0b24tbmV4dCcpO1xuXG4gICAgZmlyZUV2ZW50LmNoYW5nZVRleHQoZmlyc3ROYW1lSW5wdXQsICdKb2huJyk7XG4gICAgZmlyZUV2ZW50LmNoYW5nZVRleHQobGFzdE5hbWVJbnB1dCwgJ0RvZScpO1xuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGFnZUlucHV0LCAnMzAnKTtcblxuICAgIGV4cGVjdChmaXJzdE5hbWVJbnB1dC5wcm9wcy52YWx1ZSkudG9CZSgnSm9obicpO1xuICAgIGV4cGVjdChsYXN0TmFtZUlucHV0LnByb3BzLnZhbHVlKS50b0JlKCdEb2UnKTtcbiAgICBleHBlY3QoYWdlSW5wdXQucHJvcHMudmFsdWUpLnRvQmUoJzMwJyk7XG4gICAgZXhwZWN0KG5leHRCdXR0b24ucHJvcHMuYWNjZXNzaWJpbGl0eVN0YXRlLmRpc2FibGVkKS50b0JlKGZhbHNlKTtcbiAgfSk7XG5cbiAgdGVzdCgnbmF2aWdhdGVzIHRvIENob29zZUF2YXRhciBzY3JlZW4gd2hlbiBOZXh0IGJ1dHRvbiBpcyBjbGlja2VkJywgKCkgPT4ge1xuICAgIGNvbnN0IHByb3BzID0gY3JlYXRlVGVzdFByb3BzKHt9KTtcblxuICAgIGNvbnN0IHtnZXRCeVBsYWNlaG9sZGVyVGV4dCwgZ2V0QnlMYWJlbFRleHR9ID0gcmVuZGVyV2l0aFByb3ZpZGVycyhcbiAgICAgIDxGb3JtXG4gICAgICAgIHJvdXRlPXt7a2V5OiAnRm9ybScsIG5hbWU6ICdGb3JtJywgcGFyYW1zOiB7aXNFZGl0OiBmYWxzZX19fVxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAvPixcbiAgICApO1xuXG4gICAgY29uc3QgZmlyc3ROYW1lSW5wdXQgPSBnZXRCeVBsYWNlaG9sZGVyVGV4dCgnRmlyc3QgTmFtZScpO1xuICAgIGNvbnN0IGxhc3ROYW1lSW5wdXQgPSBnZXRCeVBsYWNlaG9sZGVyVGV4dCgnTGFzdCBOYW1lJyk7XG4gICAgY29uc3QgYWdlSW5wdXQgPSBnZXRCeVBsYWNlaG9sZGVyVGV4dCgnQWdlJyk7XG4gICAgY29uc3QgbmV4dEJ1dHRvbiA9IGdldEJ5TGFiZWxUZXh0KCdidXR0b24tbmV4dCcpO1xuXG4gICAgZmlyZUV2ZW50LmNoYW5nZVRleHQoZmlyc3ROYW1lSW5wdXQsICdKb2huJyk7XG4gICAgZmlyZUV2ZW50LmNoYW5nZVRleHQobGFzdE5hbWVJbnB1dCwgJ0RvZScpO1xuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGFnZUlucHV0LCAnMzAnKTtcbiAgICBmaXJlRXZlbnQucHJlc3MobmV4dEJ1dHRvbik7XG5cbiAgICBleHBlY3QocHJvcHMubmF2aWdhdGlvbi5uYXZpZ2F0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ0Nob29zZUF2YXRhcicsIHtcbiAgICAgIGlzRWRpdDogZmFsc2UsXG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQWFBQSxXQUFBLEdBQUtDLElBQUksQ0FBQywwQkFBMEIsRUFBRTtFQUFBLE9BQUFDLE1BQUEsQ0FBQUMsTUFBQSxLQUNqQ0MsSUFBSSxDQUFDQyxhQUFhLENBQUMsMEJBQTBCLENBQUM7SUFDakRDLFlBQVksRUFBRUYsSUFBSSxDQUFDRyxFQUFFLENBQUM7RUFBQztBQUFBLENBQ3ZCLENBQUM7QUFBQyxJQUFBQyxzQkFBQSxHQUFBQyxPQUFBO0FBaEJKLElBQUFDLE1BQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUYsT0FBQTtBQU9BLElBQUFHLEtBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFJLFVBQUEsR0FBQUosT0FBQTtBQUEyRCxJQUFBSyxXQUFBLEdBQUFMLE9BQUE7QUFBQSxTQUFBVCxZ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