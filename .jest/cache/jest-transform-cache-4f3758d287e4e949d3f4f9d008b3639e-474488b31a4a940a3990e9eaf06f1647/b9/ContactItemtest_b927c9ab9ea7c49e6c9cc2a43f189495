10047dff95ce853b328ad3c9ed816ba4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ContactItem = _interopRequireDefault(require("../ContactItem"));
var _jsxRuntime = require("react/jsx-runtime");
describe('ContactItem', function () {
  var contact = {
    firstName: 'John',
    lastName: 'Doe',
    photo: 'https://example.com/avatar.png',
    age: 2,
    id: '111'
  };
  test('renders correctly with contact data', (0, _asyncToGenerator2.default)(function* () {
    jest.spyOn(global, 'fetch').mockResolvedValue(Promise.resolve({
      ok: true,
      status: 200
    }));
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContactItem.default, {
        contact: contact
      })),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    _reactNative.screen.debug();
    yield (0, _reactNative.waitFor)(function () {
      var avatar = getByTestId('user-avatar-text');
      var name = getByText('John Doe');
      expect(avatar.props.children.props.children).toBe('JD');
      expect(name).toBeTruthy();
    });
  }));
  test('calls onPress when pressed', function () {
    var onPressMock = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContactItem.default, {
        contact: contact,
        onPress: onPressMock
      })),
      getByTestId = _render2.getByTestId;
    var touchable = getByTestId('user-avatar-text');
    _reactNative.fireEvent.press(touchable);
    expect(onPressMock).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Db250YWN0SXRlbSIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJjb250YWN0IiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJwaG90byIsImFnZSIsImlkIiwidGVzdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJqZXN0Iiwic3B5T24iLCJnbG9iYWwiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsIlByb21pc2UiLCJyZXNvbHZlIiwib2siLCJzdGF0dXMiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiZ2V0QnlUZXh0IiwiZ2V0QnlUZXN0SWQiLCJzY3JlZW4iLCJkZWJ1ZyIsIndhaXRGb3IiLCJhdmF0YXIiLCJuYW1lIiwiZXhwZWN0IiwicHJvcHMiLCJjaGlsZHJlbiIsInRvQmUiLCJ0b0JlVHJ1dGh5Iiwib25QcmVzc01vY2siLCJmbiIsIl9yZW5kZXIyIiwib25QcmVzcyIsInRvdWNoYWJsZSIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZCJdLCJzb3VyY2VzIjpbIkNvbnRhY3RJdGVtLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICByZW5kZXIsXG4gIGZpcmVFdmVudCxcbiAgd2FpdEZvcixcbiAgc2NyZWVuLFxufSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgQ29udGFjdEl0ZW0gZnJvbSAnLi4vQ29udGFjdEl0ZW0nO1xuXG5kZXNjcmliZSgnQ29udGFjdEl0ZW0nLCAoKSA9PiB7XG4gIGNvbnN0IGNvbnRhY3QgPSB7XG4gICAgZmlyc3ROYW1lOiAnSm9obicsXG4gICAgbGFzdE5hbWU6ICdEb2UnLFxuICAgIHBob3RvOiAnaHR0cHM6Ly9leGFtcGxlLmNvbS9hdmF0YXIucG5nJyxcbiAgICBhZ2U6IDIsXG4gICAgaWQ6ICcxMTEnLFxuICB9O1xuXG4gIHRlc3QoJ3JlbmRlcnMgY29ycmVjdGx5IHdpdGggY29udGFjdCBkYXRhJywgYXN5bmMgKCkgPT4ge1xuICAgIGplc3RcbiAgICAgIC5zcHlPbihnbG9iYWwsICdmZXRjaCcpXG4gICAgICAubW9ja1Jlc29sdmVkVmFsdWUoUHJvbWlzZS5yZXNvbHZlKHtvazogdHJ1ZSwgc3RhdHVzOiAyMDB9IGFzIFJlc3BvbnNlKSk7XG5cbiAgICBjb25zdCB7Z2V0QnlUZXh0LCBnZXRCeVRlc3RJZH0gPSByZW5kZXIoPENvbnRhY3RJdGVtIGNvbnRhY3Q9e2NvbnRhY3R9IC8+KTtcblxuICAgIHNjcmVlbi5kZWJ1ZygpO1xuXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBjb25zdCBhdmF0YXIgPSBnZXRCeVRlc3RJZCgndXNlci1hdmF0YXItdGV4dCcpO1xuICAgICAgY29uc3QgbmFtZSA9IGdldEJ5VGV4dCgnSm9obiBEb2UnKTtcblxuICAgICAgZXhwZWN0KGF2YXRhci5wcm9wcy5jaGlsZHJlbi5wcm9wcy5jaGlsZHJlbikudG9CZSgnSkQnKTtcbiAgICAgIGV4cGVjdChuYW1lKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2NhbGxzIG9uUHJlc3Mgd2hlbiBwcmVzc2VkJywgKCkgPT4ge1xuICAgIGNvbnN0IG9uUHJlc3NNb2NrID0gamVzdC5mbigpO1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoXG4gICAgICA8Q29udGFjdEl0ZW0gY29udGFjdD17Y29udGFjdH0gb25QcmVzcz17b25QcmVzc01vY2t9IC8+LFxuICAgICk7XG5cbiAgICBjb25zdCB0b3VjaGFibGUgPSBnZXRCeVRlc3RJZCgndXNlci1hdmF0YXItdGV4dCcpO1xuICAgIGZpcmVFdmVudC5wcmVzcyh0b3VjaGFibGUpO1xuXG4gICAgZXhwZWN0KG9uUHJlc3NNb2NrKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBTUEsSUFBQUUsWUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQXlDLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUV6Q0ksUUFBUSxDQUFDLGFBQWEsRUFBRSxZQUFNO0VBQzVCLElBQU1DLE9BQU8sR0FBRztJQUNkQyxTQUFTLEVBQUUsTUFBTTtJQUNqQkMsUUFBUSxFQUFFLEtBQUs7SUFDZkMsS0FBSyxFQUFFLGdDQUFnQztJQUN2Q0MsR0FBRyxFQUFFLENBQUM7SUFDTkMsRUFBRSxFQUFFO0VBQ04sQ0FBQztFQUVEQyxJQUFJLENBQUMscUNBQXFDLE1BQUFDLGtCQUFBLENBQUFDLE9BQUEsRUFBRSxhQUFZO0lBQ3REQyxJQUFJLENBQ0RDLEtBQUssQ0FBQ0MsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUN0QkMsaUJBQWlCLENBQUNDLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDO01BQUNDLEVBQUUsRUFBRSxJQUFJO01BQUVDLE1BQU0sRUFBRTtJQUFHLENBQWEsQ0FBQyxDQUFDO0lBRTFFLElBQUFDLE9BQUEsR0FBaUMsSUFBQUMsbUJBQU0sRUFBQyxJQUFBcEIsV0FBQSxDQUFBcUIsR0FBQSxFQUFDdEIsWUFBQSxDQUFBVyxPQUFXO1FBQUNSLE9BQU8sRUFBRUE7TUFBUSxDQUFFLENBQUMsQ0FBQztNQUFuRW9CLFNBQVMsR0FBQUgsT0FBQSxDQUFURyxTQUFTO01BQUVDLFdBQVcsR0FBQUosT0FBQSxDQUFYSSxXQUFXO0lBRTdCQyxtQkFBTSxDQUFDQyxLQUFLLENBQUMsQ0FBQztJQUVkLE1BQU0sSUFBQUMsb0JBQU8sRUFBQyxZQUFNO01BQ2xCLElBQU1DLE1BQU0sR0FBR0osV0FBVyxDQUFDLGtCQUFrQixDQUFDO01BQzlDLElBQU1LLElBQUksR0FBR04sU0FBUyxDQUFDLFVBQVUsQ0FBQztNQUVsQ08sTUFBTSxDQUFDRixNQUFNLENBQUNHLEtBQUssQ0FBQ0MsUUFBUSxDQUFDRCxLQUFLLENBQUNDLFFBQVEsQ0FBQyxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDO01BQ3ZESCxNQUFNLENBQUNELElBQUksQ0FBQyxDQUFDSyxVQUFVLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUM7RUFDSixDQUFDLEVBQUM7RUFFRnpCLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxZQUFNO0lBQ3ZDLElBQU0wQixXQUFXLEdBQUd2QixJQUFJLENBQUN3QixFQUFFLENBQUMsQ0FBQztJQUM3QixJQUFBQyxRQUFBLEdBQXNCLElBQUFoQixtQkFBTSxFQUMxQixJQUFBcEIsV0FBQSxDQUFBcUIsR0FBQSxFQUFDdEIsWUFBQSxDQUFBVyxPQUFXO1FBQUNSLE9BQU8sRUFBRUEsT0FBUTtRQUFDbUMsT0FBTyxFQUFFSDtNQUFZLENBQUUsQ0FDeEQsQ0FBQztNQUZNWCxXQUFXLEdBQUFhLFFBQUEsQ0FBWGIsV0FBVztJQUlsQixJQUFNZSxTQUFTLEdBQUdmLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQztJQUNqRGdCLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0YsU0FBUyxDQUFDO0lBRTFCVCxNQUFNLENBQUNLLFdBQVcsQ0FBQyxDQUFDTyxnQkFBZ0IsQ0FBQyxDQUFDO0VBQ3hDLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyJ9