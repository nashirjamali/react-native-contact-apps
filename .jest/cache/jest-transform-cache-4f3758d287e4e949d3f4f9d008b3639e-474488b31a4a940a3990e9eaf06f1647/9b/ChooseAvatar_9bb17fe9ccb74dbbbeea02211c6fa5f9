33d06625c53ff9ee4139ff38eb3c707b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ChooseAvatar;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _Typography = _interopRequireDefault(require("../components/Typography"));
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _Button = _interopRequireDefault(require("../components/Button"));
var _AvatarItem = _interopRequireDefault(require("../components/AvatarItem"));
var _reactRedux = require("react-redux");
var _contact = require("../apis/contact");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var avatarImages = ['https://thypix.com/wp-content/uploads/2021/11/sponge-bob-profile-picture-thypix-52-700x628.jpg', 'https://thypix.com/wp-content/uploads/2021/11/sponge-bob-profile-picture-thypix-124-680x700.jpg', 'https://thypix.com/wp-content/uploads/2021/11/sponge-bob-profile-picture-thypix-122-655x700.jpg', 'https://thypix.com/wp-content/uploads/2021/11/sponge-bob-profile-picture-thypix-106-700x627.jpg', 'https://thypix.com/wp-content/uploads/2021/11/sponge-bob-profile-picture-thypix-104-615x700.jpg', 'https://thypix.com/wp-content/uploads/2021/11/sponge-bob-profile-picture-thypix-102-662x700.jpg', 'https://thypix.com/wp-content/uploads/2021/11/sponge-bob-profile-picture-thypix-98-691x700.jpg', 'https://thypix.com/wp-content/uploads/2021/11/sponge-bob-profile-picture-thypix-82-700x695.jpg'];
function ChooseAvatar(_ref) {
  var params = _ref.route.params,
    navigation = _ref.navigation;
  var _useState = (0, _react.useState)(''),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    selectedImage = _useState2[0],
    setSelectedImage = _useState2[1];
  var _useState3 = (0, _react.useState)(true),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    disabled = _useState4[0],
    setDisabled = _useState4[1];
  var formReducer = (0, _reactRedux.useSelector)(function (state) {
    return state.formReducer;
  });
  var dispatch = (0, _reactRedux.useDispatch)();
  function onClickCreate() {
    return _onClickCreate.apply(this, arguments);
  }
  function _onClickCreate() {
    _onClickCreate = (0, _asyncToGenerator2.default)(function* () {
      try {
        var response = yield (0, _contact.postContact)({
          firstName: formReducer.firstName,
          lastName: formReducer.lastName,
          age: formReducer.age,
          photo: selectedImage
        });
        if (response.status === 201) {
          dispatch({
            type: 'RESET'
          });
          navigation.replace('List');
        }
      } catch (error) {
        console.log(error);
        _reactNative.Alert.alert('Error', error.message);
      }
    });
    return _onClickCreate.apply(this, arguments);
  }
  function onClickUpdate() {
    return _onClickUpdate.apply(this, arguments);
  }
  function _onClickUpdate() {
    _onClickUpdate = (0, _asyncToGenerator2.default)(function* () {
      console.log(formReducer);
      try {
        var response = yield (0, _contact.putContact)(formReducer.id, {
          firstName: formReducer.firstName,
          lastName: formReducer.lastName,
          age: formReducer.age,
          photo: selectedImage
        });
        if (response.status === 201) {
          dispatch({
            type: 'RESET'
          });
          navigation.replace('List');
        }
      } catch (error) {
        _reactNative.Alert.alert('Error', error.message);
      }
    });
    return _onClickUpdate.apply(this, arguments);
  }
  (0, _react.useEffect)(function () {
    if (selectedImage !== '') {
      setDisabled(false);
    } else {
      setDisabled(true);
    }
  }, [selectedImage]);
  (0, _react.useEffect)(function () {
    if (params.isEdit) {
      setSelectedImage(formReducer.photo);
    }
  }, [formReducer, params.isEdit]);
  return (0, _jsxRuntime.jsxs)(_reactNativeSafeAreaContext.SafeAreaView, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.header,
      children: [(0, _jsxRuntime.jsx)(_Typography.default, {
        children: "Choose Avatar"
      }), params.isEdit ? (0, _jsxRuntime.jsx)(_Button.default, {
        onPress: onClickUpdate,
        disabled: disabled,
        "aria-label": "button-update",
        children: (0, _jsxRuntime.jsx)(_Typography.default, {
          children: "Update"
        })
      }) : (0, _jsxRuntime.jsx)(_Button.default, {
        onPress: onClickCreate,
        disabled: disabled,
        "aria-label": "button-save",
        children: (0, _jsxRuntime.jsx)(_Typography.default, {
          children: "Save"
        })
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.wrapper,
        children: avatarImages.map(function (image, index) {
          return (0, _jsxRuntime.jsx)(_AvatarItem.default, {
            imageURL: image,
            onSelect: function onSelect() {
              return setSelectedImage(image);
            },
            isSelected: selectedImage === image ? true : false
          }, index);
        })
      })
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#18181b'
  },
  header: {
    backgroundColor: '#09090b',
    padding: 20,
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center'
  },
  wrapper: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    padding: 20,
    flex: 1,
    gap: 20,
    justifyContent: 'center'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,