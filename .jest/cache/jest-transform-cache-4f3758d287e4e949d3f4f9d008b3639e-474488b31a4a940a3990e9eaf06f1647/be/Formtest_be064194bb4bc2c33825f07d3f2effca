4d7a87b95e2096b75f76ec5a1a0d970a
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useIsFocused: jest.fn()
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Form = _interopRequireDefault(require("../Form"));
var _testUtils = require("../../utils/test-utils");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var createTestProps = function createTestProps(props) {
  return Object.assign({
    navigation: Object.assign({
      navigate: jest.fn()
    }, props)
  }, props);
};
describe('Form', function () {
  test('renders correctly and enables next button when form is complete', (0, _asyncToGenerator2.default)(function* () {
    var props = createTestProps({});
    var _renderWithProviders = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_Form.default, Object.assign({
        route: {
          key: 'Form',
          name: 'Form',
          params: {
            isEdit: false
          }
        }
      }, props))),
      getByPlaceholderText = _renderWithProviders.getByPlaceholderText,
      getByText = _renderWithProviders.getByText,
      getByLabelText = _renderWithProviders.getByLabelText;
    var firstNameInput = getByPlaceholderText('First Name');
    var lastNameInput = getByPlaceholderText('Last Name');
    var ageInput = getByPlaceholderText('Age');
    var nextButton = getByLabelText('button-next');
    yield (0, _reactNative.waitFor)(function () {
      _reactNative.fireEvent.changeText(firstNameInput, 'John');
      _reactNative.fireEvent.changeText(lastNameInput, 'Doe');
      _reactNative.fireEvent.changeText(ageInput, '30');
    });
    console.log(nextButton.props);
    expect(firstNameInput.props.value).toBe('John');
    expect(lastNameInput.props.value).toBe('Doe');
    expect(ageInput.props.value).toBe('30');
    expect(nextButton.props.accessibilityState.disabled).toBe(false);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsInVzZUlzRm9jdXNlZCIsImZuIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfRm9ybSIsIl90ZXN0VXRpbHMiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwiY3JlYXRlVGVzdFByb3BzIiwicHJvcHMiLCJuYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJkZXNjcmliZSIsInRlc3QiLCJkZWZhdWx0IiwiX3JlbmRlcldpdGhQcm92aWRlcnMiLCJyZW5kZXJXaXRoUHJvdmlkZXJzIiwianN4Iiwicm91dGUiLCJrZXkiLCJuYW1lIiwicGFyYW1zIiwiaXNFZGl0IiwiZ2V0QnlQbGFjZWhvbGRlclRleHQiLCJnZXRCeVRleHQiLCJnZXRCeUxhYmVsVGV4dCIsImZpcnN0TmFtZUlucHV0IiwibGFzdE5hbWVJbnB1dCIsImFnZUlucHV0IiwibmV4dEJ1dHRvbiIsIndhaXRGb3IiLCJmaXJlRXZlbnQiLCJjaGFuZ2VUZXh0IiwiY29uc29sZSIsImxvZyIsImV4cGVjdCIsInZhbHVlIiwidG9CZSIsImFjY2Vzc2liaWxpdHlTdGF0ZSIsImRpc2FibGVkIl0sInNvdXJjZXMiOlsiRm9ybS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgcmVuZGVyLFxuICBmaXJlRXZlbnQsXG4gIHNjcmVlbixcbiAgd2FpdEZvcixcbn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHtQcm92aWRlcn0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IEZvcm0gZnJvbSAnLi4vRm9ybSc7XG5pbXBvcnQge3JlbmRlcldpdGhQcm92aWRlcnN9IGZyb20gJy4uLy4uL3V0aWxzL3Rlc3QtdXRpbHMnO1xuaW1wb3J0IHtTdGFja05hdmlnYXRpb25Qcm9wfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9zdGFjayc7XG5pbXBvcnQge1Jvb3RTdGFja1BhcmFtTGlzdH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+ICh7XG4gIC4uLmplc3QucmVxdWlyZUFjdHVhbCgnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJyksXG4gIHVzZUlzRm9jdXNlZDogamVzdC5mbigpLFxufSkpO1xuXG50eXBlIE5hdmlnYXRpb25Qcm9wcyA9IFN0YWNrTmF2aWdhdGlvblByb3A8Um9vdFN0YWNrUGFyYW1MaXN0LCAnRm9ybSc+O1xuXG5jb25zdCBjcmVhdGVUZXN0UHJvcHMgPSAocHJvcHM6IFBhcnRpYWw8TmF2aWdhdGlvblByb3BzPikgPT4gKHtcbiAgbmF2aWdhdGlvbjoge1xuICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXG4gICAgLi4ucHJvcHMsXG4gIH0gYXMgTmF2aWdhdGlvblByb3BzLFxuICAuLi5wcm9wcyxcbn0pO1xuXG5kZXNjcmliZSgnRm9ybScsICgpID0+IHtcbiAgdGVzdCgncmVuZGVycyBjb3JyZWN0bHkgYW5kIGVuYWJsZXMgbmV4dCBidXR0b24gd2hlbiBmb3JtIGlzIGNvbXBsZXRlJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHByb3BzID0gY3JlYXRlVGVzdFByb3BzKHt9KTtcbiAgICBjb25zdCB7Z2V0QnlQbGFjZWhvbGRlclRleHQsIGdldEJ5VGV4dCwgZ2V0QnlMYWJlbFRleHR9ID1cbiAgICAgIHJlbmRlcldpdGhQcm92aWRlcnMoXG4gICAgICAgIDxGb3JtXG4gICAgICAgICAgcm91dGU9e3trZXk6ICdGb3JtJywgbmFtZTogJ0Zvcm0nLCBwYXJhbXM6IHtpc0VkaXQ6IGZhbHNlfX19XG4gICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAvPixcbiAgICAgICk7XG5cbiAgICBjb25zdCBmaXJzdE5hbWVJbnB1dCA9IGdldEJ5UGxhY2Vob2xkZXJUZXh0KCdGaXJzdCBOYW1lJyk7XG4gICAgY29uc3QgbGFzdE5hbWVJbnB1dCA9IGdldEJ5UGxhY2Vob2xkZXJUZXh0KCdMYXN0IE5hbWUnKTtcbiAgICBjb25zdCBhZ2VJbnB1dCA9IGdldEJ5UGxhY2Vob2xkZXJUZXh0KCdBZ2UnKTtcbiAgICBjb25zdCBuZXh0QnV0dG9uID0gZ2V0QnlMYWJlbFRleHQoJ2J1dHRvbi1uZXh0Jyk7XG5cbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGZpcnN0TmFtZUlucHV0LCAnSm9obicpO1xuICAgICAgZmlyZUV2ZW50LmNoYW5nZVRleHQobGFzdE5hbWVJbnB1dCwgJ0RvZScpO1xuICAgICAgZmlyZUV2ZW50LmNoYW5nZVRleHQoYWdlSW5wdXQsICczMCcpO1xuICAgIH0pO1xuXG4gICAgY29uc29sZS5sb2cobmV4dEJ1dHRvbi5wcm9wcyk7XG5cbiAgICBleHBlY3QoZmlyc3ROYW1lSW5wdXQucHJvcHMudmFsdWUpLnRvQmUoJ0pvaG4nKTtcbiAgICBleHBlY3QobGFzdE5hbWVJbnB1dC5wcm9wcy52YWx1ZSkudG9CZSgnRG9lJyk7XG4gICAgZXhwZWN0KGFnZUlucHV0LnByb3BzLnZhbHVlKS50b0JlKCczMCcpO1xuICAgIGV4cGVjdChuZXh0QnV0dG9uLnByb3BzLmFjY2Vzc2liaWxpdHlTdGF0ZS5kaXNhYmxlZCkudG9CZShmYWxzZSk7XG4gIH0pO1xuXG4gIC8vICAgdGVzdCgnbmF2aWdhdGVzIHRvIENob29zZUF2YXRhciBzY3JlZW4gd2hlbiBOZXh0IGJ1dHRvbiBpcyBjbGlja2VkJywgKCkgPT4ge1xuICAvLyAgICAgY29uc3QgbmF2aWdhdGlvbk1vY2sgPSB7XG4gIC8vICAgICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXG4gIC8vICAgICB9O1xuXG4gIC8vICAgICBjb25zdCB7Z2V0QnlQbGFjZWhvbGRlclRleHQsIGdldEJ5VGV4dCwgZ2V0QnlUZXN0SWR9ID0gcmVuZGVyKFxuICAvLyAgICAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbiAgLy8gICAgICAgICA8Rm9ybSByb3V0ZT17e3BhcmFtczoge2lzRWRpdDogZmFsc2V9fX0gbmF2aWdhdGlvbj17bmF2aWdhdGlvbk1vY2t9IC8+XG4gIC8vICAgICAgIDwvUHJvdmlkZXI+LFxuICAvLyAgICAgKTtcblxuICAvLyAgICAgY29uc3QgZmlyc3ROYW1lSW5wdXQgPSBnZXRCeVBsYWNlaG9sZGVyVGV4dCgnRmlyc3QgTmFtZScpO1xuICAvLyAgICAgY29uc3QgbGFzdE5hbWVJbnB1dCA9IGdldEJ5UGxhY2Vob2xkZXJUZXh0KCdMYXN0IE5hbWUnKTtcbiAgLy8gICAgIGNvbnN0IGFnZUlucHV0ID0gZ2V0QnlQbGFjZWhvbGRlclRleHQoJ0FnZScpO1xuICAvLyAgICAgY29uc3QgbmV4dEJ1dHRvbiA9IGdldEJ5VGV4dCgnTmV4dCcpO1xuXG4gIC8vICAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChmaXJzdE5hbWVJbnB1dCwgJ0pvaG4nKTtcbiAgLy8gICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGxhc3ROYW1lSW5wdXQsICdEb2UnKTtcbiAgLy8gICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGFnZUlucHV0LCAnMzAnKTtcbiAgLy8gICAgIGZpcmVFdmVudC5wcmVzcyhuZXh0QnV0dG9uKTtcblxuICAvLyAgICAgZXhwZWN0KG5hdmlnYXRpb25Nb2NrLm5hdmlnYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnQ2hvb3NlQXZhdGFyJywge1xuICAvLyAgICAgICBpc0VkaXQ6IGZhbHNlLFxuICAvLyAgICAgfSk7XG4gIC8vICAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBYUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDBCQUEwQixFQUFFO0VBQUEsT0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ2pDQyxJQUFJLENBQUNDLGFBQWEsQ0FBQywwQkFBMEIsQ0FBQztJQUNqREMsWUFBWSxF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