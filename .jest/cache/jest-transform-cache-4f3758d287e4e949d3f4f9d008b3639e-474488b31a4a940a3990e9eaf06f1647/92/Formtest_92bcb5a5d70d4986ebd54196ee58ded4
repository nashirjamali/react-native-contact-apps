268332d5bec1b101734043363b932472
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useIsFocused: jest.fn()
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Form = _interopRequireDefault(require("../Form"));
var _testUtils = require("../../utils/test-utils");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var createTestProps = function createTestProps(props) {
  return Object.assign({
    navigation: Object.assign({
      navigate: jest.fn()
    }, props)
  }, props);
};
describe('Form', function () {
  test('renders correctly and enables next button when form is complete', function () {
    var props = createTestProps({});
    var _renderWithProviders = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_Form.default, Object.assign({
        route: {
          key: 'Form',
          name: 'Form',
          params: {
            isEdit: false
          }
        }
      }, props))),
      getByPlaceholderText = _renderWithProviders.getByPlaceholderText,
      getByText = _renderWithProviders.getByText;
    var firstNameInput = getByPlaceholderText('First Name');
    var lastNameInput = getByPlaceholderText('Last Name');
    var ageInput = getByPlaceholderText('Age');
    var nextButton = getByText('Next');
    _reactNative.fireEvent.changeText(firstNameInput, 'John');
    _reactNative.fireEvent.changeText(lastNameInput, 'Doe');
    _reactNative.fireEvent.changeText(ageInput, '30');
    console.log(nextButton.props);
    expect(firstNameInput.props.value).toBe('John');
    expect(lastNameInput.props.value).toBe('Doe');
    expect(ageInput.props.value).toBe('30');
    expect(nextButton.props.disabled).toBe(false);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsInVzZUlzRm9jdXNlZCIsImZuIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfRm9ybSIsIl90ZXN0VXRpbHMiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwiY3JlYXRlVGVzdFByb3BzIiwicHJvcHMiLCJuYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJkZXNjcmliZSIsInRlc3QiLCJfcmVuZGVyV2l0aFByb3ZpZGVycyIsInJlbmRlcldpdGhQcm92aWRlcnMiLCJqc3giLCJkZWZhdWx0Iiwicm91dGUiLCJrZXkiLCJuYW1lIiwicGFyYW1zIiwiaXNFZGl0IiwiZ2V0QnlQbGFjZWhvbGRlclRleHQiLCJnZXRCeVRleHQiLCJmaXJzdE5hbWVJbnB1dCIsImxhc3ROYW1lSW5wdXQiLCJhZ2VJbnB1dCIsIm5leHRCdXR0b24iLCJmaXJlRXZlbnQiLCJjaGFuZ2VUZXh0IiwiY29uc29sZSIsImxvZyIsImV4cGVjdCIsInZhbHVlIiwidG9CZSIsImRpc2FibGVkIl0sInNvdXJjZXMiOlsiRm9ybS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtyZW5kZXIsIGZpcmVFdmVudH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHtQcm92aWRlcn0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IEZvcm0gZnJvbSAnLi4vRm9ybSc7XG5pbXBvcnQge3JlbmRlcldpdGhQcm92aWRlcnN9IGZyb20gJy4uLy4uL3V0aWxzL3Rlc3QtdXRpbHMnO1xuaW1wb3J0IHtTdGFja05hdmlnYXRpb25Qcm9wfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9zdGFjayc7XG5pbXBvcnQge1Jvb3RTdGFja1BhcmFtTGlzdH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+ICh7XG4gIC4uLmplc3QucmVxdWlyZUFjdHVhbCgnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJyksXG4gIHVzZUlzRm9jdXNlZDogamVzdC5mbigpLFxufSkpO1xuXG50eXBlIE5hdmlnYXRpb25Qcm9wcyA9IFN0YWNrTmF2aWdhdGlvblByb3A8Um9vdFN0YWNrUGFyYW1MaXN0LCAnRm9ybSc+O1xuXG5jb25zdCBjcmVhdGVUZXN0UHJvcHMgPSAocHJvcHM6IFBhcnRpYWw8TmF2aWdhdGlvblByb3BzPikgPT4gKHtcbiAgbmF2aWdhdGlvbjoge1xuICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXG4gICAgLi4ucHJvcHMsXG4gIH0gYXMgTmF2aWdhdGlvblByb3BzLFxuICAuLi5wcm9wcyxcbn0pO1xuXG5kZXNjcmliZSgnRm9ybScsICgpID0+IHtcbiAgdGVzdCgncmVuZGVycyBjb3JyZWN0bHkgYW5kIGVuYWJsZXMgbmV4dCBidXR0b24gd2hlbiBmb3JtIGlzIGNvbXBsZXRlJywgKCkgPT4ge1xuICAgIGNvbnN0IHByb3BzID0gY3JlYXRlVGVzdFByb3BzKHt9KTtcbiAgICBjb25zdCB7Z2V0QnlQbGFjZWhvbGRlclRleHQsIGdldEJ5VGV4dH0gPSByZW5kZXJXaXRoUHJvdmlkZXJzKFxuICAgICAgPEZvcm1cbiAgICAgICAgcm91dGU9e3trZXk6ICdGb3JtJywgbmFtZTogJ0Zvcm0nLCBwYXJhbXM6IHtpc0VkaXQ6IGZhbHNlfX19XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgIC8+LFxuICAgICk7XG5cbiAgICBjb25zdCBmaXJzdE5hbWVJbnB1dCA9IGdldEJ5UGxhY2Vob2xkZXJUZXh0KCdGaXJzdCBOYW1lJyk7XG4gICAgY29uc3QgbGFzdE5hbWVJbnB1dCA9IGdldEJ5UGxhY2Vob2xkZXJUZXh0KCdMYXN0IE5hbWUnKTtcbiAgICBjb25zdCBhZ2VJbnB1dCA9IGdldEJ5UGxhY2Vob2xkZXJUZXh0KCdBZ2UnKTtcbiAgICBjb25zdCBuZXh0QnV0dG9uID0gZ2V0QnlUZXh0KCdOZXh0Jyk7XG5cbiAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChmaXJzdE5hbWVJbnB1dCwgJ0pvaG4nKTtcbiAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChsYXN0TmFtZUlucHV0LCAnRG9lJyk7XG4gICAgZmlyZUV2ZW50LmNoYW5nZVRleHQoYWdlSW5wdXQsICczMCcpO1xuICAgIGNvbnNvbGUubG9nKG5leHRCdXR0b24ucHJvcHMpO1xuXG4gICAgZXhwZWN0KGZpcnN0TmFtZUlucHV0LnByb3BzLnZhbHVlKS50b0JlKCdKb2huJyk7XG4gICAgZXhwZWN0KGxhc3ROYW1lSW5wdXQucHJvcHMudmFsdWUpLnRvQmUoJ0RvZScpO1xuICAgIGV4cGVjdChhZ2VJbnB1dC5wcm9wcy52YWx1ZSkudG9CZSgnMzAnKTtcbiAgICBleHBlY3QobmV4dEJ1dHRvbi5wcm9wcy5kaXNhYmxlZCkudG9CZShmYWxzZSk7XG4gIH0pO1xuXG4gIC8vICAgdGVzdCgnbmF2aWdhdGVzIHRvIENob29zZUF2YXRhciBzY3JlZW4gd2hlbiBOZXh0IGJ1dHRvbiBpcyBjbGlja2VkJywgKCkgPT4ge1xuICAvLyAgICAgY29uc3QgbmF2aWdhdGlvbk1vY2sgPSB7XG4gIC8vICAgICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXG4gIC8vICAgICB9O1xuXG4gIC8vICAgICBjb25zdCB7Z2V0QnlQbGFjZWhvbGRlclRleHQsIGdldEJ5VGV4dCwgZ2V0QnlUZXN0SWR9ID0gcmVuZGVyKFxuICAvLyAgICAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbiAgLy8gICAgICAgICA8Rm9ybSByb3V0ZT17e3BhcmFtczoge2lzRWRpdDogZmFsc2V9fX0gbmF2aWdhdGlvbj17bmF2aWdhdGlvbk1vY2t9IC8+XG4gIC8vICAgICAgIDwvUHJvdmlkZXI+LFxuICAvLyAgICAgKTtcblxuICAvLyAgICAgY29uc3QgZmlyc3ROYW1lSW5wdXQgPSBnZXRCeVBsYWNlaG9sZGVyVGV4dCgnRmlyc3QgTmFtZScpO1xuICAvLyAgICAgY29uc3QgbGFzdE5hbWVJbnB1dCA9IGdldEJ5UGxhY2Vob2xkZXJUZXh0KCdMYXN0IE5hbWUnKTtcbiAgLy8gICAgIGNvbnN0IGFnZUlucHV0ID0gZ2V0QnlQbGFjZWhvbGRlclRleHQoJ0FnZScpO1xuICAvLyAgICAgY29uc3QgbmV4dEJ1dHRvbiA9IGdldEJ5VGV4dCgnTmV4dCcpO1xuXG4gIC8vICAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChmaXJzdE5hbWVJbnB1dCwgJ0pvaG4nKTtcbiAgLy8gICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGxhc3ROYW1lSW5wdXQsICdEb2UnKTtcbiAgLy8gICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGFnZUlucHV0LCAnMzAnKTtcbiAgLy8gICAgIGZpcmVFdmVudC5wcmVzcyhuZXh0QnV0dG9uKTtcblxuICAvLyAgICAgZXhwZWN0KG5hdmlnYXRpb25Nb2NrLm5hdmlnYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnQ2hvb3NlQXZhdGFyJywge1xuICAvLyAgICAgICBpc0VkaXQ6IGZhbHNlLFxuICAvLyAgICAgfSk7XG4gIC8vICAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBUUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDBCQUEwQixFQUFFO0VBQUEsT0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ2pDQyxJQUFJLENBQUNDLGFBQWEsQ0FBQywwQkFBMEIsQ0FBQztJQUNqREMsWUFBWSxFQUFFRixJQUFJLENBQUNHLEVBQUUsQ0FBQztFQUFDO0FBQUEsQ0FDdkIsQ0FBQztBQUFDLElBQUFDLHNCQUFBLEdBQUFDLE9BQUE7QUFYSixJQUFBQyxNQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxZQUFBLEdBQUFGLE9BQUE7QUFFQSxJQUFBRyxLQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSSxVQUFBLEdBQUFKLE9BQUE7QUFBMkQsSUFB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