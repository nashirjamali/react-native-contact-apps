93da1c0cfc1b475afc32543831eb63d4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Button = _interopRequireDefault(require("../Button"));
var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));
var _jsxRuntime = require("react/jsx-runtime");
describe('Button', function () {
  test('renders correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {})),
      getByTestId = _render.getByTestId;
    var button = getByTestId('button');
    var tree = _reactTestRenderer.default.create((0, _jsxRuntime.jsx)(_Button.default, {})).toJSON();
    expect(tree).toMatchSnapshot();
    console.log(tree);
    expect(button).toBeTruthy();
  });
  test('executes onPress callback when pressed', function () {
    var onPressMock = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: onPressMock
      })),
      getByTestId = _render2.getByTestId;
    var button = getByTestId('button');
    _reactNative.fireEvent.press(button);
    expect(onPressMock).toHaveBeenCalledTimes(1);
  });
  test('applies disabled style when disabled prop is true', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        disabled: true
      })),
      getByTestId = _render3.getByTestId;
    var button = getByTestId('button');
    expect(button.props.style[1]).toEqual({
      backgroundColor: '#3f3f46'
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9CdXR0b24iLCJfcmVhY3RUZXN0UmVuZGVyZXIiLCJfanN4UnVudGltZSIsImRlc2NyaWJlIiwidGVzdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJkZWZhdWx0IiwiZ2V0QnlUZXN0SWQiLCJidXR0b24iLCJ0cmVlIiwicmVuZGVyZXIiLCJjcmVhdGUiLCJ0b0pTT04iLCJleHBlY3QiLCJ0b01hdGNoU25hcHNob3QiLCJjb25zb2xlIiwibG9nIiwidG9CZVRydXRoeSIsIm9uUHJlc3NNb2NrIiwiamVzdCIsImZuIiwiX3JlbmRlcjIiLCJvblByZXNzIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJfcmVuZGVyMyIsImRpc2FibGVkIiwicHJvcHMiLCJzdHlsZSIsInRvRXF1YWwiLCJiYWNrZ3JvdW5kQ29sb3IiXSwic291cmNlcyI6WyJCdXR0b24udGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7cmVuZGVyLCBmaXJlRXZlbnR9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vQnV0dG9uJztcblxuaW1wb3J0IHJlbmRlcmVyIGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInO1xuXG5kZXNjcmliZSgnQnV0dG9uJywgKCkgPT4ge1xuICB0ZXN0KCdyZW5kZXJzIGNvcnJlY3RseScsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxCdXR0b24gLz4pO1xuXG4gICAgY29uc3QgYnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2J1dHRvbicpO1xuXG4gICAgY29uc3QgdHJlZSA9IHJlbmRlcmVyLmNyZWF0ZSg8QnV0dG9uIC8+KS50b0pTT04oKTtcbiAgICBleHBlY3QodHJlZSkudG9NYXRjaFNuYXBzaG90KCk7XG4gICAgY29uc29sZS5sb2codHJlZSk7XG4gICAgXG5cbiAgICBleHBlY3QoYnV0dG9uKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIHRlc3QoJ2V4ZWN1dGVzIG9uUHJlc3MgY2FsbGJhY2sgd2hlbiBwcmVzc2VkJywgKCkgPT4ge1xuICAgIGNvbnN0IG9uUHJlc3NNb2NrID0gamVzdC5mbigpO1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPEJ1dHRvbiBvblByZXNzPXtvblByZXNzTW9ja30gLz4pO1xuICAgIGNvbnN0IGJ1dHRvbiA9IGdldEJ5VGVzdElkKCdidXR0b24nKTtcbiAgICBmaXJlRXZlbnQucHJlc3MoYnV0dG9uKTtcbiAgICBleHBlY3Qob25QcmVzc01vY2spLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgfSk7XG5cbiAgdGVzdCgnYXBwbGllcyBkaXNhYmxlZCBzdHlsZSB3aGVuIGRpc2FibGVkIHByb3AgaXMgdHJ1ZScsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxCdXR0b24gZGlzYWJsZWQgLz4pO1xuICAgIGNvbnN0IGJ1dHRvbiA9IGdldEJ5VGVzdElkKCdidXR0b24nKTtcbiAgICBleHBlY3QoYnV0dG9uLnByb3BzLnN0eWxlWzFdKS50b0VxdWFsKHtiYWNrZ3JvdW5kQ29sb3I6ICcjM2YzZjQ2J30pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUcsa0JBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUEyQyxJQUFBSSxXQUFBLEdBQUFKLE9BQUE7QUFFM0NLLFFBQVEsQ0FBQyxRQUFRLEVBQUUsWUFBTTtFQUN2QkMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLFlBQU07SUFDOUIsSUFBQUMsT0FBQSxHQUFzQixJQUFBQyxtQkFBTSxFQUFDLElBQUFKLFdBQUEsQ0FBQUssR0FBQSxFQUFDUCxPQUFBLENBQUFRLE9BQU0sSUFBRSxDQUFDLENBQUM7TUFBakNDLFdBQVcsR0FBQUosT0FBQSxDQUFYSSxXQUFXO0lBRWxCLElBQU1DLE1BQU0sR0FBR0QsV0FBVyxDQUFDLFFBQVEsQ0FBQztJQUVwQyxJQUFNRSxJQUFJLEdBQUdDLDBCQUFRLENBQUNDLE1BQU0sQ0FBQyxJQUFBWCxXQUFBLENBQUFLLEdBQUEsRUFBQ1AsT0FBQSxDQUFBUSxPQUFNLElBQUUsQ0FBQyxDQUFDLENBQUNNLE1BQU0sQ0FBQyxDQUFDO0lBQ2pEQyxNQUFNLENBQUNKLElBQUksQ0FBQyxDQUFDSyxlQUFlLENBQUMsQ0FBQztJQUM5QkMsT0FBTyxDQUFDQyxHQUFHLENBQUNQLElBQUksQ0FBQztJQUdqQkksTUFBTSxDQUFDTCxNQUFNLENBQUMsQ0FBQ1MsVUFBVSxDQUFDLENBQUM7RUFDN0IsQ0FBQyxDQUFDO0VBRUZmLElBQUksQ0FBQyx3Q0FBd0MsRUFBRSxZQUFNO0lBQ25ELElBQU1nQixXQUFXLEdBQUdDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDN0IsSUFBQUMsUUFBQSxHQUFzQixJQUFBakIsbUJBQU0sRUFBQyxJQUFBSixXQUFBLENBQUFLLEdBQUEsRUFBQ1AsT0FBQSxDQUFBUSxPQUFNO1FBQUNnQixPQUFPLEVBQUVKO01BQVksQ0FBRSxDQUFDLENBQUM7TUFBdkRYLFdBQVcsR0FBQWMsUUFBQSxDQUFYZCxXQUFXO0lBQ2xCLElBQU1DLE1BQU0sR0FBR0QsV0FBVyxDQUFDLFFBQVEsQ0FBQztJQUNwQ2dCLHNCQUFTLENBQUNDLEtBQUssQ0FBQ2hCLE1BQU0sQ0FBQztJQUN2QkssTUFBTSxDQUFDSyxXQUFXLENBQUMsQ0FBQ08scUJBQXFCLENBQUMsQ0FBQyxDQUFDO0VBQzlDLENBQUMsQ0FBQztFQUVGdkIsSUFBSSxDQUFDLG1EQUFtRCxFQUFFLFlBQU07SUFDOUQsSUFBQXdCLFFBQUEsR0FBc0IsSUFBQXRCLG1CQUFNLEVBQUMsSUFBQUosV0FBQSxDQUFBSyxHQUFBLEVBQUNQLE9BQUEsQ0FBQVEsT0FBTTtRQUFDcUIsUUFBUTtNQUFBLENBQUUsQ0FBQyxDQUFDO01BQTFDcEIsV0FBVyxHQUFBbUIsUUFBQSxDQUFYbkIsV0FBVztJQUNsQixJQUFNQyxNQUFNLEdBQUdELFdBQVcsQ0FBQyxRQUFRLENBQUM7SUFDcENNLE1BQU0sQ0FBQ0wsTUFBTSxDQUFDb0IsS0FBSyxDQUFDQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsT0FBTyxDQUFDO01BQUNDLGVBQWUsRUFBRTtJQUFTLENBQUMsQ0FBQztFQUNyRSxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==