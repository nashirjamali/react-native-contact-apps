b79c86d9c11f2825696d93b60cb027f6
_getJestObj().mock('../../apis/contact', function () {
  return {
    getContact: jest.fn(),
    deleteContact: jest.fn()
  };
});
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useIsFocused: jest.fn()
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _Detail = _interopRequireDefault(require("../Detail"));
var _contact = require("../../apis/contact");
var _testUtils = require("../../utils/test-utils");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var getContactMock = _contact.getContact;
var deleteContactMock = _contact.deleteContact;
var alertMock = _reactNative2.Alert.alert;
var createTestProps = function createTestProps(props) {
  return Object.assign({
    navigation: Object.assign({
      navigate: jest.fn(),
      goBack: jest.fn()
    }, props)
  }, props);
};
describe('Detail', function () {
  var mockContact = {
    id: '1',
    firstName: 'John',
    lastName: 'Doe',
    age: 30,
    photo: 'https://example.com/avatar.jpg'
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  test('renders contact details and triggers delete confirmation', (0, _asyncToGenerator2.default)(function* () {
    getContactMock.mockResolvedValueOnce({
      status: 200,
      data: {
        data: mockContact
      }
    });
    var props = createTestProps({});
    var _renderWithProviders = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_Detail.default, Object.assign({
        route: {
          key: 'Detail',
          name: 'Detail',
          params: {
            id: '1'
          }
        }
      }, props))),
      getByText = _renderWithProviders.getByText,
      getByLabelText = _renderWithProviders.getByLabelText;
    yield (0, _reactNative.waitFor)(function () {
      expect(_contact.getContact).toHaveBeenCalledTimes(1);
    });
    expect(getByText('Detail')).toBeTruthy();
    expect(getByText('First Name')).toBeTruthy();
    expect(getByText('John')).toBeTruthy();
    expect(getByText('Last Name')).toBeTruthy();
    expect(getByText('Doe')).toBeTruthy();
    expect(getByText('Age')).toBeTruthy();
    expect(getByText('30')).toBeTruthy();
    expect(getByLabelText('button-delete')).toBeTruthy();
    _reactNative.fireEvent.press(getByLabelText('button-delete'));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('Delete contact', 'Are you sure delete John Doe?', [{
      text: 'Cancel',
      style: 'cancel',
      isPreferred: true
    }, {
      text: 'Sure',
      style: 'default',
      isPreferred: false,
      onPress: expect.any(Function)
    }], {
      cancelable: true
    });
  }));
  test('triggers delete action and navigates back after confirmation', (0, _asyncToGenerator2.default)(function* () {
    alertMock.mockImplementationOnce(function (title, message, buttons) {
      var deleteButton = buttons.find(function (button) {
        return button.text === 'Sure';
      });
      deleteButton.onPress();
    });
    getContactMock.mockResolvedValueOnce({
      status: 200,
      data: {
        data: mockContact
      }
    });
    deleteContactMock.mockResolvedValueOnce({
      status: 201
    });
    var props = createTestProps({});
    var _renderWithProviders2 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_Detail.default, Object.assign({
        route: {
          key: 'Detail',
          name: 'Detail',
          params: {
            id: '1'
          }
        }
      }, props))),
      getByText = _renderWithProviders2.getByText,
      getByLabelText = _renderWithProviders2.getByLabelText;
    yield (0, _reactNative.waitFor)(function () {
      expect(_contact.getContact).toHaveBeenCalledTimes(1);
    });
    _reactNative.fireEvent.press(getByLabelText('button-delete'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_contact.deleteContact).toHaveBeenCalledTimes(1);
      expect(props.navigation.goBack).toHaveBeenCalledTimes(1);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,