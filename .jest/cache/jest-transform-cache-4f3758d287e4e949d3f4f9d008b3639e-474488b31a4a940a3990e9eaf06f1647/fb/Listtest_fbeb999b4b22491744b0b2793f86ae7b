4fb607ef1ff218700dbe9229859b8f35
_getJestObj().mock('../../apis/contact', function () {
  return {
    getContacts: jest.fn()
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useIsFocused: jest.fn()
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _List = _interopRequireDefault(require("../List"));
var _contact = require("../../apis/contact");
var _testUtils = require("../../utils/test-utils");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var createTestProps = function createTestProps(props) {
  return Object.assign({
    navigation: Object.assign({
      navigate: jest.fn()
    }, props)
  }, props);
};
describe('List', function () {
  afterEach(function () {
    var mockedGetContacts = _contact.getContacts;
    mockedGetContacts.mockClear();
  });
  test('renders correctly and fetches contacts', (0, _asyncToGenerator2.default)(function* () {
    var mockContacts = [{
      id: '111',
      firstName: 'John',
      lastName: 'Doe',
      age: 20,
      photo: 'https://picsum.photos/200'
    }, {
      id: '222',
      firstName: 'Jane',
      lastName: 'Smith',
      age: 20,
      photo: 'https://picsum.photos/200'
    }];
    var mockedGetContacts = _contact.getContacts;
    mockedGetContacts.mockResolvedValueOnce({
      data: {
        data: mockContacts
      },
      status: 200
    });
    var props = createTestProps({});
    var _renderWithProviders = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_List.default, Object.assign({
        route: {
          key: 'List',
          name: 'List'
        }
      }, props))),
      getByText = _renderWithProviders.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('Contact')).toBeTruthy();
      expect(getByText('John Doe')).toBeTruthy();
      expect(getByText('Jane Smith')).toBeTruthy();
    });
    expect(mockedGetContacts).toHaveBeenCalledTimes(1);
  }));
  test('displays error message when fetching contacts fails', (0, _asyncToGenerator2.default)(function* () {
    var mockedGetContacts = _contact.getContacts;
    mockedGetContacts.mockResolvedValueOnce({
      data: {
        data: null
      },
      status: 500
    });
    jest.spyOn(_reactNative2.Alert, 'alert');
    var props = createTestProps({});
    (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_List.default, Object.assign({
      route: {
        key: 'List',
        name: 'List'
      }
    }, props)));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('Error', 'something went wrong');
    });
    expect(mockedGetContacts).toHaveBeenCalledTimes(1);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,