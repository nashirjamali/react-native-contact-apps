4d7cc47baba98dfc67b81980102a4054
_getJestObj().mock('../../apis/contact', function () {
  return {
    getContacts: jest.fn()
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useIsFocused: jest.fn()
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _List = _interopRequireDefault(require("../List"));
var _contact = require("../../apis/contact");
var _testUtils = require("../../utils/test-utils");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var createTestProps = function createTestProps(props) {
  return Object.assign({
    navigation: Object.assign({
      navigate: jest.fn()
    }, props)
  }, props);
};
describe('List', function () {
  test('renders correctly and fetches contacts', (0, _asyncToGenerator2.default)(function* () {
    var mockContacts = [{
      id: '111',
      firstName: 'John',
      lastName: 'Doe',
      age: 20,
      photo: 'https://picsum.photos/200'
    }, {
      id: '222',
      firstName: 'Jane',
      lastName: 'Smith',
      age: 20,
      photo: 'https://picsum.photos/200'
    }];
    var mockedGetContacts = _contact.getContacts;
    mockedGetContacts.mockResolvedValueOnce({
      data: {
        data: mockContacts
      },
      status: 200
    });
    var props = createTestProps({});
    var _renderWithProviders = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_List.default, Object.assign({
        route: {
          key: 'List',
          name: 'List'
        }
      }, props))),
      getByText = _renderWithProviders.getByText;
    _reactNative.screen.debug();
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('Contact')).toBeTruthy();
      expect(getByText('John Doe')).toBeTruthy();
      expect(getByText('Jane Smith')).toBeTruthy();
    });
    expect(_contact.getContacts).toHaveBeenCalledTimes(1);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJnZXRDb250YWN0cyIsImplc3QiLCJmbiIsIk9iamVjdCIsImFzc2lnbiIsInJlcXVpcmVBY3R1YWwiLCJ1c2VJc0ZvY3VzZWQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9MaXN0IiwiX2NvbnRhY3QiLCJfdGVzdFV0aWxzIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImNyZWF0ZVRlc3RQcm9wcyIsInByb3BzIiwibmF2aWdhdGlvbiIsIm5hdmlnYXRlIiwiZGVzY3JpYmUiLCJ0ZXN0IiwiZGVmYXVsdCIsIm1vY2tDb250YWN0cyIsImlkIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJhZ2UiLCJwaG90byIsIm1vY2tlZEdldENvbnRhY3RzIiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwiZGF0YSIsInN0YXR1cyIsIl9yZW5kZXJXaXRoUHJvdmlkZXJzIiwicmVuZGVyV2l0aFByb3ZpZGVycyIsImpzeCIsInJvdXRlIiwia2V5IiwibmFtZSIsImdldEJ5VGV4dCIsInNjcmVlbiIsImRlYnVnIiwid2FpdEZvciIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiXSwic291cmNlcyI6WyJMaXN0LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3JlbmRlciwgc2NyZWVuLCB3YWl0Rm9yfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgTGlzdCBmcm9tICcuLi9MaXN0JztcbmltcG9ydCB7Z2V0Q29udGFjdHN9IGZyb20gJy4uLy4uL2FwaXMvY29udGFjdCc7XG5pbXBvcnQge0F4aW9zUmVzcG9uc2V9IGZyb20gJ2F4aW9zJztcbmltcG9ydCB7U3RhY2tOYXZpZ2F0aW9uUHJvcH0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vc3RhY2snO1xuaW1wb3J0IHtSb290U3RhY2tQYXJhbUxpc3R9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCB7cmVuZGVyV2l0aFByb3ZpZGVyc30gZnJvbSAnLi4vLi4vdXRpbHMvdGVzdC11dGlscyc7XG5cbmplc3QubW9jaygnLi4vLi4vYXBpcy9jb250YWN0JywgKCkgPT4gKHtcbiAgZ2V0Q29udGFjdHM6IGplc3QuZm4oKSxcbn0pKTtcblxuamVzdC5tb2NrKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnLCAoKSA9PiAoe1xuICAuLi5qZXN0LnJlcXVpcmVBY3R1YWwoJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScpLFxuICB1c2VJc0ZvY3VzZWQ6IGplc3QuZm4oKSxcbn0pKTtcblxudHlwZSBOYXZpZ2F0aW9uUHJvcHMgPSBTdGFja05hdmlnYXRpb25Qcm9wPFJvb3RTdGFja1BhcmFtTGlzdCwgJ0xpc3QnPjtcblxuY29uc3QgY3JlYXRlVGVzdFByb3BzID0gKHByb3BzOiBQYXJ0aWFsPE5hdmlnYXRpb25Qcm9wcz4pID0+ICh7XG4gIG5hdmlnYXRpb246IHtcbiAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxuICAgIC4uLnByb3BzLFxuICB9IGFzIE5hdmlnYXRpb25Qcm9wcyxcbiAgLi4ucHJvcHMsXG59KTtcblxuZGVzY3JpYmUoJ0xpc3QnLCAoKSA9PiB7XG4gIHRlc3QoJ3JlbmRlcnMgY29ycmVjdGx5IGFuZCBmZXRjaGVzIGNvbnRhY3RzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tDb250YWN0cyA9IFtcbiAgICAgIHtcbiAgICAgICAgaWQ6ICcxMTEnLFxuICAgICAgICBmaXJzdE5hbWU6ICdKb2huJyxcbiAgICAgICAgbGFzdE5hbWU6ICdEb2UnLFxuICAgICAgICBhZ2U6IDIwLFxuICAgICAgICBwaG90bzogJ2h0dHBzOi8vcGljc3VtLnBob3Rvcy8yMDAnLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWQ6ICcyMjInLFxuICAgICAgICBmaXJzdE5hbWU6ICdKYW5lJyxcbiAgICAgICAgbGFzdE5hbWU6ICdTbWl0aCcsXG4gICAgICAgIGFnZTogMjAsXG4gICAgICAgIHBob3RvOiAnaHR0cHM6Ly9waWNzdW0ucGhvdG9zLzIwMCcsXG4gICAgICB9LFxuICAgIF07XG4gICAgY29uc3QgbW9ja2VkR2V0Q29udGFjdHMgPSBnZXRDb250YWN0cyBhcyBqZXN0Lk1vY2tlZEZ1bmN0aW9uPFxuICAgICAgdHlwZW9mIGdldENvbnRhY3RzXG4gICAgPjtcbiAgICBtb2NrZWRHZXRDb250YWN0cy5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgZGF0YToge2RhdGE6IG1vY2tDb250YWN0c30sXG4gICAgICBzdGF0dXM6IDIwMCxcbiAgICB9IGFzIEF4aW9zUmVzcG9uc2UpO1xuXG4gICAgY29uc3QgcHJvcHMgPSBjcmVhdGVUZXN0UHJvcHMoe30pO1xuICAgIGNvbnN0IHtnZXRCeVRleHR9ID0gcmVuZGVyV2l0aFByb3ZpZGVycyhcbiAgICAgIDxMaXN0IHJvdXRlPXt7a2V5OiAnTGlzdCcsIG5hbWU6ICdMaXN0J319IHsuLi5wcm9wc30gLz4sXG4gICAgKTtcblxuICAgIHNjcmVlbi5kZWJ1ZygpO1xuXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCdDb250YWN0JykpLnRvQmVUcnV0aHkoKTtcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoJ0pvaG4gRG9lJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoJ0phbmUgU21pdGgnKSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuXG4gICAgLy8gVmVyaWZ5IHRoYXQgZ2V0Q29udGFjdHMgaXMgY2FsbGVkXG4gICAgZXhwZWN0KGdldENvbnRhY3RzKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuXG4gIC8vICAgdGVzdCgnZGlzcGxheXMgZXJyb3IgbWVzc2FnZSB3aGVuIGZldGNoaW5nIGNvbnRhY3RzIGZhaWxzJywgYXN5bmMgKCkgPT4ge1xuICAvLyAgICAgZ2V0Q29udGFjdHMubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgLy8gICAgICAgZGF0YTogbnVsbCxcbiAgLy8gICAgICAgc3RhdHVzOiA1MDAsXG4gIC8vICAgICB9KTtcblxuICAvLyAgICAgY29uc3Qge2dldEJ5VGV4dH0gPSByZW5kZXIoPExpc3QgLz4pO1xuXG4gIC8vICAgICAvLyBMb2FkaW5nIHN0YXRlIGlzIGRpc3BsYXllZCBpbml0aWFsbHlcbiAgLy8gICAgIGV4cGVjdChnZXRCeVRleHQoJ0xvYWRpbmcuLi4nKSkudG9CZVRydXRoeSgpO1xuXG4gIC8vICAgICAvLyBXYWl0IGZvciBlcnJvciBtZXNzYWdlIHRvIGJlIGRpc3BsYXllZFxuICAvLyAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gIC8vICAgICAgIGV4cGVjdChnZXRCeVRleHQoJ0Vycm9yJykpLnRvQmVUcnV0aHkoKTtcbiAgLy8gICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnc29tZXRoaW5nIHdlbnQgd3JvbmcnKSkudG9CZVRydXRoeSgpO1xuICAvLyAgICAgfSk7XG5cbiAgLy8gICAgIC8vIFZlcmlmeSB0aGF0IGdldENvbnRhY3RzIGlzIGNhbGxlZFxuICAvLyAgICAgZXhwZWN0KGdldENvbnRhY3RzKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIC8vICAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBU0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLG9CQUFvQixFQUFFO0VBQUEsT0FBTztJQUNyQ0MsV0FBVyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQztFQUN2QixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBRUhKLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDBCQUEwQixFQUFFO0VBQUEsT0FBQUksTUFBQSxDQUFBQyxNQUFBLEtBQ2pDSCxJQUFJLENBQUNJLGFBQWEsQ0FBQywwQkFBMEIsQ0FBQztJQUNqREMsWUFBWSxFQUFFTCxJQUFJ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