478e72c8a9b66616b78104141acd1411
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Form;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactRedux = require("react-redux");
var _Typography = _interopRequireDefault(require("../components/Typography"));
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _Button = _interopRequireDefault(require("../components/Button"));
var _Input = _interopRequireDefault(require("../components/Input"));
var _Gap = _interopRequireDefault(require("../components/Gap"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function Form(_ref) {
  var params = _ref.route.params,
    navigation = _ref.navigation;
  var _useState = (0, _react.useState)(''),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    firstName = _useState2[0],
    setFirstName = _useState2[1];
  var _useState3 = (0, _react.useState)(''),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    lastName = _useState4[0],
    setLastName = _useState4[1];
  var _useState5 = (0, _react.useState)(''),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    age = _useState6[0],
    setAge = _useState6[1];
  var _useState7 = (0, _react.useState)(true),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    disabled = _useState8[0],
    setDisabled = _useState8[1];
  var dispatch = (0, _reactRedux.useDispatch)();
  var formReducer = (0, _reactRedux.useSelector)(function (state) {
    return state.formReducer;
  });
  function acceptOneWord(inputText, setter) {
    var sanitizedText = inputText.trim();
    var words = sanitizedText.split(' ');
    var firstWord = words[0];
    setter(firstWord);
  }
  function onClickNext() {
    dispatch({
      type: 'SET_FORM',
      payload: {
        firstName: firstName,
        lastName: lastName,
        age: Number(age)
      }
    });
    navigation.navigate('ChooseAvatar', {
      isEdit: params.isEdit
    });
  }
  (0, _react.useEffect)(function () {
    if (firstName !== '' && lastName !== '' && age !== '') {
      setDisabled(false);
    } else {
      setDisabled(true);
    }
  }, [firstName, lastName, age]);
  (0, _react.useEffect)(function () {
    if (params.isEdit) {
      setFirstName(formReducer.firstName);
      setLastName(formReducer.lastName);
      setAge(`${formReducer.age}`);
    }
  }, [formReducer, params.isEdit]);
  return (0, _jsxRuntime.jsxs)(_reactNativeSafeAreaContext.SafeAreaView, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.header,
      children: [(0, _jsxRuntime.jsx)(_Typography.default, {
        children: params.isEdit ? 'Edit Contact' : 'New Contact'
      }), (0, _jsxRuntime.jsx)(_Button.default, {
        onPress: onClickNext,
        disabled: disabled,
        children: (0, _jsxRuntime.jsx)(_Typography.default, {
          children: "Next"
        })
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.wrapper,
        children: [(0, _jsxRuntime.jsx)(_Input.default, {
          placeholder: "First Name",
          value: firstName,
          onChangeText: function onChangeText(value) {
            return acceptOneWord(value, setFirstName);
          }
        }), (0, _jsxRuntime.jsx)(_Gap.default, {
          y: 10
        }), (0, _jsxRuntime.jsx)(_Input.default, {
          placeholder: "Last Name",
          value: lastName,
          onChangeText: function onChangeText(value) {
            return acceptOneWord(value, setLastName);
          }
        }), (0, _jsxRuntime.jsx)(_Gap.default, {
          y: 10
        }), (0, _jsxRuntime.jsx)(_Input.default, {
          placeholder: "Age",
          keyboardType: "number-pad",
          value: age,
          onChangeText: setAge
        })]
      })
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#18181b'
  },
  header: {
    backgroundColor: '#09090b',
    padding: 20,
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center'
  },
  wrapper: {
    padding: 20,
    flex: 1
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,