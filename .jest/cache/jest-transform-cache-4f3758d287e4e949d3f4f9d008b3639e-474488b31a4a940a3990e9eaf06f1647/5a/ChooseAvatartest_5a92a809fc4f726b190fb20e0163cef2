3535147c35ef053e109f233239602cbb
_getJestObj().mock('../../apis/contact', function () {
  return {
    postContact: jest.fn(function () {
      return Promise.resolve({
        status: 201
      });
    }),
    putContact: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ChooseAvatar = _interopRequireDefault(require("../ChooseAvatar"));
var _contact = require("../../apis/contact");
var _testUtils = require("../../utils/test-utils");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var createTestProps = function createTestProps(props) {
  return Object.assign({
    navigation: Object.assign({
      navigate: jest.fn(),
      replace: jest.fn()
    }, props)
  }, props);
};
describe('ChooseAvatar', function () {
  test('navigates to List screen after successful contact creation', (0, _asyncToGenerator2.default)(function* () {
    var props = createTestProps({});
    var _renderWithProviders = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_ChooseAvatar.default, Object.assign({
        route: {
          key: 'ChooseAvatar',
          name: 'ChooseAvatar',
          params: {
            isEdit: false
          }
        }
      }, props))),
      getByPlaceholderText = _renderWithProviders.getByPlaceholderText,
      getByLabelText = _renderWithProviders.getByLabelText,
      getAllByTestId = _renderWithProviders.getAllByTestId;
    _reactNative.fireEvent.press(getAllByTestId('avatar-image')[0]);
    yield (0, _reactNative.waitFor)(function () {
      expect(getByLabelText('button-save').props.accessibilityState.disabled).toBe(false);
      _reactNative.fireEvent.press(getByLabelText('button-save'));
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(_contact.postContact).toHaveBeenCalledTimes(1);
      expect(props.navigation.replace).toHaveBeenCalledWith('List');
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,