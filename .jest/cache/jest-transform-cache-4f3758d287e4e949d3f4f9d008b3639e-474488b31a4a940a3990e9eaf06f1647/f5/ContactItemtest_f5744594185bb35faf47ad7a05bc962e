5840f57085b346670bf9185287edf807
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ContactItem = _interopRequireDefault(require("../ContactItem"));
var _jsxRuntime = require("react/jsx-runtime");
describe('ContactItem', function () {
  var contact = {
    firstName: 'John',
    lastName: 'Doe',
    photo: 'https://example.com/avatar.png',
    age: 2,
    id: '111'
  };
  test('renders correctly with contact data', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContactItem.default, {
        contact: contact
      })),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    var avatar = getByTestId('user-avatar');
    var name = getByText('John Doe');
    expect(avatar.props.firstName).toBe('John');
    expect(avatar.props.lastName).toBe('Doe');
    expect(avatar.props.photo).toBe('https://example.com/avatar.png');
    expect(name).toBeTruthy();
  });
  test('calls onPress when pressed', function () {
    var onPressMock = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContactItem.default, {
        contact: contact,
        onPress: onPressMock
      })),
      getByTestId = _render2.getByTestId;
    var touchable = getByTestId('contact-item-touchable');
    _reactNative.fireEvent.press(touchable);
    expect(onPressMock).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Db250YWN0SXRlbSIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJjb250YWN0IiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJwaG90byIsImFnZSIsImlkIiwidGVzdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJkZWZhdWx0IiwiZ2V0QnlUZXh0IiwiZ2V0QnlUZXN0SWQiLCJhdmF0YXIiLCJuYW1lIiwiZXhwZWN0IiwicHJvcHMiLCJ0b0JlIiwidG9CZVRydXRoeSIsIm9uUHJlc3NNb2NrIiwiamVzdCIsImZuIiwiX3JlbmRlcjIiLCJvblByZXNzIiwidG91Y2hhYmxlIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkIl0sInNvdXJjZXMiOlsiQ29udGFjdEl0ZW0udGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7cmVuZGVyLCBmaXJlRXZlbnR9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCBDb250YWN0SXRlbSBmcm9tICcuLi9Db250YWN0SXRlbSc7XG5cbmRlc2NyaWJlKCdDb250YWN0SXRlbScsICgpID0+IHtcbiAgY29uc3QgY29udGFjdCA9IHtcbiAgICBmaXJzdE5hbWU6ICdKb2huJyxcbiAgICBsYXN0TmFtZTogJ0RvZScsXG4gICAgcGhvdG86ICdodHRwczovL2V4YW1wbGUuY29tL2F2YXRhci5wbmcnLFxuICAgIGFnZTogMixcbiAgICBpZDogJzExMScsXG4gIH07XG5cbiAgdGVzdCgncmVuZGVycyBjb3JyZWN0bHkgd2l0aCBjb250YWN0IGRhdGEnLCAoKSA9PiB7XG4gICAgY29uc3Qge2dldEJ5VGV4dCwgZ2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxDb250YWN0SXRlbSBjb250YWN0PXtjb250YWN0fSAvPik7XG5cbiAgICBjb25zdCBhdmF0YXIgPSBnZXRCeVRlc3RJZCgndXNlci1hdmF0YXInKTtcbiAgICBjb25zdCBuYW1lID0gZ2V0QnlUZXh0KCdKb2huIERvZScpO1xuXG4gICAgZXhwZWN0KGF2YXRhci5wcm9wcy5maXJzdE5hbWUpLnRvQmUoJ0pvaG4nKTtcbiAgICBleHBlY3QoYXZhdGFyLnByb3BzLmxhc3ROYW1lKS50b0JlKCdEb2UnKTtcbiAgICBleHBlY3QoYXZhdGFyLnByb3BzLnBob3RvKS50b0JlKCdodHRwczovL2V4YW1wbGUuY29tL2F2YXRhci5wbmcnKTtcbiAgICBleHBlY3QobmFtZSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICB0ZXN0KCdjYWxscyBvblByZXNzIHdoZW4gcHJlc3NlZCcsICgpID0+IHtcbiAgICBjb25zdCBvblByZXNzTW9jayA9IGplc3QuZm4oKTtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKFxuICAgICAgPENvbnRhY3RJdGVtIGNvbnRhY3Q9e2NvbnRhY3R9IG9uUHJlc3M9e29uUHJlc3NNb2NrfSAvPixcbiAgICApO1xuXG4gICAgY29uc3QgdG91Y2hhYmxlID0gZ2V0QnlUZXN0SWQoJ2NvbnRhY3QtaXRlbS10b3VjaGFibGUnKTtcbiAgICBmaXJlRXZlbnQucHJlc3ModG91Y2hhYmxlKTtcblxuICAgIGV4cGVjdChvblByZXNzTW9jaykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsWUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQXlDLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUV6Q0ksUUFBUSxDQUFDLGFBQWEsRUFBRSxZQUFNO0VBQzVCLElBQU1DLE9BQU8sR0FBRztJQUNkQyxTQUFTLEVBQUUsTUFBTTtJQUNqQkMsUUFBUSxFQUFFLEtBQUs7SUFDZkMsS0FBSyxFQUFFLGdDQUFnQztJQUN2Q0MsR0FBRyxFQUFFLENBQUM7SUFDTkMsRUFBRSxFQUFFO0VBQ04sQ0FBQztFQUVEQyxJQUFJLENBQUMscUNBQXFDLEVBQUUsWUFBTTtJQUNoRCxJQUFBQyxPQUFBLEdBQWlDLElBQUFDLG1CQUFNLEVBQUMsSUFBQVYsV0FBQSxDQUFBVyxHQUFBLEVBQUNaLFlBQUEsQ0FBQWEsT0FBVztRQUFDVixPQUFPLEVBQUVBO01BQVEsQ0FBRSxDQUFDLENBQUM7TUFBbkVXLFNBQVMsR0FBQUosT0FBQSxDQUFUSSxTQUFTO01BQUVDLFdBQVcsR0FBQUwsT0FBQSxDQUFYSyxXQUFXO0lBRTdCLElBQU1DLE1BQU0sR0FBR0QsV0FBVyxDQUFDLGFBQWEsQ0FBQztJQUN6QyxJQUFNRSxJQUFJLEdBQUdILFNBQVMsQ0FBQyxVQUFVLENBQUM7SUFFbENJLE1BQU0sQ0FBQ0YsTUFBTSxDQUFDRyxLQUFLLENBQUNmLFNBQVMsQ0FBQyxDQUFDZ0IsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUMzQ0YsTUFBTSxDQUFDRixNQUFNLENBQUNHLEtBQUssQ0FBQ2QsUUFBUSxDQUFDLENBQUNlLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDekNGLE1BQU0sQ0FBQ0YsTUFBTSxDQUFDRyxLQUFLLENBQUNiLEtBQUssQ0FBQyxDQUFDYyxJQUFJLENBQUMsZ0NBQWdDLENBQUM7SUFDakVGLE1BQU0sQ0FBQ0QsSUFBSSxDQUFDLENBQUNJLFVBQVUsQ0FBQyxDQUFDO0VBQzNCLENBQUMsQ0FBQztFQUVGWixJQUFJLENBQUMsNEJBQTRCLEVBQUUsWUFBTTtJQUN2QyxJQUFNYSxXQUFXLEdBQUdDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDN0IsSUFBQUMsUUFBQSxHQUFzQixJQUFBZCxtQkFBTSxFQUMxQixJQUFBVixXQUFBLENBQUFXLEdBQUEsRUFBQ1osWUFBQSxDQUFBYSxPQUFXO1FBQUNWLE9BQU8sRUFBRUEsT0FBUTtRQUFDdUIsT0FBTyxFQUFFSjtNQUFZLENBQUUsQ0FDeEQsQ0FBQztNQUZNUCxXQUFXLEdBQUFVLFFBQUEsQ0FBWFYsV0FBVztJQUlsQixJQUFNWSxTQUFTLEdBQUdaLFdBQVcsQ0FBQyx3QkFBd0IsQ0FBQztJQUN2RGEsc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDRixTQUFTLENBQUM7SUFFMUJULE1BQU0sQ0FBQ0ksV0FBVyxDQUFDLENBQUNRLGdCQUFnQixDQUFDLENBQUM7RUFDeEMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=