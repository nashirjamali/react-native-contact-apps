7d4d900b5bef42e570258a18ed0043ed
_getJestObj().mock('../../apis/contact', function () {
  return {
    getContacts: jest.fn()
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useIsFocused: jest.fn()
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _List = _interopRequireDefault(require("../List"));
var _contact = require("../../apis/contact");
var _testUtils = require("../../utils/test-utils");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var createTestProps = function createTestProps(props) {
  return Object.assign({
    navigation: Object.assign({
      navigate: jest.fn()
    }, props)
  }, props);
};
describe('List', function () {
  test('renders correctly and fetches contacts', (0, _asyncToGenerator2.default)(function* () {
    var mockContacts = [{
      id: '111',
      firstName: 'John',
      lastName: 'Doe',
      age: 20,
      photo: ''
    }, {
      id: '222',
      firstName: 'Jane',
      lastName: 'Smith',
      age: 20,
      photo: ''
    }];
    var mockedGetContacts = _contact.getContacts;
    mockedGetContacts.mockResolvedValueOnce({
      data: {
        data: mockContacts
      },
      status: 200
    });
    var props = createTestProps({});
    var _renderWithProviders = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_List.default, Object.assign({
        route: {
          key: 'List',
          name: 'List'
        }
      }, props))),
      getByText = _renderWithProviders.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('Contact')).toBeTruthy();
      expect(getByText('John Doe')).toBeTruthy();
      expect(getByText('Jane Smith')).toBeTruthy();
    });
    expect(_contact.getContacts).toHaveBeenCalledTimes(1);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJnZXRDb250YWN0cyIsImplc3QiLCJmbiIsIk9iamVjdCIsImFzc2lnbiIsInJlcXVpcmVBY3R1YWwiLCJ1c2VJc0ZvY3VzZWQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9MaXN0IiwiX2NvbnRhY3QiLCJfdGVzdFV0aWxzIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImNyZWF0ZVRlc3RQcm9wcyIsInByb3BzIiwibmF2aWdhdGlvbiIsIm5hdmlnYXRlIiwiZGVzY3JpYmUiLCJ0ZXN0IiwiZGVmYXVsdCIsIm1vY2tDb250YWN0cyIsImlkIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJhZ2UiLCJwaG90byIsIm1vY2tlZEdldENvbnRhY3RzIiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwiZGF0YSIsInN0YXR1cyIsIl9yZW5kZXJXaXRoUHJvdmlkZXJzIiwicmVuZGVyV2l0aFByb3ZpZGVycyIsImpzeCIsInJvdXRlIiwia2V5IiwibmFtZSIsImdldEJ5VGV4dCIsIndhaXRGb3IiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIl0sInNvdXJjZXMiOlsiTGlzdC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtyZW5kZXIsIHdhaXRGb3J9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCBMaXN0IGZyb20gJy4uL0xpc3QnO1xuaW1wb3J0IHtnZXRDb250YWN0c30gZnJvbSAnLi4vLi4vYXBpcy9jb250YWN0JztcbmltcG9ydCB7QXhpb3NSZXNwb25zZX0gZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHtTdGFja05hdmlnYXRpb25Qcm9wfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9zdGFjayc7XG5pbXBvcnQge1Jvb3RTdGFja1BhcmFtTGlzdH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHtyZW5kZXJXaXRoUHJvdmlkZXJzfSBmcm9tICcuLi8uLi91dGlscy90ZXN0LXV0aWxzJztcblxuamVzdC5tb2NrKCcuLi8uLi9hcGlzL2NvbnRhY3QnLCAoKSA9PiAoe1xuICBnZXRDb250YWN0czogamVzdC5mbigpLFxufSkpO1xuXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+ICh7XG4gIC4uLmplc3QucmVxdWlyZUFjdHVhbCgnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJyksXG4gIHVzZUlzRm9jdXNlZDogamVzdC5mbigpLFxufSkpO1xuXG50eXBlIE5hdmlnYXRpb25Qcm9wcyA9IFN0YWNrTmF2aWdhdGlvblByb3A8Um9vdFN0YWNrUGFyYW1MaXN0LCAnTGlzdCc+O1xuXG5jb25zdCBjcmVhdGVUZXN0UHJvcHMgPSAocHJvcHM6IFBhcnRpYWw8TmF2aWdhdGlvblByb3BzPikgPT4gKHtcbiAgbmF2aWdhdGlvbjoge1xuICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXG4gICAgLi4ucHJvcHMsXG4gIH0gYXMgTmF2aWdhdGlvblByb3BzLFxuICAuLi5wcm9wcyxcbn0pO1xuXG5kZXNjcmliZSgnTGlzdCcsICgpID0+IHtcbiAgdGVzdCgncmVuZGVycyBjb3JyZWN0bHkgYW5kIGZldGNoZXMgY29udGFjdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9ja0NvbnRhY3RzID0gW1xuICAgICAge2lkOiAnMTExJywgZmlyc3ROYW1lOiAnSm9obicsIGxhc3ROYW1lOiAnRG9lJywgYWdlOiAyMCwgcGhvdG86ICcnfSxcbiAgICAgIHtpZDogJzIyMicsIGZpcnN0TmFtZTogJ0phbmUnLCBsYXN0TmFtZTogJ1NtaXRoJywgYWdlOiAyMCwgcGhvdG86ICcnfSxcbiAgICBdO1xuICAgIGNvbnN0IG1vY2tlZEdldENvbnRhY3RzID0gZ2V0Q29udGFjdHMgYXMgamVzdC5Nb2NrZWRGdW5jdGlvbjxcbiAgICAgIHR5cGVvZiBnZXRDb250YWN0c1xuICAgID47XG4gICAgbW9ja2VkR2V0Q29udGFjdHMubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgIGRhdGE6IHtkYXRhOiBtb2NrQ29udGFjdHN9LFxuICAgICAgc3RhdHVzOiAyMDAsXG4gICAgfSBhcyBBeGlvc1Jlc3BvbnNlKTtcblxuICAgIGNvbnN0IHByb3BzID0gY3JlYXRlVGVzdFByb3BzKHt9KTtcbiAgICBjb25zdCB7Z2V0QnlUZXh0fSA9IHJlbmRlcldpdGhQcm92aWRlcnMoXG4gICAgICA8TGlzdCByb3V0ZT17e2tleTogJ0xpc3QnLCBuYW1lOiAnTGlzdCd9fSB7Li4ucHJvcHN9IC8+LFxuICAgICk7XG5cbiAgICAvLyBXYWl0IGZvciBjb250YWN0cyB0byBiZSBmZXRjaGVkIGFuZCByZW5kZXJlZFxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnQ29udGFjdCcpKS50b0JlVHJ1dGh5KCk7XG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCdKb2huIERvZScpKS50b0JlVHJ1dGh5KCk7XG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCdKYW5lIFNtaXRoJykpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcblxuICAgIC8vIFZlcmlmeSB0aGF0IGdldENvbnRhY3RzIGlzIGNhbGxlZFxuICAgIGV4cGVjdChnZXRDb250YWN0cykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICB9KTtcblxuICAvLyAgIHRlc3QoJ2Rpc3BsYXlzIGVycm9yIG1lc3NhZ2Ugd2hlbiBmZXRjaGluZyBjb250YWN0cyBmYWlscycsIGFzeW5jICgpID0+IHtcbiAgLy8gICAgIGdldENvbnRhY3RzLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gIC8vICAgICAgIGRhdGE6IG51bGwsXG4gIC8vICAgICAgIHN0YXR1czogNTAwLFxuICAvLyAgICAgfSk7XG5cbiAgLy8gICAgIGNvbnN0IHtnZXRCeVRleHR9ID0gcmVuZGVyKDxMaXN0IC8+KTtcblxuICAvLyAgICAgLy8gTG9hZGluZyBzdGF0ZSBpcyBkaXNwbGF5ZWQgaW5pdGlhbGx5XG4gIC8vICAgICBleHBlY3QoZ2V0QnlUZXh0KCdMb2FkaW5nLi4uJykpLnRvQmVUcnV0aHkoKTtcblxuICAvLyAgICAgLy8gV2FpdCBmb3IgZXJyb3IgbWVzc2FnZSB0byBiZSBkaXNwbGF5ZWRcbiAgLy8gICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAvLyAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCdFcnJvcicpKS50b0JlVHJ1dGh5KCk7XG4gIC8vICAgICAgIGV4cGVjdChnZXRCeVRleHQoJ3NvbWV0aGluZyB3ZW50IHdyb25nJykpLnRvQmVUcnV0aHkoKTtcbiAgLy8gICAgIH0pO1xuXG4gIC8vICAgICAvLyBWZXJpZnkgdGhhdCBnZXRDb250YWN0cyBpcyBjYWxsZWRcbiAgLy8gICAgIGV4cGVjdChnZXRDb250YWN0cykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAvLyAgIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQVNBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtFQUFBLE9BQU87SUFDckNDLFdBQVcsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDdkIsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUVISixXQUFBLEdBQUtDLElBQUksQ0FBQywwQkFBMEIsRUFBRTtFQUFBLE9BQUFJLE1BQUEsQ0FBQUMsTUFBQSxLQUNqQ0gsSUFBSSxDQUFDSSxhQUFhLENBQUMsMEJBQTBCLENBQUM7SUFDakRDLFlBQVksRUFBRUwsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFBQztBQUFBLENBQ3ZCLENBQUM7QUFBQyxJQUFBSyxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsa0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQWhCSixJQUFBRSxNQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFB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