3cfdc79f86de7936be258592346f5d92
_getJestObj().mock('node-fetch', function () {
  return jest.fn().mockImplementation(function () {
    return Promise.resolve({
      status: 200
    });
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _UserAvatar = _interopRequireDefault(require("../UserAvatar"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('UserAvatar', function () {
  test('renders image if photo exists', (0, _asyncToGenerator2.default)(function* () {
    var photo = 'https://example.com/avatar.jpg';
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_UserAvatar.default, {
        photo: photo,
        firstName: "John",
        lastName: "Doe"
      })),
      getByTestId = _render.getByTestId;
    var image = getByTestId('user-avatar-img');
    yield (0, _reactNative.waitFor)(function () {
      expect(image.props.source.uri).toBe(photo);
    });
  }));
  test('renders initials if photo is not found', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_UserAvatar.default, {
        photo: "non-existing.jpg",
        firstName: "John",
        lastName: "Doe"
      })),
      getByTestId = _render2.getByTestId;
    var textContainer = getByTestId('user-avatar-text');
    var initials = getByTestId('user-avatar-text').props.children.props.children;
    yield (0, _reactNative.waitFor)(function () {
      expect(textContainer).toBeTruthy();
      expect(initials).toBe('JD');
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJqZXN0IiwiZm4iLCJtb2NrSW1wbGVtZW50YXRpb24iLCJQcm9taXNlIiwicmVzb2x2ZSIsInN0YXR1cyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX1VzZXJBdmF0YXIiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwiZGVzY3JpYmUiLCJ0ZXN0IiwiZGVmYXVsdCIsInBob3RvIiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwiZ2V0QnlUZXN0SWQiLCJpbWFnZSIsIndhaXRGb3IiLCJleHBlY3QiLCJwcm9wcyIsInNvdXJjZSIsInVyaSIsInRvQmUiLCJfcmVuZGVyMiIsInRleHRDb250YWluZXIiLCJpbml0aWFscyIsImNoaWxkcmVuIiwidG9CZVRydXRoeSJdLCJzb3VyY2VzIjpbIlVzZXJBdmF0YXIudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiamVzdC5tb2NrKCdub2RlLWZldGNoJywgKCkgPT4ge1xuICByZXR1cm4gamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PlxuICAgIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICBzdGF0dXM6IDIwMCxcbiAgICB9KSxcbiAgKTtcbn0pO1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtyZW5kZXIsIHdhaXRGb3J9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCBVc2VyQXZhdGFyIGZyb20gJy4uL1VzZXJBdmF0YXInO1xuXG5kZXNjcmliZSgnVXNlckF2YXRhcicsICgpID0+IHtcbiAgdGVzdCgncmVuZGVycyBpbWFnZSBpZiBwaG90byBleGlzdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcGhvdG8gPSAnaHR0cHM6Ly9leGFtcGxlLmNvbS9hdmF0YXIuanBnJztcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKFxuICAgICAgPFVzZXJBdmF0YXIgcGhvdG89e3Bob3RvfSBmaXJzdE5hbWU9XCJKb2huXCIgbGFzdE5hbWU9XCJEb2VcIiAvPixcbiAgICApO1xuICAgIGNvbnN0IGltYWdlID0gZ2V0QnlUZXN0SWQoJ3VzZXItYXZhdGFyLWltZycpO1xuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KGltYWdlLnByb3BzLnNvdXJjZS51cmkpLnRvQmUocGhvdG8pO1xuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdyZW5kZXJzIGluaXRpYWxzIGlmIHBob3RvIGlzIG5vdCBmb3VuZCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKFxuICAgICAgPFVzZXJBdmF0YXIgcGhvdG89XCJub24tZXhpc3RpbmcuanBnXCIgZmlyc3ROYW1lPVwiSm9oblwiIGxhc3ROYW1lPVwiRG9lXCIgLz4sXG4gICAgKTtcbiAgICBjb25zdCB0ZXh0Q29udGFpbmVyID0gZ2V0QnlUZXN0SWQoJ3VzZXItYXZhdGFyLXRleHQnKTtcbiAgICBjb25zdCBpbml0aWFscyA9XG4gICAgICBnZXRCeVRlc3RJZCgndXNlci1hdmF0YXItdGV4dCcpLnByb3BzLmNoaWxkcmVuLnByb3BzLmNoaWxkcmVuO1xuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KHRleHRDb250YWluZXIpLnRvQmVUcnV0aHkoKTtcbiAgICAgIGV4cGVjdChpbml0aWFscykudG9CZSgnSkQnKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLFlBQVksRUFBRSxZQUFNO0VBQzVCLE9BQU9DLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0Msa0JBQWtCLENBQUM7SUFBQSxPQUNsQ0MsT0FBTyxDQUFDQyxPQUFPLENBQUM7TUFDZEMsTUFBTSxFQUFFO0lBQ1YsQ0FBQyxDQUFDO0VBQUEsQ0FDSixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBQUMsSUFBQUMsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGtCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFFSCxJQUFBRSxNQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxZQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxXQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFBdUMsSUFBQUssV0FBQSxHQUFBTCxPQUFBO0FBQUEsU0FBQVQsWUFBQTtFQUFBLElBQUFlLFFBQUEsR0FBQU4sT0FBQTtJQUFBUCxJQUFBLEdBQUFhLFFBQUEsQ0FBQWIsSUFBQTtFQUFBRixXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBRSxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFFdkNjLFFBQVEsQ0FBQyxZQUFZLEVBQUUsWUFBTTtFQUMzQkMsSUFBSSxDQUFDLCtCQUErQixNQUFBUCxrQkFBQSxDQUFBUSxPQUFBLEVBQUUsYUFBWTtJQUNoRCxJQUFNQyxLQUFLLEdBQUcsZ0NBQWdDO0lBQzlDLElBQUFDLE9BQUEsR0FBc0IsSUFBQUMsbUJBQU0sRUFDMUIsSUFBQVAsV0FBQSxDQUFBUSxHQUFBLEVBQUNULFdBQUEsQ0FBQUssT0FBVTtRQUFDQyxLQUFLLEVBQUVBLEtBQU07UUFBQ0ksU0FBUyxFQUFDLE1BQU07UUFBQ0MsUUFBUSxFQUFDO01BQUssQ0FBRSxDQUM3RCxDQUFDO01BRk1DLFdBQVcsR0FBQUwsT0FBQSxDQUFYSyxXQUFXO0lBR2xCLElBQU1DLEtBQUssR0FBR0QsV0FBVyxDQUFDLGlCQUFpQixDQUFDO0lBQzVDLE1BQU0sSUFBQUUsb0JBQU8sRUFBQyxZQUFNO01BQ2xCQyxNQUFNLENBQUNGLEtBQUssQ0FBQ0csS0FBSyxDQUFDQyxNQUFNLENBQUNDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUNiLEtBQUssQ0FBQztJQUM1QyxDQUFDLENBQUM7RUFDSixDQUFDLEVBQUM7RUFFRkYsSUFBSSxDQUFDLHdDQUF3QyxNQUFBUCxrQkFBQSxDQUFBUSxPQUFBLEVBQUUsYUFBWTtJQUN6RCxJQUFBZSxRQUFBLEdBQXNCLElBQUFaLG1CQUFNLEVBQzFCLElBQUFQLFdBQUEsQ0FBQVEsR0FBQSxFQUFDVCxXQUFBLENBQUFLLE9BQVU7UUFBQ0MsS0FBSyxFQUFDLGtCQUFrQjtRQUFDSSxTQUFTLEVBQUMsTUFBTTtRQUFDQyxRQUFRLEVBQUM7TUFBSyxDQUFFLENBQ3hFLENBQUM7TUFGTUMsV0FBVyxHQUFBUSxRQUFBLENBQVhSLFdBQVc7SUFHbEIsSUFBTVMsYUFBYSxHQUFHVCxXQUFXLENBQUMsa0JBQWtCLENBQUM7SUFDckQsSUFBTVUsUUFBUSxHQUNaVixXQUFXLENBQUMsa0JBQWtCLENBQUMsQ0FBQ0ksS0FBSyxDQUFDTyxRQUFRLENBQUNQLEtBQUssQ0FBQ08sUUFBUTtJQUMvRCxNQUFNLElBQUFULG9CQUFPLEVBQUMsWUFBTTtNQUNsQkMsTUFBTSxDQUFDTSxhQUFhLENBQUMsQ0FBQ0csVUFBVSxDQUFDLENBQUM7TUFDbENULE1BQU0sQ0FBQ08sUUFBUSxDQUFDLENBQUNILElBQUksQ0FBQyxJQUFJLENBQUM7SUFDN0IsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxFQUFDO0FBQ0osQ0FBQyxDQUFDIn0=