f237796e2b5b3cde8a9d82a7d5dfe006
_getJestObj().mock('../../apis/contact', function () {
  return {
    getContacts: jest.fn()
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useIsFocused: jest.fn()
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _List = _interopRequireDefault(require("../List"));
var _contact = require("../../apis/contact");
var _testUtils = require("../../utils/test-utils");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var createTestProps = function createTestProps(props) {
  return Object.assign({
    navigation: Object.assign({
      navigate: jest.fn()
    }, props)
  }, props);
};
describe('List', function () {
  test('renders correctly and fetches contacts', (0, _asyncToGenerator2.default)(function* () {
    var mockContacts = [{
      id: '111',
      firstName: 'John',
      lastName: 'Doe',
      age: 20,
      photo: ''
    }, {
      id: '222',
      firstName: 'Jane',
      lastName: 'Smith',
      age: 20,
      photo: ''
    }];
    var mockedGetContacts = _contact.getContacts;
    mockedGetContacts.mockResolvedValueOnce({
      data: {
        data: mockContacts
      },
      status: 200
    });
    var props = createTestProps({});
    var _renderWithProviders = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_List.default, Object.assign({
        route: {
          key: 'List',
          name: 'List'
        }
      }, props))),
      getByText = _renderWithProviders.getByText;
    _reactNative.screen.debug();
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('Contact')).toBeTruthy();
      expect(getByText('John Doe')).toBeTruthy();
      expect(getByText('Jane Smith')).toBeTruthy();
    });
    expect(_contact.getContacts).toHaveBeenCalledTimes(1);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJnZXRDb250YWN0cyIsImplc3QiLCJmbiIsIk9iamVjdCIsImFzc2lnbiIsInJlcXVpcmVBY3R1YWwiLCJ1c2VJc0ZvY3VzZWQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9MaXN0IiwiX2NvbnRhY3QiLCJfdGVzdFV0aWxzIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImNyZWF0ZVRlc3RQcm9wcyIsInByb3BzIiwibmF2aWdhdGlvbiIsIm5hdmlnYXRlIiwiZGVzY3JpYmUiLCJ0ZXN0IiwiZGVmYXVsdCIsIm1vY2tDb250YWN0cyIsImlkIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJhZ2UiLCJwaG90byIsIm1vY2tlZEdldENvbnRhY3RzIiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwiZGF0YSIsInN0YXR1cyIsIl9yZW5kZXJXaXRoUHJvdmlkZXJzIiwicmVuZGVyV2l0aFByb3ZpZGVycyIsImpzeCIsInJvdXRlIiwia2V5IiwibmFtZSIsImdldEJ5VGV4dCIsInNjcmVlbiIsImRlYnVnIiwid2FpdEZvciIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiXSwic291cmNlcyI6WyJMaXN0LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3JlbmRlciwgc2NyZWVuLCB3YWl0Rm9yfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgTGlzdCBmcm9tICcuLi9MaXN0JztcbmltcG9ydCB7Z2V0Q29udGFjdHN9IGZyb20gJy4uLy4uL2FwaXMvY29udGFjdCc7XG5pbXBvcnQge0F4aW9zUmVzcG9uc2V9IGZyb20gJ2F4aW9zJztcbmltcG9ydCB7U3RhY2tOYXZpZ2F0aW9uUHJvcH0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vc3RhY2snO1xuaW1wb3J0IHtSb290U3RhY2tQYXJhbUxpc3R9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCB7cmVuZGVyV2l0aFByb3ZpZGVyc30gZnJvbSAnLi4vLi4vdXRpbHMvdGVzdC11dGlscyc7XG5cbmplc3QubW9jaygnLi4vLi4vYXBpcy9jb250YWN0JywgKCkgPT4gKHtcbiAgZ2V0Q29udGFjdHM6IGplc3QuZm4oKSxcbn0pKTtcblxuamVzdC5tb2NrKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnLCAoKSA9PiAoe1xuICAuLi5qZXN0LnJlcXVpcmVBY3R1YWwoJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScpLFxuICB1c2VJc0ZvY3VzZWQ6IGplc3QuZm4oKSxcbn0pKTtcblxudHlwZSBOYXZpZ2F0aW9uUHJvcHMgPSBTdGFja05hdmlnYXRpb25Qcm9wPFJvb3RTdGFja1BhcmFtTGlzdCwgJ0xpc3QnPjtcblxuY29uc3QgY3JlYXRlVGVzdFByb3BzID0gKHByb3BzOiBQYXJ0aWFsPE5hdmlnYXRpb25Qcm9wcz4pID0+ICh7XG4gIG5hdmlnYXRpb246IHtcbiAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxuICAgIC4uLnByb3BzLFxuICB9IGFzIE5hdmlnYXRpb25Qcm9wcyxcbiAgLi4ucHJvcHMsXG59KTtcblxuZGVzY3JpYmUoJ0xpc3QnLCAoKSA9PiB7XG4gIHRlc3QoJ3JlbmRlcnMgY29ycmVjdGx5IGFuZCBmZXRjaGVzIGNvbnRhY3RzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tDb250YWN0cyA9IFtcbiAgICAgIHtpZDogJzExMScsIGZpcnN0TmFtZTogJ0pvaG4nLCBsYXN0TmFtZTogJ0RvZScsIGFnZTogMjAsIHBob3RvOiAnJ30sXG4gICAgICB7aWQ6ICcyMjInLCBmaXJzdE5hbWU6ICdKYW5lJywgbGFzdE5hbWU6ICdTbWl0aCcsIGFnZTogMjAsIHBob3RvOiAnJ30sXG4gICAgXTtcbiAgICBjb25zdCBtb2NrZWRHZXRDb250YWN0cyA9IGdldENvbnRhY3RzIGFzIGplc3QuTW9ja2VkRnVuY3Rpb248XG4gICAgICB0eXBlb2YgZ2V0Q29udGFjdHNcbiAgICA+O1xuICAgIG1vY2tlZEdldENvbnRhY3RzLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICBkYXRhOiB7ZGF0YTogbW9ja0NvbnRhY3RzfSxcbiAgICAgIHN0YXR1czogMjAwLFxuICAgIH0gYXMgQXhpb3NSZXNwb25zZSk7XG5cbiAgICBjb25zdCBwcm9wcyA9IGNyZWF0ZVRlc3RQcm9wcyh7fSk7XG4gICAgY29uc3Qge2dldEJ5VGV4dH0gPSByZW5kZXJXaXRoUHJvdmlkZXJzKFxuICAgICAgPExpc3Qgcm91dGU9e3trZXk6ICdMaXN0JywgbmFtZTogJ0xpc3QnfX0gey4uLnByb3BzfSAvPixcbiAgICApO1xuXG4gICAgc2NyZWVuLmRlYnVnKCk7XG5cbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoJ0NvbnRhY3QnKSkudG9CZVRydXRoeSgpO1xuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnSm9obiBEb2UnKSkudG9CZVRydXRoeSgpO1xuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnSmFuZSBTbWl0aCcpKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG5cbiAgICAvLyBWZXJpZnkgdGhhdCBnZXRDb250YWN0cyBpcyBjYWxsZWRcbiAgICBleHBlY3QoZ2V0Q29udGFjdHMpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgfSk7XG5cbiAgLy8gICB0ZXN0KCdkaXNwbGF5cyBlcnJvciBtZXNzYWdlIHdoZW4gZmV0Y2hpbmcgY29udGFjdHMgZmFpbHMnLCBhc3luYyAoKSA9PiB7XG4gIC8vICAgICBnZXRDb250YWN0cy5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAvLyAgICAgICBkYXRhOiBudWxsLFxuICAvLyAgICAgICBzdGF0dXM6IDUwMCxcbiAgLy8gICAgIH0pO1xuXG4gIC8vICAgICBjb25zdCB7Z2V0QnlUZXh0fSA9IHJlbmRlcig8TGlzdCAvPik7XG5cbiAgLy8gICAgIC8vIExvYWRpbmcgc3RhdGUgaXMgZGlzcGxheWVkIGluaXRpYWxseVxuICAvLyAgICAgZXhwZWN0KGdldEJ5VGV4dCgnTG9hZGluZy4uLicpKS50b0JlVHJ1dGh5KCk7XG5cbiAgLy8gICAgIC8vIFdhaXQgZm9yIGVycm9yIG1lc3NhZ2UgdG8gYmUgZGlzcGxheWVkXG4gIC8vICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgLy8gICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnRXJyb3InKSkudG9CZVRydXRoeSgpO1xuICAvLyAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCdzb21ldGhpbmcgd2VudCB3cm9uZycpKS50b0JlVHJ1dGh5KCk7XG4gIC8vICAgICB9KTtcblxuICAvLyAgICAgLy8gVmVyaWZ5IHRoYXQgZ2V0Q29udGFjdHMgaXMgY2FsbGVkXG4gIC8vICAgICBleHBlY3QoZ2V0Q29udGFjdHMpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgLy8gICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFTQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsb0JBQW9CLEVBQUU7RUFBQSxPQUFPO0lBQ3JDQyxXQUFXLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0VBQ3ZCLENBQUM7QUFBQSxDQUFDLENBQUM7QUFFSEosV0FBQSxHQUFLQyxJQUFJLENBQUMsMEJBQTBCLEVBQUU7RUFBQSxPQUFBSSxNQUFBLENBQUFDLE1BQUEsS0FDakNILElBQUksQ0FBQ0ksYUFBYSxDQUFDLDBCQUEwQixDQUFDO0lBQ2pEQyxZQUFZLEVBQUVMLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0VBQUM7QUFBQSxDQUN2QixDQUFDO0FBQUMsSUFBQUssc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGtCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFoQkosSUFBQUUsTUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsWUFB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