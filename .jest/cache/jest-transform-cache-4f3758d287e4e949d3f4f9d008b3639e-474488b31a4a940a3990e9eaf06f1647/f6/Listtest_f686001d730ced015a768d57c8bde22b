f6a85bb0e3dc63339bcda655eceb4922
_getJestObj().mock('../../apis/contact', function () {
  return {
    getContacts: jest.fn()
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useIsFocused: jest.fn()
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _List = _interopRequireDefault(require("../List"));
var _contact = require("../../apis/contact");
var _testUtils = require("../../utils/test-utils");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var createTestProps = function createTestProps(props) {
  return Object.assign({
    navigation: Object.assign({
      navigate: jest.fn()
    }, props)
  }, props);
};
describe('List', function () {
  test('renders correctly and fetches contacts', (0, _asyncToGenerator2.default)(function* () {
    var mockContacts = [{
      id: '111',
      firstName: 'John',
      lastName: 'Doe',
      age: 20,
      photo: 'https://picsum.photos/200'
    }, {
      id: '222',
      firstName: 'Jane',
      lastName: 'Smith',
      age: 20,
      photo: 'https://picsum.photos/200'
    }];
    var mockedGetContacts = _contact.getContacts;
    mockedGetContacts.mockResolvedValueOnce({
      data: {
        data: mockContacts
      },
      status: 200
    });
    var props = createTestProps({});
    var _renderWithProviders = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_List.default, Object.assign({
        route: {
          key: 'List',
          name: 'List'
        }
      }, props))),
      getByText = _renderWithProviders.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('Contact')).toBeTruthy();
      expect(getByText('John Doe')).toBeTruthy();
      expect(getByText('Jane Smith')).toBeTruthy();
    });
    expect(_contact.getContacts).toHaveBeenCalledTimes(1);
  }));
  test('displays error message when fetching contacts fails', (0, _asyncToGenerator2.default)(function* () {
    var mockedGetContacts = _contact.getContacts;
    mockedGetContacts.mockResolvedValueOnce({
      data: {
        data: null
      },
      status: 500
    });
    var props = createTestProps({});
    var _renderWithProviders2 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_List.default, Object.assign({
        route: {
          key: 'List',
          name: 'List'
        }
      }, props))),
      getByText = _renderWithProviders2.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('Error')).toBeTruthy();
      expect(getByText('something went wrong')).toBeTruthy();
    });
    expect(_contact.getContacts).toHaveBeenCalledTimes(1);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJnZXRDb250YWN0cyIsImplc3QiLCJmbiIsIk9iamVjdCIsImFzc2lnbiIsInJlcXVpcmVBY3R1YWwiLCJ1c2VJc0ZvY3VzZWQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9MaXN0IiwiX2NvbnRhY3QiLCJfdGVzdFV0aWxzIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImNyZWF0ZVRlc3RQcm9wcyIsInByb3BzIiwibmF2aWdhdGlvbiIsIm5hdmlnYXRlIiwiZGVzY3JpYmUiLCJ0ZXN0IiwiZGVmYXVsdCIsIm1vY2tDb250YWN0cyIsImlkIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJhZ2UiLCJwaG90byIsIm1vY2tlZEdldENvbnRhY3RzIiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwiZGF0YSIsInN0YXR1cyIsIl9yZW5kZXJXaXRoUHJvdmlkZXJzIiwicmVuZGVyV2l0aFByb3ZpZGVycyIsImpzeCIsInJvdXRlIiwia2V5IiwibmFtZSIsImdldEJ5VGV4dCIsIndhaXRGb3IiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwiX3JlbmRlcldpdGhQcm92aWRlcnMyIl0sInNvdXJjZXMiOlsiTGlzdC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtzY3JlZW4sIHdhaXRGb3J9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCBMaXN0IGZyb20gJy4uL0xpc3QnO1xuaW1wb3J0IHtnZXRDb250YWN0c30gZnJvbSAnLi4vLi4vYXBpcy9jb250YWN0JztcbmltcG9ydCB7QXhpb3NSZXNwb25zZX0gZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHtTdGFja05hdmlnYXRpb25Qcm9wfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9zdGFjayc7XG5pbXBvcnQge1Jvb3RTdGFja1BhcmFtTGlzdH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHtyZW5kZXJXaXRoUHJvdmlkZXJzfSBmcm9tICcuLi8uLi91dGlscy90ZXN0LXV0aWxzJztcblxuamVzdC5tb2NrKCcuLi8uLi9hcGlzL2NvbnRhY3QnLCAoKSA9PiAoe1xuICBnZXRDb250YWN0czogamVzdC5mbigpLFxufSkpO1xuXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+ICh7XG4gIC4uLmplc3QucmVxdWlyZUFjdHVhbCgnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJyksXG4gIHVzZUlzRm9jdXNlZDogamVzdC5mbigpLFxufSkpO1xuXG50eXBlIE5hdmlnYXRpb25Qcm9wcyA9IFN0YWNrTmF2aWdhdGlvblByb3A8Um9vdFN0YWNrUGFyYW1MaXN0LCAnTGlzdCc+O1xuXG5jb25zdCBjcmVhdGVUZXN0UHJvcHMgPSAocHJvcHM6IFBhcnRpYWw8TmF2aWdhdGlvblByb3BzPikgPT4gKHtcbiAgbmF2aWdhdGlvbjoge1xuICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXG4gICAgLi4ucHJvcHMsXG4gIH0gYXMgTmF2aWdhdGlvblByb3BzLFxuICAuLi5wcm9wcyxcbn0pO1xuXG5kZXNjcmliZSgnTGlzdCcsICgpID0+IHtcbiAgdGVzdCgncmVuZGVycyBjb3JyZWN0bHkgYW5kIGZldGNoZXMgY29udGFjdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9ja0NvbnRhY3RzID0gW1xuICAgICAge1xuICAgICAgICBpZDogJzExMScsXG4gICAgICAgIGZpcnN0TmFtZTogJ0pvaG4nLFxuICAgICAgICBsYXN0TmFtZTogJ0RvZScsXG4gICAgICAgIGFnZTogMjAsXG4gICAgICAgIHBob3RvOiAnaHR0cHM6Ly9waWNzdW0ucGhvdG9zLzIwMCcsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZDogJzIyMicsXG4gICAgICAgIGZpcnN0TmFtZTogJ0phbmUnLFxuICAgICAgICBsYXN0TmFtZTogJ1NtaXRoJyxcbiAgICAgICAgYWdlOiAyMCxcbiAgICAgICAgcGhvdG86ICdodHRwczovL3BpY3N1bS5waG90b3MvMjAwJyxcbiAgICAgIH0sXG4gICAgXTtcbiAgICBjb25zdCBtb2NrZWRHZXRDb250YWN0cyA9IGdldENvbnRhY3RzIGFzIGplc3QuTW9ja2VkRnVuY3Rpb248XG4gICAgICB0eXBlb2YgZ2V0Q29udGFjdHNcbiAgICA+O1xuICAgIG1vY2tlZEdldENvbnRhY3RzLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICBkYXRhOiB7ZGF0YTogbW9ja0NvbnRhY3RzfSxcbiAgICAgIHN0YXR1czogMjAwLFxuICAgIH0gYXMgQXhpb3NSZXNwb25zZSk7XG5cbiAgICBjb25zdCBwcm9wcyA9IGNyZWF0ZVRlc3RQcm9wcyh7fSk7XG4gICAgY29uc3Qge2dldEJ5VGV4dH0gPSByZW5kZXJXaXRoUHJvdmlkZXJzKFxuICAgICAgPExpc3Qgcm91dGU9e3trZXk6ICdMaXN0JywgbmFtZTogJ0xpc3QnfX0gey4uLnByb3BzfSAvPixcbiAgICApO1xuXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCdDb250YWN0JykpLnRvQmVUcnV0aHkoKTtcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoJ0pvaG4gRG9lJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoJ0phbmUgU21pdGgnKSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KGdldENvbnRhY3RzKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2Rpc3BsYXlzIGVycm9yIG1lc3NhZ2Ugd2hlbiBmZXRjaGluZyBjb250YWN0cyBmYWlscycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2NrZWRHZXRDb250YWN0cyA9IGdldENvbnRhY3RzIGFzIGplc3QuTW9ja2VkRnVuY3Rpb248XG4gICAgICB0eXBlb2YgZ2V0Q29udGFjdHNcbiAgICA+O1xuICAgIG1vY2tlZEdldENvbnRhY3RzLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICBkYXRhOiB7ZGF0YTogbnVsbH0sXG4gICAgICBzdGF0dXM6IDUwMCxcbiAgICB9IGFzIEF4aW9zUmVzcG9uc2UpO1xuXG4gICAgY29uc3QgcHJvcHMgPSBjcmVhdGVUZXN0UHJvcHMoe30pO1xuICAgIGNvbnN0IHtnZXRCeVRleHR9ID0gcmVuZGVyV2l0aFByb3ZpZGVycyhcbiAgICAgIDxMaXN0IHJvdXRlPXt7a2V5OiAnTGlzdCcsIG5hbWU6ICdMaXN0J319IHsuLi5wcm9wc30gLz4sXG4gICAgKTtcblxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnRXJyb3InKSkudG9CZVRydXRoeSgpO1xuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnc29tZXRoaW5nIHdlbnQgd3JvbmcnKSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KGdldENvbnRhY3RzKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQVNBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtFQUFBLE9BQU87SUFDckNDLFdBQVcsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDdkIsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUVISixXQUFBLEdBQUtDLElBQUksQ0FBQywwQkFBMEIsRUFBRTtFQUFBLE9BQUFJLE1BQUEsQ0FBQUMsTUFBQSxLQUNqQ0gsSUFBSSxDQUFDSSxhQUFhLENBQUMsMEJBQTBCLENBQUM7SUFDakRDLFlBQVksRUFBRUwsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFBQztBQUFBLENBQ3ZCLENBQUM7QUFBQyxJQUFBSyxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsa0JBQUEsR0FB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