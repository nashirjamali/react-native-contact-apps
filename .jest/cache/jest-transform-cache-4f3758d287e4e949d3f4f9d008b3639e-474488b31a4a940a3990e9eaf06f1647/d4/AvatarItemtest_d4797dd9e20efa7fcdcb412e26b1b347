babc0f3f439191fb32157715e746d107
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _AvatarItem = _interopRequireDefault(require("../AvatarItem"));
var _jsxRuntime = require("react/jsx-runtime");
describe('AvatarItem', function () {
  var imageURL = 'https://example.com/avatar.jpg';
  var onSelectMock = jest.fn();
  afterEach(function () {
    jest.clearAllMocks();
  });
  test('renders correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AvatarItem.default, {
        imageURL: imageURL,
        onSelect: onSelectMock
      })),
      getByTestId = _render.getByTestId;
    var avatarImage = getByTestId('avatar-image');
    expect(avatarImage.props.source.uri).toBe(imageURL);
  });
  test('calls onSelect when pressed', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AvatarItem.default, {
        imageURL: imageURL,
        onSelect: onSelectMock
      })),
      getByTestId = _render2.getByTestId;
    var avatarContainer = getByTestId('avatar-container');
    _reactNative.fireEvent.press(avatarContainer);
    expect(onSelectMock).toHaveBeenCalledTimes(1);
  });
  test('renders with selected style when isSelected is true', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AvatarItem.default, {
        imageURL: imageURL,
        onSelect: onSelectMock,
        isSelected: true
      })),
      getByTestId = _render3.getByTestId;
    var avatarImage = getByTestId('avatar-image');
    expect(avatarImage.props.style).toContainEqual(expect.objectContaining({
      borderColor: '#1d4ed8',
      borderWidth: 10
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9BdmF0YXJJdGVtIiwiX2pzeFJ1bnRpbWUiLCJkZXNjcmliZSIsImltYWdlVVJMIiwib25TZWxlY3RNb2NrIiwiamVzdCIsImZuIiwiYWZ0ZXJFYWNoIiwiY2xlYXJBbGxNb2NrcyIsInRlc3QiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiZGVmYXVsdCIsIm9uU2VsZWN0IiwiZ2V0QnlUZXN0SWQiLCJhdmF0YXJJbWFnZSIsImV4cGVjdCIsInByb3BzIiwic291cmNlIiwidXJpIiwidG9CZSIsIl9yZW5kZXIyIiwiYXZhdGFyQ29udGFpbmVyIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJfcmVuZGVyMyIsImlzU2VsZWN0ZWQiLCJzdHlsZSIsInRvQ29udGFpbkVxdWFsIiwib2JqZWN0Q29udGFpbmluZyIsImJvcmRlckNvbG9yIiwiYm9yZGVyV2lkdGgiXSwic291cmNlcyI6WyJBdmF0YXJJdGVtLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3JlbmRlciwgZmlyZUV2ZW50fSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgQXZhdGFySXRlbSBmcm9tICcuLi9BdmF0YXJJdGVtJztcblxuZGVzY3JpYmUoJ0F2YXRhckl0ZW0nLCAoKSA9PiB7XG4gIGNvbnN0IGltYWdlVVJMID0gJ2h0dHBzOi8vZXhhbXBsZS5jb20vYXZhdGFyLmpwZyc7XG4gIGNvbnN0IG9uU2VsZWN0TW9jayA9IGplc3QuZm4oKTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICB9KTtcblxuICB0ZXN0KCdyZW5kZXJzIGNvcnJlY3RseScsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKFxuICAgICAgPEF2YXRhckl0ZW0gaW1hZ2VVUkw9e2ltYWdlVVJMfSBvblNlbGVjdD17b25TZWxlY3RNb2NrfSAvPixcbiAgICApO1xuICAgIGNvbnN0IGF2YXRhckltYWdlID0gZ2V0QnlUZXN0SWQoJ2F2YXRhci1pbWFnZScpO1xuICAgIGV4cGVjdChhdmF0YXJJbWFnZS5wcm9wcy5zb3VyY2UudXJpKS50b0JlKGltYWdlVVJMKTtcbiAgfSk7XG5cbiAgdGVzdCgnY2FsbHMgb25TZWxlY3Qgd2hlbiBwcmVzc2VkJywgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoXG4gICAgICA8QXZhdGFySXRlbSBpbWFnZVVSTD17aW1hZ2VVUkx9IG9uU2VsZWN0PXtvblNlbGVjdE1vY2t9IC8+LFxuICAgICk7XG4gICAgY29uc3QgYXZhdGFyQ29udGFpbmVyID0gZ2V0QnlUZXN0SWQoJ2F2YXRhci1jb250YWluZXInKTtcbiAgICBmaXJlRXZlbnQucHJlc3MoYXZhdGFyQ29udGFpbmVyKTtcbiAgICBleHBlY3Qob25TZWxlY3RNb2NrKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3JlbmRlcnMgd2l0aCBzZWxlY3RlZCBzdHlsZSB3aGVuIGlzU2VsZWN0ZWQgaXMgdHJ1ZScsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKFxuICAgICAgPEF2YXRhckl0ZW0gaW1hZ2VVUkw9e2ltYWdlVVJMfSBvblNlbGVjdD17b25TZWxlY3RNb2NrfSBpc1NlbGVjdGVkIC8+LFxuICAgICk7XG4gICAgY29uc3QgYXZhdGFySW1hZ2UgPSBnZXRCeVRlc3RJZCgnYXZhdGFyLWltYWdlJyk7XG4gICAgZXhwZWN0KGF2YXRhckltYWdlLnByb3BzLnN0eWxlKS50b0NvbnRhaW5FcXVhbChcbiAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgYm9yZGVyQ29sb3I6ICcjMWQ0ZWQ4JyxcbiAg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