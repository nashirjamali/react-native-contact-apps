06ba3ec93e287023cd31e2e911e032ba
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _UserAvatar = _interopRequireDefault(require("../UserAvatar"));
var _jsxRuntime = require("react/jsx-runtime");
global.fetch = jest.fn().mockImplementation(function () {
  return Promise.resolve({
    status: 200,
    json: function json() {
      return Promise.resolve({
        data: 'mocked data'
      });
    }
  });
});
describe('UserAvatar', function () {
  test('renders image if photo exists', (0, _asyncToGenerator2.default)(function* () {
    var photo = 'https://example.com/avatar.jpg';
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_UserAvatar.default, {
        photo: photo,
        firstName: "John",
        lastName: "Doe"
      })),
      getByTestId = _render.getByTestId;
    var image = getByTestId('user-avatar-img');
    yield (0, _reactNative.waitFor)(function () {
      expect(image.props.source.uri).toBe(photo);
    });
  }));
  test('renders initials if photo is not found', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_UserAvatar.default, {
        photo: "non-existing.jpg",
        firstName: "John",
        lastName: "Doe"
      })),
      getByTestId = _render2.getByTestId;
    var textContainer = getByTestId('user-avatar-text');
    var initials = getByTestId('user-avatar-text').props.children.props.children;
    yield (0, _reactNative.waitFor)(function () {
      expect(textContainer).toBeTruthy();
      expect(initials).toBe('JD');
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Vc2VyQXZhdGFyIiwiX2pzeFJ1bnRpbWUiLCJnbG9iYWwiLCJmZXRjaCIsImplc3QiLCJmbiIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwic3RhdHVzIiwianNvbiIsImRhdGEiLCJkZXNjcmliZSIsInRlc3QiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJkZWZhdWx0IiwicGhvdG8iLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJnZXRCeVRlc3RJZCIsImltYWdlIiwid2FpdEZvciIsImV4cGVjdCIsInByb3BzIiwic291cmNlIiwidXJpIiwidG9CZSIsIl9yZW5kZXIyIiwidGV4dENvbnRhaW5lciIsImluaXRpYWxzIiwiY2hpbGRyZW4iLCJ0b0JlVHJ1dGh5Il0sInNvdXJjZXMiOlsiVXNlckF2YXRhci50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJnbG9iYWwuZmV0Y2ggPSBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+XG4gIFByb21pc2UucmVzb2x2ZSh7XG4gICAgc3RhdHVzOiAyMDAsXG4gICAganNvbjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHtkYXRhOiAnbW9ja2VkIGRhdGEnfSksXG4gIH0pLFxuKTtcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7cmVuZGVyLCB3YWl0Rm9yfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgVXNlckF2YXRhciBmcm9tICcuLi9Vc2VyQXZhdGFyJztcblxuZGVzY3JpYmUoJ1VzZXJBdmF0YXInLCAoKSA9PiB7XG4gIHRlc3QoJ3JlbmRlcnMgaW1hZ2UgaWYgcGhvdG8gZXhpc3RzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHBob3RvID0gJ2h0dHBzOi8vZXhhbXBsZS5jb20vYXZhdGFyLmpwZyc7XG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcihcbiAgICAgIDxVc2VyQXZhdGFyIHBob3RvPXtwaG90b30gZmlyc3ROYW1lPVwiSm9oblwiIGxhc3ROYW1lPVwiRG9lXCIgLz4sXG4gICAgKTtcbiAgICBjb25zdCBpbWFnZSA9IGdldEJ5VGVzdElkKCd1c2VyLWF2YXRhci1pbWcnKTtcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChpbWFnZS5wcm9wcy5zb3VyY2UudXJpKS50b0JlKHBob3RvKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgncmVuZGVycyBpbml0aWFscyBpZiBwaG90byBpcyBub3QgZm91bmQnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcihcbiAgICAgIDxVc2VyQXZhdGFyIHBob3RvPVwibm9uLWV4aXN0aW5nLmpwZ1wiIGZpcnN0TmFtZT1cIkpvaG5cIiBsYXN0TmFtZT1cIkRvZVwiIC8+LFxuICAgICk7XG4gICAgY29uc3QgdGV4dENvbnRhaW5lciA9IGdldEJ5VGVzdElkKCd1c2VyLWF2YXRhci10ZXh0Jyk7XG4gICAgY29uc3QgaW5pdGlhbHMgPVxuICAgICAgZ2V0QnlUZXN0SWQoJ3VzZXItYXZhdGFyLXRleHQnKS5wcm9wcy5jaGlsZHJlbi5wcm9wcy5jaGlsZHJlbjtcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdCh0ZXh0Q29udGFpbmVyKS50b0JlVHJ1dGh5KCk7XG4gICAgICBleHBlY3QoaW5pdGlhbHMpLnRvQmUoJ0pEJyk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBT0EsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsV0FBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQXVDLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQVR2Q0ksTUFBTSxDQUFDQyxLQUFLLEdBQUdDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0Msa0JBQWtCLENBQUM7RUFBQSxPQUMxQ0MsT0FBTyxDQUFDQyxPQUFPLENBQUM7SUFDZEMsTUFBTSxFQUFFLEdBQUc7SUFDWEMsSUFBSSxFQUFFLFNBQUFBLEtBQUE7TUFBQSxPQUFNSCxPQUFPLENBQUNDLE9BQU8sQ0FBQztRQUFDRyxJQUFJLEVBQUU7TUFBYSxDQUFDLENBQUM7SUFBQTtFQUNwRCxDQUFDLENBQUM7QUFBQSxDQUNKLENBQUM7QUFNREMsUUFBUSxDQUFDLFlBQVksRUFBRSxZQUFNO0VBQzNCQyxJQUFJLENBQUMsK0JBQStCLE1BQUFDLGtCQUFBLENBQUFDLE9BQUEsRUFBRSxhQUFZO0lBQ2hELElBQU1DLEtBQUssR0FBRyxnQ0FBZ0M7SUFDOUMsSUFBQUMsT0FBQSxHQUFzQixJQUFBQyxtQkFBTSxFQUMxQixJQUFBakIsV0FBQSxDQUFBa0IsR0FBQSxFQUFDbkIsV0FBQSxDQUFBZSxPQUFVO1FBQUNDLEtBQUssRUFBRUEsS0FBTTtRQUFDSSxTQUFTLEVBQUMsTUFBTTtRQUFDQyxRQUFRLEVBQUM7TUFBSyxDQUFFLENBQzdELENBQUM7TUFGTUMsV0FBVyxHQUFBTCxPQUFBLENBQVhLLFdBQVc7SUFHbEIsSUFBTUMsS0FBSyxHQUFHRCxXQUFXLENBQUMsaUJBQWlCLENBQUM7SUFDNUMsTUFBTSxJQUFBRSxvQkFBTyxFQUFDLFlBQU07TUFDbEJDLE1BQU0sQ0FBQ0YsS0FBSyxDQUFDRyxLQUFLLENBQUNDLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQ2IsS0FBSyxDQUFDO0lBQzVDLENBQUMsQ0FBQztFQUNKLENBQUMsRUFBQztFQUVGSCxJQUFJLENBQUMsd0NBQXdDLE1BQUFDLGtCQUFBLENBQUFDLE9BQUEsRUFBRSxhQUFZO0lBQ3pELElBQUFlLFFBQUEsR0FBc0IsSUFBQVosbUJBQU0sRUFDMUIsSUFBQWpCLFdBQUEsQ0FBQWtCLEdBQUEsRUFBQ25CLFdBQUEsQ0FBQWUsT0FBVTtRQUFDQyxLQUFLLEVBQUMsa0JBQWtCO1FBQUNJLFNBQVMsRUFBQyxNQUFNO1FBQUNDLFFBQVEsRUFBQztNQUFLLENBQUUsQ0FDeEUsQ0FBQztNQUZNQyxXQUFXLEdBQUFRLFFBQUEsQ0FBWFIsV0FBVztJQUdsQixJQUFNUyxhQUFhLEdBQUdULFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQztJQUNyRCxJQUFNVSxRQUFRLEdBQ1pWLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDSSxLQUFLLENBQUNPLFFBQVEsQ0FBQ1AsS0FBSyxDQUFDTyxRQUFRO0lBQy9ELE1BQU0sSUFBQVQsb0JBQU8sRUFBQyxZQUFNO01BQ2xCQyxNQUFNLENBQUNNLGFBQWEsQ0FBQyxDQUFDRyxVQUFVLENBQUMsQ0FBQztNQUNsQ1QsTUFBTSxDQUFDTyxRQUFRLENBQUMsQ0FBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQztJQUM3QixDQUFDLENBQUM7RUFDSixDQUFDLEVBQUM7QUFDSixDQUFDLENBQUMifQ==