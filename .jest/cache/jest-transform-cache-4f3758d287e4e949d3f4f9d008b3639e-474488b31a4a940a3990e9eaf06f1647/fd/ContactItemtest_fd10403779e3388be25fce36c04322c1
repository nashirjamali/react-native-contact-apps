404408596146b501e2fb7bff43229269
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ContactItem = _interopRequireDefault(require("../ContactItem"));
var _jsxRuntime = require("react/jsx-runtime");
describe('ContactItem', function () {
  var contact = {
    firstName: 'John',
    lastName: 'Doe',
    photo: 'https://example.com/avatar.png',
    age: 2,
    id: '111'
  };
  test('renders correctly with contact data', (0, _asyncToGenerator2.default)(function* () {
    jest.spyOn(global, 'fetch').mockResolvedValueOnce(Promise.resolve({
      ok: true,
      status: 200
    }));
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContactItem.default, {
        contact: contact
      })),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var avatar = getByTestId('user-avatar-text');
      var name = getByText('John Doe');
      expect(avatar.props.children.props.children).toBe('JD');
      expect(name).toBeTruthy();
    });
  }));
  test('calls onPress when pressed', function () {
    var onPressMock = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContactItem.default, {
        contact: contact,
        onPress: onPressMock
      })),
      getByTestId = _render2.getByTestId;
    var touchable = getByTestId('user-avatar-text');
    _reactNative.fireEvent.press(touchable);
    expect(onPressMock).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Db250YWN0SXRlbSIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJjb250YWN0IiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJwaG90byIsImFnZSIsImlkIiwidGVzdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJqZXN0Iiwic3B5T24iLCJnbG9iYWwiLCJtb2NrUmVzb2x2ZWRWYWx1ZU9uY2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsIm9rIiwic3RhdHVzIiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsImdldEJ5VGV4dCIsImdldEJ5VGVzdElkIiwid2FpdEZvciIsImF2YXRhciIsIm5hbWUiLCJleHBlY3QiLCJwcm9wcyIsImNoaWxkcmVuIiwidG9CZSIsInRvQmVUcnV0aHkiLCJvblByZXNzTW9jayIsImZuIiwiX3JlbmRlcjIiLCJvblByZXNzIiwidG91Y2hhYmxlIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkIl0sInNvdXJjZXMiOlsiQ29udGFjdEl0ZW0udGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7cmVuZGVyLCBmaXJlRXZlbnQsIHdhaXRGb3J9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCBDb250YWN0SXRlbSBmcm9tICcuLi9Db250YWN0SXRlbSc7XG5cbmRlc2NyaWJlKCdDb250YWN0SXRlbScsICgpID0+IHtcbiAgY29uc3QgY29udGFjdCA9IHtcbiAgICBmaXJzdE5hbWU6ICdKb2huJyxcbiAgICBsYXN0TmFtZTogJ0RvZScsXG4gICAgcGhvdG86ICdodHRwczovL2V4YW1wbGUuY29tL2F2YXRhci5wbmcnLFxuICAgIGFnZTogMixcbiAgICBpZDogJzExMScsXG4gIH07XG5cbiAgdGVzdCgncmVuZGVycyBjb3JyZWN0bHkgd2l0aCBjb250YWN0IGRhdGEnLCBhc3luYyAoKSA9PiB7XG4gICAgamVzdFxuICAgICAgLnNweU9uKGdsb2JhbCwgJ2ZldGNoJylcbiAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoXG4gICAgICAgIFByb21pc2UucmVzb2x2ZSh7b2s6IHRydWUsIHN0YXR1czogMjAwfSBhcyBSZXNwb25zZSksXG4gICAgICApO1xuXG4gICAgY29uc3Qge2dldEJ5VGV4dCwgZ2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxDb250YWN0SXRlbSBjb250YWN0PXtjb250YWN0fSAvPik7XG5cbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGNvbnN0IGF2YXRhciA9IGdldEJ5VGVzdElkKCd1c2VyLWF2YXRhci10ZXh0Jyk7XG4gICAgICBjb25zdCBuYW1lID0gZ2V0QnlUZXh0KCdKb2huIERvZScpO1xuXG4gICAgICBleHBlY3QoYXZhdGFyLnByb3BzLmNoaWxkcmVuLnByb3BzLmNoaWxkcmVuKS50b0JlKCdKRCcpO1xuICAgICAgZXhwZWN0KG5hbWUpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnY2FsbHMgb25QcmVzcyB3aGVuIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgY29uc3Qgb25QcmVzc01vY2sgPSBqZXN0LmZuKCk7XG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcihcbiAgICAgIDxDb250YWN0SXRlbSBjb250YWN0PXtjb250YWN0fSBvblByZXNzPXtvblByZXNzTW9ja30gLz4sXG4gICAgKTtcblxuICAgIGNvbnN0IHRvdWNoYWJsZSA9IGdldEJ5VGVzdElkKCd1c2VyLWF2YXRhci10ZXh0Jyk7XG4gICAgZmlyZUV2ZW50LnByZXNzKHRvdWNoYWJsZSk7XG5cbiAgICBleHBlY3Qob25QcmVzc01vY2spLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxZQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBeUMsSUFBQUcsV0FBQSxHQUFBSCxPQUFBO0FBRXpDSSxRQUFRLENBQUMsYUFBYSxFQUFFLFlBQU07RUFDNUIsSUFBTUMsT0FBTyxHQUFHO0lBQ2RDLFNBQVMsRUFBRSxNQUFNO0lBQ2pCQyxRQUFRLEVBQUUsS0FBSztJQUNmQyxLQUFLLEVBQUUsZ0NBQWdDO0lBQ3ZDQyxHQUFHLEVBQUUsQ0FBQztJQUNOQyxFQUFFLEVBQUU7RUFDTixDQUFDO0VBRURDLElBQUksQ0FBQyxxQ0FBcUMsTUFBQUMsa0JBQUEsQ0FBQUMsT0FBQSxFQUFFLGFBQVk7SUFDdERDLElBQUksQ0FDREMsS0FBSyxDQUFDQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQ3RCQyxxQkFBcUIsQ0FDcEJDLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDO01BQUNDLEVBQUUsRUFBRSxJQUFJO01BQUVDLE1BQU0sRUFBRTtJQUFHLENBQWEsQ0FDckQsQ0FBQztJQUVILElBQUFDLE9BQUEsR0FBaUMsSUFBQUMsbUJBQU0sRUFBQyxJQUFBcEIsV0FBQSxDQUFBcUIsR0FBQSxFQUFDdEIsWUFBQSxDQUFBVyxPQUFXO1FBQUNSLE9BQU8sRUFBRUE7TUFBUSxDQUFFLENBQUMsQ0FBQztNQUFuRW9CLFNBQVMsR0FBQUgsT0FBQSxDQUFURyxTQUFTO01BQUVDLFdBQVcsR0FBQUosT0FBQSxDQUFYSSxXQUFXO0lBRTdCLE1BQU0sSUFBQUMsb0JBQU8sRUFBQyxZQUFNO01BQ2xCLElBQU1DLE1BQU0sR0FBR0YsV0FBVyxDQUFDLGtCQUFrQixDQUFDO01BQzlDLElBQU1HLElBQUksR0FBR0osU0FBUyxDQUFDLFVBQVUsQ0FBQztNQUVsQ0ssTUFBTSxDQUFDRixNQUFNLENBQUNHLEtBQUssQ0FBQ0MsUUFBUSxDQUFDRCxLQUFLLENBQUNDLFFBQVEsQ0FBQyxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDO01BQ3ZESCxNQUFNLENBQUNELElBQUksQ0FBQyxDQUFDSyxVQUFVLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUM7RUFDSixDQUFDLEVBQUM7RUFFRnZCLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxZQUFNO0lBQ3ZDLElBQU13QixXQUFXLEdBQUdyQixJQUFJLENBQUNzQixFQUFFLENBQUMsQ0FBQztJQUM3QixJQUFBQyxRQUFBLEdBQXNCLElBQUFkLG1CQUFNLEVBQzFCLElBQUFwQixXQUFBLENBQUFxQixHQUFBLEVBQUN0QixZQUFBLENBQUFXLE9BQVc7UUFBQ1IsT0FBTyxFQUFFQSxPQUFRO1FBQUNpQyxPQUFPLEVBQUVIO01BQVksQ0FBRSxDQUN4RCxDQUFDO01BRk1ULFdBQVcsR0FBQVcsUUFBQSxDQUFYWCxXQUFXO0lBSWxCLElBQU1hLFNBQVMsR0FBR2IsV0FBVyxDQUFDLGtCQUFrQixDQUFDO0lBQ2pEYyxzQkFBUyxDQUFDQyxLQUFLLENBQUNGLFNBQVMsQ0FBQztJQUUxQlQsTUFBTSxDQUFDSyxXQUFXLENBQUMsQ0FBQ08sZ0JBQWdCLENBQUMsQ0FBQztFQUN4QyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==