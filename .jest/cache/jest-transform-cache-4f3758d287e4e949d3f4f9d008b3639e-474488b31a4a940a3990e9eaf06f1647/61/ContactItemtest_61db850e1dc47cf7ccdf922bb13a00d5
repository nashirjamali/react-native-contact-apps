ec1876ade4599da9b9c9ef36b5f9d0aa
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ContactItem = _interopRequireDefault(require("../ContactItem"));
var _jsxRuntime = require("react/jsx-runtime");
describe('ContactItem', function () {
  var contact = {
    firstName: 'John',
    lastName: 'Doe',
    photo: 'https://example.com/avatar.png',
    age: 2,
    id: '111'
  };
  test('renders correctly with contact data', function () {
    jest.spyOn(global, 'fetch').mockResolvedValueOnce(Promise.resolve({
      ok: true,
      status: 200
    }));
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContactItem.default, {
        contact: contact
      })),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    var avatar = getByTestId('user-avatar-text');
    var name = getByText('John Doe');
    expect(avatar.props.children.props.children).toBe('JD');
    expect(name).toBeTruthy();
  });
  test('calls onPress when pressed', function () {
    var onPressMock = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContactItem.default, {
        contact: contact,
        onPress: onPressMock
      })),
      getByTestId = _render2.getByTestId;
    var touchable = getByTestId('user-avatar-text');
    _reactNative.fireEvent.press(touchable);
    expect(onPressMock).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Db250YWN0SXRlbSIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJjb250YWN0IiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJwaG90byIsImFnZSIsImlkIiwidGVzdCIsImplc3QiLCJzcHlPbiIsImdsb2JhbCIsIm1vY2tSZXNvbHZlZFZhbHVlT25jZSIsIlByb21pc2UiLCJyZXNvbHZlIiwib2siLCJzdGF0dXMiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiZGVmYXVsdCIsImdldEJ5VGV4dCIsImdldEJ5VGVzdElkIiwiYXZhdGFyIiwibmFtZSIsImV4cGVjdCIsInByb3BzIiwiY2hpbGRyZW4iLCJ0b0JlIiwidG9CZVRydXRoeSIsIm9uUHJlc3NNb2NrIiwiZm4iLCJfcmVuZGVyMiIsIm9uUHJlc3MiLCJ0b3VjaGFibGUiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWQiXSwic291cmNlcyI6WyJDb250YWN0SXRlbS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtyZW5kZXIsIGZpcmVFdmVudH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IENvbnRhY3RJdGVtIGZyb20gJy4uL0NvbnRhY3RJdGVtJztcblxuZGVzY3JpYmUoJ0NvbnRhY3RJdGVtJywgKCkgPT4ge1xuICBjb25zdCBjb250YWN0ID0ge1xuICAgIGZpcnN0TmFtZTogJ0pvaG4nLFxuICAgIGxhc3ROYW1lOiAnRG9lJyxcbiAgICBwaG90bzogJ2h0dHBzOi8vZXhhbXBsZS5jb20vYXZhdGFyLnBuZycsXG4gICAgYWdlOiAyLFxuICAgIGlkOiAnMTExJyxcbiAgfTtcblxuICB0ZXN0KCdyZW5kZXJzIGNvcnJlY3RseSB3aXRoIGNvbnRhY3QgZGF0YScsICgpID0+IHtcbiAgICBqZXN0XG4gICAgICAuc3B5T24oZ2xvYmFsLCAnZmV0Y2gnKVxuICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZShcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHtvazogdHJ1ZSwgc3RhdHVzOiAyMDB9IGFzIFJlc3BvbnNlKSxcbiAgICAgICk7XG5cbiAgICBjb25zdCB7Z2V0QnlUZXh0LCBnZXRCeVRlc3RJZH0gPSByZW5kZXIoPENvbnRhY3RJdGVtIGNvbnRhY3Q9e2NvbnRhY3R9IC8+KTtcblxuICAgIGNvbnN0IGF2YXRhciA9IGdldEJ5VGVzdElkKCd1c2VyLWF2YXRhci10ZXh0Jyk7XG4gICAgY29uc3QgbmFtZSA9IGdldEJ5VGV4dCgnSm9obiBEb2UnKTtcblxuICAgIGV4cGVjdChhdmF0YXIucHJvcHMuY2hpbGRyZW4ucHJvcHMuY2hpbGRyZW4pLnRvQmUoJ0pEJyk7XG4gICAgZXhwZWN0KG5hbWUpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgdGVzdCgnY2FsbHMgb25QcmVzcyB3aGVuIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgY29uc3Qgb25QcmVzc01vY2sgPSBqZXN0LmZuKCk7XG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcihcbiAgICAgIDxDb250YWN0SXRlbSBjb250YWN0PXtjb250YWN0fSBvblByZXNzPXtvblByZXNzTW9ja30gLz4sXG4gICAgKTtcblxuICAgIGNvbnN0IHRvdWNoYWJsZSA9IGdldEJ5VGVzdElkKCd1c2VyLWF2YXRhci10ZXh0Jyk7XG4gICAgZmlyZUV2ZW50LnByZXNzKHRvdWNoYWJsZSk7XG5cbiAgICBleHBlY3Qob25QcmVzc01vY2spLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUF5QyxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFFekNJLFFBQVEsQ0FBQyxhQUFhLEVBQUUsWUFBTTtFQUM1QixJQUFNQyxPQUFPLEdBQUc7SUFDZEMsU0FBUyxFQUFFLE1BQU07SUFDakJDLFFBQVEsRUFBRSxLQUFLO0lBQ2ZDLEtBQUssRUFBRSxnQ0FBZ0M7SUFDdkNDLEdBQUcsRUFBRSxDQUFDO0lBQ05DLEVBQUUsRUFBRTtFQUNOLENBQUM7RUFFREMsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLFlBQU07SUFDaERDLElBQUksQ0FDREMsS0FBSyxDQUFDQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQ3RCQyxxQkFBcUIsQ0FDcEJDLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDO01BQUNDLEVBQUUsRUFBRSxJQUFJO01BQUVDLE1BQU0sRUFBRTtJQUFHLENBQWEsQ0FDckQsQ0FBQztJQUVILElBQUFDLE9BQUEsR0FBaUMsSUFBQUMsbUJBQU0sRUFBQyxJQUFBbEIsV0FBQSxDQUFBbUIsR0FBQSxFQUFDcEIsWUFBQSxDQUFBcUIsT0FBVztRQUFDbEIsT0FBTyxFQUFFQTtNQUFRLENBQUUsQ0FBQyxDQUFDO01BQW5FbUIsU0FBUyxHQUFBSixPQUFBLENBQVRJLFNBQVM7TUFBRUMsV0FBVyxHQUFBTCxPQUFBLENBQVhLLFdBQVc7SUFFN0IsSUFBTUMsTUFBTSxHQUFHRCxXQUFXLENBQUMsa0JBQWtCLENBQUM7SUFDOUMsSUFBTUUsSUFBSSxHQUFHSCxTQUFTLENBQUMsVUFBVSxDQUFDO0lBRWxDSSxNQUFNLENBQUNGLE1BQU0sQ0FBQ0csS0FBSyxDQUFDQyxRQUFRLENBQUNELEtBQUssQ0FBQ0MsUUFBUSxDQUFDLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDdkRILE1BQU0sQ0FBQ0QsSUFBSSxDQUFDLENBQUNLLFVBQVUsQ0FBQyxDQUFDO0VBQzNCLENBQUMsQ0FBQztFQUVGckIsSUFBSSxDQUFDLDRCQUE0QixFQUFFLFlBQU07SUFDdkMsSUFBTXNCLFdBQVcsR0FBR3JCLElBQUksQ0FBQ3NCLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLElBQUFDLFFBQUEsR0FBc0IsSUFBQWQsbUJBQU0sRUFDMUIsSUFBQWxCLFdBQUEsQ0FBQW1CLEdBQUEsRUFBQ3BCLFlBQUEsQ0FBQXFCLE9BQVc7UUFBQ2xCLE9BQU8sRUFBRUEsT0FBUTtRQUFDK0IsT0FBTyxFQUFFSDtNQUFZLENBQUUsQ0FDeEQsQ0FBQztNQUZNUixXQUFXLEdBQUFVLFFBQUEsQ0FBWFYsV0FBVztJQUlsQixJQUFNWSxTQUFTLEdBQUdaLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQztJQUNqRGEsc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDRixTQUFTLENBQUM7SUFFMUJULE1BQU0sQ0FBQ0ssV0FBVyxDQUFDLENBQUNPLGdCQUFnQixDQUFDLENBQUM7RUFDeEMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=