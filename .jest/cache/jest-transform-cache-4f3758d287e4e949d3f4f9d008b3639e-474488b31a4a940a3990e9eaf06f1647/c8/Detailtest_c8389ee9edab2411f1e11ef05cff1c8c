62206cd01e0b4692f37cbceccef0db53
_getJestObj().mock('../../apis/contact', function () {
  return {
    getContact: jest.fn(),
    deleteContact: jest.fn()
  };
});
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _Detail = _interopRequireDefault(require("../Detail"));
var _contact = require("../../apis/contact");
var _testUtils = require("../../utils/test-utils");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var getContactMock = _contact.getContact;
var createTestProps = function createTestProps(props) {
  return Object.assign({
    navigation: Object.assign({
      navigate: jest.fn(),
      replace: jest.fn()
    }, props)
  }, props);
};
describe('Detail', function () {
  var mockContact = {
    id: '1',
    firstName: 'John',
    lastName: 'Doe',
    age: 30,
    photo: 'https://example.com/avatar.jpg'
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  test('renders contact details and triggers delete confirmation', (0, _asyncToGenerator2.default)(function* () {
    getContactMock.mockResolvedValueOnce({
      status: 200,
      data: {
        data: mockContact
      }
    });
    var props = createTestProps({});
    var _renderWithProviders = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_Detail.default, Object.assign({
        route: {
          key: 'Detail',
          name: 'Detail',
          params: {
            id: '1'
          }
        }
      }, props))),
      getByText = _renderWithProviders.getByText,
      getByLabelText = _renderWithProviders.getByLabelText;
    yield (0, _reactNative.waitFor)(function () {
      expect(_contact.getContact).toHaveBeenCalledTimes(1);
    });
    expect(getByText('Detail')).toBeTruthy();
    expect(getByText('First Name')).toBeTruthy();
    expect(getByText('John')).toBeTruthy();
    expect(getByText('Last Name')).toBeTruthy();
    expect(getByText('Doe')).toBeTruthy();
    expect(getByText('Age')).toBeTruthy();
    expect(getByText('30')).toBeTruthy();
    expect(getByLabelText('Delete')).toBeTruthy();
    _reactNative.fireEvent.press(getByLabelText('Delete'));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('Delete contact', 'Are you sure delete John Doe?', [{
      text: 'Cancel',
      style: 'cancel',
      isPreferred: true
    }, {
      text: 'Sure',
      style: 'default',
      isPreferred: false,
      onPress: expect.any(Function)
    }], {
      cancelable: true
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,