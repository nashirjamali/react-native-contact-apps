f5727c552d557614152c15e0d24aa091
_getJestObj().mock('axios');
_getJestObj().mock('../../apis/contact', function () {
  return {
    postContact: jest.fn(),
    putContact: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ChooseAvatar = _interopRequireDefault(require("../ChooseAvatar"));
var _contact = require("../../apis/contact");
var _testUtils = require("../../utils/test-utils");
var _axios = _interopRequireDefault(require("axios"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockedAxios = _axios.default;
var createTestProps = function createTestProps(props) {
  return Object.assign({
    navigation: Object.assign({
      navigate: jest.fn()
    }, props)
  }, props);
};
describe('ChooseAvatar', function () {
  test('navigates to List screen after successful contact creation', (0, _asyncToGenerator2.default)(function* () {
    var mockedResponse = {
      data: {},
      status: 200,
      statusText: 'OK',
      headers: {}
    };
    var props = createTestProps({});
    var _renderWithProviders = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_ChooseAvatar.default, Object.assign({
        route: {
          key: 'ChooseAvatar',
          name: 'ChooseAvatar',
          params: {
            isEdit: false
          }
        }
      }, props))),
      getByPlaceholderText = _renderWithProviders.getByPlaceholderText,
      getByLabelText = _renderWithProviders.getByLabelText,
      getAllByTestId = _renderWithProviders.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getAllByTestId('avatar-image')[0]).toBeTruthy();
      expect(getByLabelText('button-save')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getAllByTestId('avatar-image')[0]);
    yield (0, _reactNative.waitFor)(function () {
      expect(getByLabelText('button-save').props.accessibilityState.disabled).toBe(false);
    });
    _reactNative.fireEvent.press(getByLabelText('button-save'));
    mockedAxios.post.mockResolvedValueOnce(mockedResponse);
    yield (0, _reactNative.waitFor)(function () {
      expect(_contact.postContact).toHaveBeenCalledTimes(1);
      expect(props.navigation.navigate).toHaveBeenCalledWith('List');
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,