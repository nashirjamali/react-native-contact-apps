1c75f75089e392001d769fe830829e3d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ContactItem = _interopRequireDefault(require("../ContactItem"));
var _jsxRuntime = require("react/jsx-runtime");
describe('ContactItem', function () {
  var contact = {
    firstName: 'John',
    lastName: 'Doe',
    photo: 'https://example.com/avatar.png',
    age: 2,
    id: '111'
  };
  afterEach(function () {
    jest.clearAllMocks();
  });
  test('renders correctly with contact data', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContactItem.default, {
        contact: contact
      })),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    var avatar = getByTestId('user-avatar-text');
    var name = getByText('John Doe');
    expect(avatar.props.firstName).toBe('John');
    expect(avatar.props.lastName).toBe('Doe');
    expect(avatar.props.photo).toBe('https://example.com/avatar.png');
    expect(name).toBeTruthy();
  });
  test('calls onPress when pressed', function () {
    var onPressMock = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContactItem.default, {
        contact: contact,
        onPress: onPressMock
      })),
      getByTestId = _render2.getByTestId;
    var touchable = getByTestId('user-avatar-text');
    _reactNative.fireEvent.press(touchable);
    expect(onPressMock).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Db250YWN0SXRlbSIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJjb250YWN0IiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJwaG90byIsImFnZSIsImlkIiwiYWZ0ZXJFYWNoIiwiamVzdCIsImNsZWFyQWxsTW9ja3MiLCJ0ZXN0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsImRlZmF1bHQiLCJnZXRCeVRleHQiLCJnZXRCeVRlc3RJZCIsImF2YXRhciIsIm5hbWUiLCJleHBlY3QiLCJwcm9wcyIsInRvQmUiLCJ0b0JlVHJ1dGh5Iiwib25QcmVzc01vY2siLCJmbiIsIl9yZW5kZXIyIiwib25QcmVzcyIsInRvdWNoYWJsZSIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZCJdLCJzb3VyY2VzIjpbIkNvbnRhY3RJdGVtLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3JlbmRlciwgZmlyZUV2ZW50fSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgQ29udGFjdEl0ZW0gZnJvbSAnLi4vQ29udGFjdEl0ZW0nO1xuXG5kZXNjcmliZSgnQ29udGFjdEl0ZW0nLCAoKSA9PiB7XG4gIGNvbnN0IGNvbnRhY3QgPSB7XG4gICAgZmlyc3ROYW1lOiAnSm9obicsXG4gICAgbGFzdE5hbWU6ICdEb2UnLFxuICAgIHBob3RvOiAnaHR0cHM6Ly9leGFtcGxlLmNvbS9hdmF0YXIucG5nJyxcbiAgICBhZ2U6IDIsXG4gICAgaWQ6ICcxMTEnLFxuICB9O1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIHRlc3QoJ3JlbmRlcnMgY29ycmVjdGx5IHdpdGggY29udGFjdCBkYXRhJywgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeVRleHQsIGdldEJ5VGVzdElkfSA9IHJlbmRlcig8Q29udGFjdEl0ZW0gY29udGFjdD17Y29udGFjdH0gLz4pO1xuXG4gICAgY29uc3QgYXZhdGFyID0gZ2V0QnlUZXN0SWQoJ3VzZXItYXZhdGFyLXRleHQnKTtcbiAgICBjb25zdCBuYW1lID0gZ2V0QnlUZXh0KCdKb2huIERvZScpO1xuXG4gICAgZXhwZWN0KGF2YXRhci5wcm9wcy5maXJzdE5hbWUpLnRvQmUoJ0pvaG4nKTtcbiAgICBleHBlY3QoYXZhdGFyLnByb3BzLmxhc3ROYW1lKS50b0JlKCdEb2UnKTtcbiAgICBleHBlY3QoYXZhdGFyLnByb3BzLnBob3RvKS50b0JlKCdodHRwczovL2V4YW1wbGUuY29tL2F2YXRhci5wbmcnKTtcbiAgICBleHBlY3QobmFtZSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICB0ZXN0KCdjYWxscyBvblByZXNzIHdoZW4gcHJlc3NlZCcsICgpID0+IHtcbiAgICBjb25zdCBvblByZXNzTW9jayA9IGplc3QuZm4oKTtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKFxuICAgICAgPENvbnRhY3RJdGVtIGNvbnRhY3Q9e2NvbnRhY3R9IG9uUHJlc3M9e29uUHJlc3NNb2NrfSAvPixcbiAgICApO1xuXG4gICAgY29uc3QgdG91Y2hhYmxlID0gZ2V0QnlUZXN0SWQoJ3VzZXItYXZhdGFyLXRleHQnKTtcbiAgICBmaXJlRXZlbnQucHJlc3ModG91Y2hhYmxlKTtcblxuICAgIGV4cGVjdChvblByZXNzTW9jaykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsWUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQXlDLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUV6Q0ksUUFBUSxDQUFDLGFBQWEsRUFBRSxZQUFNO0VBQzVCLElBQU1DLE9BQU8sR0FBRztJQUNkQyxTQUFTLEVBQUUsTUFBTTtJQUNqQkMsUUFBUSxFQUFFLEtBQUs7SUFDZkMsS0FBSyxFQUFFLGdDQUFnQztJQUN2Q0MsR0FBRyxFQUFFLENBQUM7SUFDTkMsRUFBRSxFQUFFO0VBQ04sQ0FBQztFQUVEQyxTQUFTLENBQUMsWUFBTTtJQUNkQyxJQUFJLENBQUNDLGFBQWEsQ0FBQyxDQUFDO0VBQ3RCLENBQUMsQ0FBQztFQUVGQyxJQUFJLENBQUMscUNBQXFDLEVBQUUsWUFBTTtJQUNoRCxJQUFBQyxPQUFBLEdBQWlDLElBQUFDLG1CQUFNLEVBQUMsSUFBQWIsV0FBQSxDQUFBYyxHQUFBLEVBQUNmLFlBQUEsQ0FBQWdCLE9BQVc7UUFBQ2IsT0FBTyxFQUFFQTtNQUFRLENBQUUsQ0FBQyxDQUFDO01BQW5FYyxTQUFTLEdBQUFKLE9BQUEsQ0FBVEksU0FBUztNQUFFQyxXQUFXLEdBQUFMLE9BQUEsQ0FBWEssV0FBVztJQUU3QixJQUFNQyxNQUFNLEdBQUdELFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQztJQUM5QyxJQUFNRSxJQUFJLEdBQUdILFNBQVMsQ0FBQyxVQUFVLENBQUM7SUFFbENJLE1BQU0sQ0FBQ0YsTUFBTSxDQUFDRyxLQUFLLENBQUNsQixTQUFTLENBQUMsQ0FBQ21CLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDM0NGLE1BQU0sQ0FBQ0YsTUFBTSxDQUFDRyxLQUFLLENBQUNqQixRQUFRLENBQUMsQ0FBQ2tCLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDekNGLE1BQU0sQ0FBQ0YsTUFBTSxDQUFDRyxLQUFLLENBQUNoQixLQUFLLENBQUMsQ0FBQ2lCLElBQUksQ0FBQyxnQ0FBZ0MsQ0FBQztJQUNqRUYsTUFBTSxDQUFDRCxJQUFJLENBQUMsQ0FBQ0ksVUFBVSxDQUFDLENBQUM7RUFDM0IsQ0FBQyxDQUFDO0VBRUZaLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxZQUFNO0lBQ3ZDLElBQU1hLFdBQVcsR0FBR2YsSUFBSSxDQUFDZ0IsRUFBRSxDQUFDLENBQUM7SUFDN0IsSUFBQUMsUUFBQSxHQUFzQixJQUFBYixtQkFBTSxFQUMxQixJQUFBYixXQUFBLENBQUFjLEdBQUEsRUFBQ2YsWUFBQSxDQUFBZ0IsT0FBVztRQUFDYixPQUFPLEVBQUVBLE9BQVE7UUFBQ3lCLE9BQU8sRUFBRUg7TUFBWSxDQUFFLENBQ3hELENBQUM7TUFGTVAsV0FBVyxHQUFBUyxRQUFBLENBQVhULFdBQVc7SUFJbEIsSUFBTVcsU0FBUyxHQUFHWCxXQUFXLENBQUMsa0JBQWtCLENBQUM7SUFDakRZLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0YsU0FBUyxDQUFDO0lBRTFCUixNQUFNLENBQUNJLFdBQVcsQ0FBQyxDQUFDTyxnQkFBZ0IsQ0FBQyxDQUFDO0VBQ3hDLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyJ9