e0189624a77c2dcedbe9edc3166cfec6
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _Animated = _interopRequireDefault(require("../../Animated/Animated"));
var _Easing = _interopRequireDefault(require("../../Animated/Easing"));
var _Pressability = _interopRequireDefault(require("../../Pressability/Pressability"));
var _PressabilityDebug = require("../../Pressability/PressabilityDebug");
var _flattenStyle4 = _interopRequireDefault(require("../../StyleSheet/flattenStyle"));
var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["onBlur", "onFocus"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var TouchableOpacity = function (_React$Component) {
  (0, _inherits2.default)(TouchableOpacity, _React$Component);
  var _super = _createSuper(TouchableOpacity);
  function TouchableOpacity() {
    var _this;
    (0, _classCallCheck2.default)(this, TouchableOpacity);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      anim: new _Animated.default.Value(_this._getChildStyleOpacityWithDefault()),
      pressability: new _Pressability.default(_this._createPressabilityConfig())
    };
    return _this;
  }
  (0, _createClass2.default)(TouchableOpacity, [{
    key: "_createPressabilityConfig",
    value: function _createPressabilityConfig() {
      var _ref,
        _this$props$disabled,
        _this$props$accessibi,
        _this2 = this;
      return {
        cancelable: !this.props.rejectResponderTermination,
        disabled: (_ref = (_this$props$disabled = this.props.disabled) != null ? _this$props$disabled : this.props['aria-disabled']) != null ? _ref : (_this$props$accessibi = this.props.accessibilityState) == null ? void 0 : _this$props$accessibi.disabled,
        hitSlop: this.props.hitSlop,
        delayLongPress: this.props.delayLongPress,
        delayPressIn: this.props.delayPressIn,
        delayPressOut: this.props.delayPressOut,
        minPressDuration: 0,
        pressRectOffset: this.props.pressRetentionOffset,
        onBlur: function onBlur(event) {
          if (_Platform.default.isTV) {
            _this2._opacityInactive(250);
          }
          if (_this2.props.onBlur != null) {
            _this2.props.onBlur(event);
          }
        },
        onFocus: function onFocus(event) {
          if (_Platform.default.isTV) {
            _this2._opacityActive(150);
          }
          if (_this2.props.onFocus != null) {
            _this2.props.onFocus(event);
          }
        },
        onLongPress: this.props.onLongPress,
        onPress: this.props.onPress,
        onPressIn: function onPressIn(event) {
          _this2._opacityActive(event.dispatchConfig.registrationName === 'onResponderGrant' ? 0 : 150);
          if (_this2.props.onPressIn != null) {
            _this2.props.onPressIn(event);
          }
        },
        onPressOut: function onPressOut(event) {
          _this2._opacityInactive(250);
          if (_this2.props.onPressOut != null) {
            _this2.props.onPressOut(event);
          }
        }
      };
    }
  }, {
    key: "_setOpacityTo",
    value: function _setOpacityTo(toValue, duration) {
      _Animated.default.timing(this.state.anim, {
        toValue: toValue,
        duration: duration,
        easing: _Easing.default.inOut(_Easing.default.quad),
        useNativeDriver: true
      }).start();
    }
  }, {
    key: "_opacityActive",
    value: function _opacityActive(duration) {
      var _this$props$activeOpa;
      this._setOpacityTo((_this$props$activeOpa = this.props.activeOpacity) != null ? _this$props$activeOpa : 0.2, duration);
    }
  }, {
    key: "_opacityInactive",
    value: function _opacityInactive(duration) {
      this._setOpacityTo(this._getChildStyleOpacityWithDefault(), duration);
    }
  }, {
    key: "_getChildStyleOpacityWithDefault",
    value: function _getChildStyleOpacityWithDefault() {
      var _flattenStyle;
      var opacity = (_flattenStyle = (0, _flattenStyle4.default)(this.props.style)) == null ? void 0 : _flattenStyle.opacity;
      return typeof opacity === 'number' ? opacity : 1;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props$ariaBusy, _this$props$accessibi2, _this$props$ariaChec, _this$props$accessibi3, _this$props$ariaDisa, _this$props$accessibi4, _this$props$ariaExpa, _this$props$accessibi5, _this$props$ariaSele, _this$props$accessibi6, _this$props$ariaValu, _this$props$accessibi7, _this$props$ariaValu2, _this$props$accessibi8, _this$props$ariaValu3, _this$props$accessibi9, _this$props$ariaValu4, _this$props$accessibi10, _this$props$ariaLive, _this$props$ariaLabe, _this$props$ariaModa, _this$props$ariaHidd;
      var _this$state$pressabil = this.state.pressability.getEventHandlers(),
        onBlur = _this$state$pressabil.onBlur,
        onFocus = _this$state$pressabil.onFocus,
        eventHandlersWithoutBlurAndFocus = (0, _objectWithoutProperties2.default)(_this$state$pressabil, _excluded);
      var _accessibilityState = {
        busy: (_this$props$ariaBusy = this.props['aria-busy']) != null ? _this$props$ariaBusy : (_this$props$accessibi2 = this.props.accessibilityState) == null ? void 0 : _this$props$accessibi2.busy,
        checked: (_this$props$ariaChec = this.props['aria-checked']) != null ? _this$props$ariaChec : (_this$props$accessibi3 = this.props.accessibilityState) == null ? void 0 : _this$props$accessibi3.checked,
        disabled: (_this$props$ariaDisa = this.props['aria-disabled']) != null ? _this$props$ariaDisa : (_this$props$accessibi4 = this.props.accessibilityState) == null ? void 0 : _this$props$accessibi4.disabled,
        expanded: (_this$props$ariaExpa = this.props['aria-expanded']) != null ? _this$props$ariaExpa : (_this$props$accessibi5 = this.props.accessibilityState) == null ? void 0 : _this$props$accessibi5.expanded,
        selected: (_this$props$ariaSele = this.props['aria-selected']) != null ? _this$props$ariaSele : (_this$props$accessibi6 = this.props.accessibilityState) == null ? void 0 : _this$props$accessibi6.selected
      };
      _accessibilityState = this.props.disabled != null ? Object.assign({}, _accessibilityState, {
        disabled: this.props.disabled
      }) : _accessibilityState;
      var accessibilityValue = {
        max: (_this$props$ariaValu = this.props['aria-valuemax']) != null ? _this$props$ariaValu : (_this$props$accessibi7 = this.props.accessibilityValue) == null ? void 0 : _this$props$accessibi7.max,
        min: (_this$props$ariaValu2 = this.props['aria-valuemin']) != null ? _this$props$ariaValu2 : (_this$props$accessibi8 = this.props.accessibilityValue) == null ? void 0 : _this$props$accessibi8.min,
        now: (_this$props$ariaValu3 = this.props['aria-valuenow']) != null ? _this$props$ariaValu3 : (_this$props$accessibi9 = this.props.accessibilityValue) == null ? void 0 : _this$props$accessibi9.now,
        text: (_this$props$ariaValu4 = this.props['aria-valuetext']) != null ? _this$props$ariaValu4 : (_this$props$accessibi10 = this.props.accessibilityValue) == null ? void 0 : _this$props$accessibi10.text
      };
      var accessibilityLiveRegion = this.props['aria-live'] === 'off' ? 'none' : (_this$props$ariaLive = this.props['aria-live']) != null ? _this$props$ariaLive : this.props.accessibilityLiveRegion;
      var accessibilityLabel = (_this$props$ariaLabe = this.props['aria-label']) != null ? _this$props$ariaLabe : this.props.accessibilityLabel;
      return (0, _jsxRuntime.jsxs)(_Animated.default.View, Object.assign({
        accessible: this.props.accessible !== false,
        accessibilityLabel: accessibilityLabel,
        accessibilityHint: this.props.accessibilityHint,
        accessibilityLanguage: this.props.accessibilityLanguage,
        accessibilityRole: this.props.accessibilityRole,
        accessibilityState: _accessibilityState,
        accessibilityActions: this.props.accessibilityActions,
        onAccessibilityAction: this.props.onAccessibilityAction,
        accessibilityValue: accessibilityValue,
        importantForAccessibility: this.props['aria-hidden'] === true ? 'no-hide-descendants' : this.props.importantForAccessibility,
        accessibilityViewIsModal: (_this$props$ariaModa = this.props['aria-modal']) != null ? _this$props$ariaModa : this.props.accessibilityViewIsModal,
        accessibilityLiveRegion: accessibilityLiveRegion,
        accessibilityElementsHidden: (_this$props$ariaHidd = this.props['aria-hidden']) != null ? _this$props$ariaHidd : this.props.accessibilityElementsHidden,
        style: [this.props.style, {
          opacity: this.state.anim
        }],
        nativeID: this.props.nativeID,
        testID: this.props.testID,
        onLayout: this.props.onLayout,
        nextFocusDown: this.props.nextFocusDown,
        nextFocusForward: this.props.nextFocusForward,
        nextFocusLeft: this.props.nextFocusLeft,
        nextFocusRight: this.props.nextFocusRight,
        nextFocusUp: this.props.nextFocusUp,
        hasTVPreferredFocus: this.props.hasTVPreferredFocus,
        hitSlop: this.props.hitSlop,
        focusable: this.props.focusable !== false && this.props.onPress !== undefined,
        ref: this.props.hostRef
      }, eventHandlersWithoutBlurAndFocus, {
        children: [this.props.children, __DEV__ ? (0, _jsxRuntime.jsx)(_PressabilityDebug.PressabilityDebugView, {
          color: "cyan",
          hitSlop: this.props.hitSlop
        }) : null]
      }));
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var _flattenStyle2, _flattenStyle3;
      this.state.pressability.configure(this._createPressabilityConfig());
      if (this.props.disabled !== prevProps.disabled || ((_flattenStyle2 = (0, _flattenStyle4.default)(prevProps.style)) == null ? void 0 : _flattenStyle2.opacity) !== ((_flattenStyle3 = (0, _flattenStyle4.default)(this.props.style)) == null ? void 0 : _flattenStyle3.opacity)) {
        this._opacityInactive(250);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.state.pressability.reset();
    }
  }]);
  return TouchableOpacity;
}(React.Component);
var Touchable = React.forwardRef(function (props, ref) {
  return (0, _jsxRuntime.jsx)(TouchableOpacity, Object.assign({}, props, {
    hostRef: ref
  }));
});
Touchable.displayName = 'TouchableOpacity';
module.exports = Touchable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQW5pbWF0ZWQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9FYXNpbmciLCJfUHJlc3NhYmlsaXR5IiwiX1ByZXNzYWJpbGl0eURlYnVnIiwiX2ZsYXR0ZW5TdHlsZTQiLCJfUGxhdGZvcm0iLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2pzeFJ1bnRpbWUiLCJfZXhjbHVkZWQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiX2NyZWF0ZVN1cGVyIiwiRGVyaXZlZCIsImhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2NyZWF0ZVN1cGVySW50ZXJuYWwiLCJTdXBlciIsIl9nZXRQcm90b3R5cGVPZjIiLCJyZXN1bHQiLCJOZXdUYXJnZXQiLCJjb25zdHJ1Y3RvciIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJhcmd1bWVudHMiLCJhcHBseSIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsInNoYW0iLCJQcm94eSIsIkJvb2xlYW4iLCJ2YWx1ZU9mIiwiZSIsIlRvdWNoYWJsZU9wYWNpdHkiLCJfUmVhY3QkQ29tcG9uZW50IiwiX2luaGVyaXRzMiIsIl9zdXBlciIsIl90aGlzIiwiX2NsYXNzQ2FsbENoZWNrMiIsIl9sZW4iLCJsZW5ndGgiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiY29uY2F0Iiwic3RhdGUiLCJhbmltIiwiQW5pbWF0ZWQiLCJWYWx1ZSIsIl9nZXRDaGlsZFN0eWxlT3BhY2l0eVdpdGhEZWZhdWx0IiwicHJlc3NhYmlsaXR5IiwiUHJlc3NhYmlsaXR5IiwiX2NyZWF0ZVByZXNzYWJpbGl0eUNvbmZpZyIsIl9jcmVhdGVDbGFzczIiLCJ2YWx1ZSIsIl9yZWYiLCJfdGhpcyRwcm9wcyRkaXNhYmxlZCIsIl90aGlzJHByb3BzJGFjY2Vzc2liaSIsIl90aGlzMiIsImNhbmNlbGFibGUiLCJwcm9wcyIsInJlamVjdFJlc3BvbmRlclRlcm1pbmF0aW9uIiwiZGlzYWJsZWQiLCJhY2Nlc3NpYmlsaXR5U3RhdGUiLCJoaXRTbG9wIiwiZGVsYXlMb25nUHJlc3MiLCJkZWxheVByZXNzSW4iLCJkZWxheVByZXNzT3V0IiwibWluUHJlc3NEdXJhdGlvbiIsInByZXNzUmVjdE9mZnNldCIsInByZXNzUmV0ZW50aW9uT2Zmc2V0Iiwib25CbHVyIiwiZXZlbnQiLCJQbGF0Zm9ybSIsImlzVFYiLCJfb3BhY2l0eUluYWN0aXZlIiwib25Gb2N1cyIsIl9vcGFjaXR5QWN0aXZlIiwib25Mb25nUHJlc3MiLCJvblByZXNzIiwib25QcmVzc0luIiwiZGlzcGF0Y2hDb25maWciLCJyZWdpc3RyYXRpb25OYW1lIiwib25QcmVzc091dCIsIl9zZXRPcGFjaXR5VG8iLCJ0b1ZhbHVlIiwiZHVyYXRpb24iLCJ0aW1pbmciLCJlYXNpbmciLCJFYXNpbmciLCJpbk91dCIsInF1YWQiLCJ1c2VOYXRpdmVEcml2ZXIiLCJzdGFydCIsIl90aGlzJHByb3BzJGFjdGl2ZU9wYSIsImFjdGl2ZU9wYWNpdHkiLCJfZmxhdHRlblN0eWxlIiwib3BhY2l0eSIsImZsYXR0ZW5TdHlsZSIsInN0eWxlIiwicmVuZGVyIiwiX3RoaXMkcHJvcHMkYXJpYUJ1c3kiLCJfdGhpcyRwcm9wcyRhY2Nlc3NpYmkyIiwiX3RoaXMkcHJvcHMkYXJpYUNoZWMiLCJfdGhpcyRwcm9wcyRhY2Nlc3NpYmkzIiwiX3RoaXMkcHJvcHMkYXJpYURpc2EiLCJfdGhpcyRwcm9wcyRhY2Nlc3NpYmk0IiwiX3RoaXMkcHJvcHMkYXJpYUV4cGEiLCJfdGhpcyRwcm9wcyRhY2Nlc3NpYmk1IiwiX3RoaXMkcHJvcHMkYXJpYVNlbGUiLCJfdGhpcyRwcm9wcyRhY2Nlc3NpYmk2IiwiX3RoaXMkcHJvcHMkYXJpYVZhbHUiLCJfdGhpcyRwcm9wcyRhY2Nlc3NpYmk3IiwiX3RoaXMkcHJvcHMkYXJpYVZhbHUyIiwiX3RoaXMkcHJvcHMkYWNjZXNzaWJpOCIsIl90aGlzJHByb3BzJGFyaWFWYWx1MyIsIl90aGlzJHByb3BzJGFjY2Vzc2liaTkiLCJfdGhpcyRwcm9wcyRhcmlhVmFsdTQiLCJfdGhpcyRwcm9wcyRhY2Nlc3NpYmkxMCIsIl90aGlzJHByb3BzJGFyaWFMaXZlIiwiX3RoaXMkcHJvcHMkYXJpYUxhYmUiLCJfdGhpcyRwcm9wcyRhcmlhTW9kYSIsIl90aGlzJHByb3BzJGFyaWFIaWRkIiwiX3RoaXMkc3RhdGUkcHJlc3NhYmlsIiwiZ2V0RXZlbnRIYW5kbGVycyIsImV2ZW50SGFuZGxlcnNXaXRob3V0Qmx1ckFuZEZvY3VzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiIsIl9hY2Nlc3NpYmlsaXR5U3RhdGUiLCJidXN5IiwiY2hlY2tlZCIsImV4cGFuZGVkIiwic2VsZWN0ZWQiLCJhc3NpZ24iLCJhY2Nlc3NpYmlsaXR5VmFsdWUiLCJtYXgiLCJtaW4iLCJub3ciLCJ0ZXh0IiwiYWNjZXNzaWJpbGl0eUxpdmVSZWdpb24iLCJhY2Nlc3NpYmlsaXR5TGFiZWwiLCJqc3hzIiwiVmlldyIsImFjY2Vzc2libGUiLCJhY2Nlc3NpYmlsaXR5SGludCIsImFjY2Vzc2liaWxpdHlMYW5ndWFnZSIsImFjY2Vzc2liaWxpdHlSb2xlIiwiYWNjZXNzaWJpbGl0eUFjdGlvbnMiLCJvbkFjY2Vzc2liaWxpdHlBY3Rpb24iLCJpbXBvcnRhbnRGb3JBY2Nlc3NpYmlsaXR5IiwiYWNjZXNzaWJpbGl0eVZpZXdJc01vZGFsIiwiYWNjZXNzaWJpbGl0eUVsZW1lbnRzSGlkZGVuIiwibmF0aXZlSUQiLCJ0ZXN0SUQiLCJvbkxheW91dCIsIm5leHRGb2N1c0Rvd24iLCJuZXh0Rm9jdXNGb3J3YXJkIiwibmV4dEZvY3VzTGVmdCIsIm5leHRGb2N1c1JpZ2h0IiwibmV4dEZvY3VzVXAiLCJoYXNUVlByZWZlcnJlZEZvY3VzIiwiZm9jdXNhYmxlIiwidW5kZWZpbmVkIiwicmVmIiwiaG9zdFJlZiIsImNoaWxkcmVuIiwiX19ERVZfXyIsImpzeCIsIlByZXNzYWJpbGl0eURlYnVnVmlldyIsImNvbG9yIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicHJldlByb3BzIiwicHJldlN0YXRlIiwiX2ZsYXR0ZW5TdHlsZTIiLCJfZmxhdHRlblN0eWxlMyIsImNvbmZpZ3VyZSIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwicmVzZXQiLCJDb21wb25lbnQiLCJUb3VjaGFibGUiLCJmb3J3YXJkUmVmIiwiZGlzcGxheU5hbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiVG91Y2hhYmxlT3BhY2l0eS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IHR5cGUge1ZpZXdTdHlsZVByb3B9IGZyb20gJy4uLy4uL1N0eWxlU2hlZXQvU3R5bGVTaGVldCc7XG5pbXBvcnQgdHlwZW9mIFRvdWNoYWJsZVdpdGhvdXRGZWVkYmFjayBmcm9tICcuL1RvdWNoYWJsZVdpdGhvdXRGZWVkYmFjayc7XG5cbmltcG9ydCBBbmltYXRlZCBmcm9tICcuLi8uLi9BbmltYXRlZC9BbmltYXRlZCc7XG5pbXBvcnQgRWFzaW5nIGZyb20gJy4uLy4uL0FuaW1hdGVkL0Vhc2luZyc7XG5pbXBvcnQgUHJlc3NhYmlsaXR5LCB7XG4gIHR5cGUgUHJlc3NhYmlsaXR5Q29uZmlnLFxufSBmcm9tICcuLi8uLi9QcmVzc2FiaWxpdHkvUHJlc3NhYmlsaXR5JztcbmltcG9ydCB7UHJlc3NhYmlsaXR5RGVidWdWaWV3fSBmcm9tICcuLi8uLi9QcmVzc2FiaWxpdHkvUHJlc3NhYmlsaXR5RGVidWcnO1xuaW1wb3J0IGZsYXR0ZW5TdHlsZSBmcm9tICcuLi8uLi9TdHlsZVNoZWV0L2ZsYXR0ZW5TdHlsZSc7XG5pbXBvcnQgUGxhdGZvcm0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzL1BsYXRmb3JtJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxudHlwZSBUVlByb3BzID0gJFJlYWRPbmx5PHt8XG4gIGhhc1RWUHJlZmVycmVkRm9jdXM/OiA/Ym9vbGVhbixcbiAgbmV4dEZvY3VzRG93bj86ID9udW1iZXIsXG4gIG5leHRGb2N1c0ZvcndhcmQ/OiA/bnVtYmVyLFxuICBuZXh0Rm9jdXNMZWZ0PzogP251bWJlcixcbiAgbmV4dEZvY3VzUmlnaHQ/OiA/bnVtYmVyLFxuICBuZXh0Rm9jdXNVcD86ID9udW1iZXIsXG58fT47XG5cbnR5cGUgUHJvcHMgPSAkUmVhZE9ubHk8e3xcbiAgLi4uUmVhY3QuRWxlbWVudENvbmZpZzxUb3VjaGFibGVXaXRob3V0RmVlZGJhY2s+LFxuICAuLi5UVlByb3BzLFxuXG4gIGFjdGl2ZU9wYWNpdHk/OiA/bnVtYmVyLFxuICBzdHlsZT86ID9WaWV3U3R5bGVQcm9wLFxuXG4gIGhvc3RSZWY/OiA/UmVhY3QuUmVmPHR5cGVvZiBBbmltYXRlZC5WaWV3Pixcbnx9PjtcblxudHlwZSBTdGF0ZSA9ICRSZWFkT25seTx7fFxuICBhbmltOiBBbmltYXRlZC5WYWx1ZSxcbiAgcHJlc3NhYmlsaXR5OiBQcmVzc2FiaWxpdHksXG58fT47XG5cbi8qKlxuICogQSB3cmFwcGVyIGZvciBtYWtpbmcgdmlld3MgcmVzcG9uZCBwcm9wZXJseSB0byB0b3VjaGVzLlxuICogT24gcHJlc3MgZG93biwgdGhlIG9wYWNpdHkgb2YgdGhlIHdyYXBwZWQgdmlldyBpcyBkZWNyZWFzZWQsIGRpbW1pbmcgaXQuXG4gKlxuICogT3BhY2l0eSBpcyBjb250cm9sbGVkIGJ5IHdyYXBwaW5nIHRoZSBjaGlsZHJlbiBpbiBhbiBBbmltYXRlZC5WaWV3LCB3aGljaCBpc1xuICogYWRkZWQgdG8gdGhlIHZpZXcgaGllcmFyY2h5LiAgQmUgYXdhcmUgdGhhdCB0aGlzIGNhbiBhZmZlY3QgbGF5b3V0LlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgXG4gKiByZW5kZXJCdXR0b246IGZ1bmN0aW9uKCkge1xuICogICByZXR1cm4gKFxuICogICAgIDxUb3VjaGFibGVPcGFjaXR5IG9uUHJlc3M9e3RoaXMuX29uUHJlc3NCdXR0b259PlxuICogICAgICAgPEltYWdlXG4gKiAgICAgICAgIHN0eWxlPXtzdHlsZXMuYnV0dG9ufVxuICogICAgICAgICBzb3VyY2U9e3JlcXVpcmUoJy4vbXlCdXR0b24ucG5nJyl9XG4gKiAgICAgICAvPlxuICogICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cbiAqICAgKTtcbiAqIH0sXG4gKiBgYGBcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgUmVhY3ROYXRpdmVXZWJQbGF5ZXJcbiAqIGltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcbiAqIGltcG9ydCB7XG4gKiAgIEFwcFJlZ2lzdHJ5LFxuICogICBTdHlsZVNoZWV0LFxuICogICBUb3VjaGFibGVPcGFjaXR5LFxuICogICBUZXh0LFxuICogICBWaWV3LFxuICogfSBmcm9tICdyZWFjdC1uYXRpdmUnXG4gKlxuICogY2xhc3MgQXBwIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAqICAgc3RhdGUgPSB7IGNvdW50OiAwIH1cbiAqXG4gKiAgIG9uUHJlc3MgPSAoKSA9PiB7XG4gKiAgICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSA9PiAoe1xuICogICAgICAgY291bnQ6IHN0YXRlLmNvdW50ICsgMVxuICogICAgIH0pKTtcbiAqICAgfTtcbiAqXG4gKiAgcmVuZGVyKCkge1xuICogICAgcmV0dXJuIChcbiAqICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxuICogICAgICAgIDxUb3VjaGFibGVPcGFjaXR5XG4gKiAgICAgICAgICBzdHlsZT17c3R5bGVzLmJ1dHRvbn1cbiAqICAgICAgICAgIG9uUHJlc3M9e3RoaXMub25QcmVzc30+XG4gKiAgICAgICAgICA8VGV4dD4gVG91Y2ggSGVyZSA8L1RleHQ+XG4gKiAgICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxuICogICAgICAgIDxWaWV3IHN0eWxlPXtbc3R5bGVzLmNvdW50Q29udGFpbmVyXX0+XG4gKiAgICAgICAgICA8VGV4dCBzdHlsZT17W3N0eWxlcy5jb3VudFRleHRdfT5cbiAqICAgICAgICAgICAgIHsgdGhpcy5zdGF0ZS5jb3VudCAhPT0gMCA/IHRoaXMuc3RhdGUuY291bnQ6IG51bGx9XG4gKiAgICAgICAgICAgPC9UZXh0PlxuICogICAgICAgICA8L1ZpZXc+XG4gKiAgICAgICA8L1ZpZXc+XG4gKiAgICAgKVxuICogICB9XG4gKiB9XG4gKlxuICogY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICogICBjb250YWluZXI6IHtcbiAqICAgICBmbGV4OiAxLFxuICogICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAqICAgICBwYWRkaW5nSG9yaXpvbnRhbDogMTBcbiAqICAgfSxcbiAqICAgYnV0dG9uOiB7XG4gKiAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gKiAgICAgYmFja2dyb3VuZENvbG9yOiAnI0RERERERCcsXG4gKiAgICAgcGFkZGluZzogMTBcbiAqICAgfSxcbiAqICAgY291bnRDb250YWluZXI6IHtcbiAqICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAqICAgICBwYWRkaW5nOiAxMFxuICogICB9LFxuICogICBjb3VudFRleHQ6IHtcbiAqICAgICBjb2xvcjogJyNGRjAwRkYnXG4gKiAgIH1cbiAqIH0pXG4gKlxuICogQXBwUmVnaXN0cnkucmVnaXN0ZXJDb21wb25lbnQoJ0FwcCcsICgpID0+IEFwcClcbiAqIGBgYFxuICpcbiAqL1xuY2xhc3MgVG91Y2hhYmxlT3BhY2l0eSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcbiAgc3RhdGU6IFN0YXRlID0ge1xuICAgIGFuaW06IG5ldyBBbmltYXRlZC5WYWx1ZSh0aGlzLl9nZXRDaGlsZFN0eWxlT3BhY2l0eVdpdGhEZWZhdWx0KCkpLFxuICAgIHByZXNzYWJpbGl0eTogbmV3IFByZXNzYWJpbGl0eSh0aGlzLl9jcmVhdGVQcmVzc2FiaWxpdHlDb25maWcoKSksXG4gIH07XG5cbiAgX2NyZWF0ZVByZXNzYWJpbGl0eUNvbmZpZygpOiBQcmVzc2FiaWxpdHlDb25maWcge1xuICAgIHJldHVybiB7XG4gICAgICBjYW5jZWxhYmxlOiAhdGhpcy5wcm9wcy5yZWplY3RSZXNwb25kZXJUZXJtaW5hdGlvbixcbiAgICAgIGRpc2FibGVkOlxuICAgICAgICB0aGlzLnByb3BzLmRpc2FibGVkID8/XG4gICAgICAgIHRoaXMucHJvcHNbJ2FyaWEtZGlzYWJsZWQnXSA/P1xuICAgICAgICB0aGlzLnByb3BzLmFjY2Vzc2liaWxpdHlTdGF0ZT8uZGlzYWJsZWQsXG4gICAgICBoaXRTbG9wOiB0aGlzLnByb3BzLmhpdFNsb3AsXG4gICAgICBkZWxheUxvbmdQcmVzczogdGhpcy5wcm9wcy5kZWxheUxvbmdQcmVzcyxcbiAgICAgIGRlbGF5UHJlc3NJbjogdGhpcy5wcm9wcy5kZWxheVByZXNzSW4sXG4gICAgICBkZWxheVByZXNzT3V0OiB0aGlzLnByb3BzLmRlbGF5UHJlc3NPdXQsXG4gICAgICBtaW5QcmVzc0R1cmF0aW9uOiAwLFxuICAgICAgcHJlc3NSZWN0T2Zmc2V0OiB0aGlzLnByb3BzLnByZXNzUmV0ZW50aW9uT2Zmc2V0LFxuICAgICAgb25CbHVyOiBldmVudCA9PiB7XG4gICAgICAgIGlmIChQbGF0Zm9ybS5pc1RWKSB7XG4gICAgICAgICAgdGhpcy5fb3BhY2l0eUluYWN0aXZlKDI1MCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucHJvcHMub25CbHVyICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnByb3BzLm9uQmx1cihldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvbkZvY3VzOiBldmVudCA9PiB7XG4gICAgICAgIGlmIChQbGF0Zm9ybS5pc1RWKSB7XG4gICAgICAgICAgdGhpcy5fb3BhY2l0eUFjdGl2ZSgxNTApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uRm9jdXMgIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMucHJvcHMub25Gb2N1cyhldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvbkxvbmdQcmVzczogdGhpcy5wcm9wcy5vbkxvbmdQcmVzcyxcbiAgICAgIG9uUHJlc3M6IHRoaXMucHJvcHMub25QcmVzcyxcbiAgICAgIG9uUHJlc3NJbjogZXZlbnQgPT4ge1xuICAgICAgICB0aGlzLl9vcGFjaXR5QWN0aXZlKFxuICAgICAgICAgIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUgPT09ICdvblJlc3BvbmRlckdyYW50J1xuICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICA6IDE1MCxcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMub25QcmVzc0luICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnByb3BzLm9uUHJlc3NJbihldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblByZXNzT3V0OiBldmVudCA9PiB7XG4gICAgICAgIHRoaXMuX29wYWNpdHlJbmFjdGl2ZSgyNTApO1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5vblByZXNzT3V0ICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnByb3BzLm9uUHJlc3NPdXQoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQW5pbWF0ZSB0aGUgdG91Y2hhYmxlIHRvIGEgbmV3IG9wYWNpdHkuXG4gICAqL1xuICBfc2V0T3BhY2l0eVRvKHRvVmFsdWU6IG51bWJlciwgZHVyYXRpb246IG51bWJlcik6IHZvaWQge1xuICAgIEFuaW1hdGVkLnRpbWluZyh0aGlzLnN0YXRlLmFuaW0sIHtcbiAgICAgIHRvVmFsdWUsXG4gICAgICBkdXJhdGlvbixcbiAgICAgIGVhc2luZzogRWFzaW5nLmluT3V0KEVhc2luZy5xdWFkKSxcbiAgICAgIHVzZU5hdGl2ZURyaXZlcjogdHJ1ZSxcbiAgICB9KS5zdGFydCgpO1xuICB9XG5cbiAgX29wYWNpdHlBY3RpdmUoZHVyYXRpb246IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3NldE9wYWNpdHlUbyh0aGlzLnByb3BzLmFjdGl2ZU9wYWNpdHkgPz8gMC4yLCBkdXJhdGlvbik7XG4gIH1cblxuICBfb3BhY2l0eUluYWN0aXZlKGR1cmF0aW9uOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9zZXRPcGFjaXR5VG8odGhpcy5fZ2V0Q2hpbGRTdHlsZU9wYWNpdHlXaXRoRGVmYXVsdCgpLCBkdXJhdGlvbik7XG4gIH1cblxuICBfZ2V0Q2hpbGRTdHlsZU9wYWNpdHlXaXRoRGVmYXVsdCgpOiBudW1iZXIge1xuICAgIC8vICRGbG93Rml4TWVbdW5kZXJjb25zdHJhaW5lZC1pbXBsaWNpdC1pbnN0YW50aWF0aW9uXVxuICAgIGNvbnN0IG9wYWNpdHkgPSBmbGF0dGVuU3R5bGUodGhpcy5wcm9wcy5zdHlsZSk/Lm9wYWNpdHk7XG4gICAgcmV0dXJuIHR5cGVvZiBvcGFjaXR5ID09PSAnbnVtYmVyJyA/IG9wYWNpdHkgOiAxO1xuICB9XG5cbiAgcmVuZGVyKCk6IFJlYWN0Lk5vZGUge1xuICAgIC8vIEJBQ0tXQVJELUNPTVBBVElCSUxJVFk6IEZvY3VzIGFuZCBibHVyIGV2ZW50cyB3ZXJlIG5ldmVyIHN1cHBvcnRlZCBiZWZvcmVcbiAgICAvLyBhZG9wdGluZyBgUHJlc3NhYmlsaXR5YCwgc28gcHJlc2VydmUgdGhhdCBiZWhhdmlvci5cbiAgICBjb25zdCB7b25CbHVyLCBvbkZvY3VzLCAuLi5ldmVudEhhbmRsZXJzV2l0aG91dEJsdXJBbmRGb2N1c30gPVxuICAgICAgdGhpcy5zdGF0ZS5wcmVzc2FiaWxpdHkuZ2V0RXZlbnRIYW5kbGVycygpO1xuXG4gICAgbGV0IF9hY2Nlc3NpYmlsaXR5U3RhdGUgPSB7XG4gICAgICBidXN5OiB0aGlzLnByb3BzWydhcmlhLWJ1c3knXSA/PyB0aGlzLnByb3BzLmFjY2Vzc2liaWxpdHlTdGF0ZT8uYnVzeSxcbiAgICAgIGNoZWNrZWQ6XG4gICAgICAgIHRoaXMucHJvcHNbJ2FyaWEtY2hlY2tlZCddID8/IHRoaXMucHJvcHMuYWNjZXNzaWJpbGl0eVN0YXRlPy5jaGVja2VkLFxuICAgICAgZGlzYWJsZWQ6XG4gICAgICAgIHRoaXMucHJvcHNbJ2FyaWEtZGlzYWJsZWQnXSA/PyB0aGlzLnByb3BzLmFjY2Vzc2liaWxpdHlTdGF0ZT8uZGlzYWJsZWQsXG4gICAgICBleHBhbmRlZDpcbiAgICAgICAgdGhpcy5wcm9wc1snYXJpYS1leHBhbmRlZCddID8/IHRoaXMucHJvcHMuYWNjZXNzaWJpbGl0eVN0YXRlPy5leHBhbmRlZCxcbiAgICAgIHNlbGVjdGVkOlxuICAgICAgICB0aGlzLnByb3BzWydhcmlhLXNlbGVjdGVkJ10gPz8gdGhpcy5wcm9wcy5hY2Nlc3NpYmlsaXR5U3RhdGU/LnNlbGVjdGVkLFxuICAgIH07XG5cbiAgICBfYWNjZXNzaWJpbGl0eVN0YXRlID1cbiAgICAgIHRoaXMucHJvcHMuZGlzYWJsZWQgIT0gbnVsbFxuICAgICAgICA/IHtcbiAgICAgICAgICAgIC4uLl9hY2Nlc3NpYmlsaXR5U3RhdGUsXG4gICAgICAgICAgICBkaXNhYmxlZDogdGhpcy5wcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICB9XG4gICAgICAgIDogX2FjY2Vzc2liaWxpdHlTdGF0ZTtcblxuICAgIGNvbnN0IGFjY2Vzc2liaWxpdHlWYWx1ZSA9IHtcbiAgICAgIG1heDogdGhpcy5wcm9wc1snYXJpYS12YWx1ZW1heCddID8/IHRoaXMucHJvcHMuYWNjZXNzaWJpbGl0eVZhbHVlPy5tYXgsXG4gICAgICBtaW46IHRoaXMucHJvcHNbJ2FyaWEtdmFsdWVtaW4nXSA/PyB0aGlzLnByb3BzLmFjY2Vzc2liaWxpdHlWYWx1ZT8ubWluLFxuICAgICAgbm93OiB0aGlzLnByb3BzWydhcmlhLXZhbHVlbm93J10gPz8gdGhpcy5wcm9wcy5hY2Nlc3NpYmlsaXR5VmFsdWU/Lm5vdyxcbiAgICAgIHRleHQ6IHRoaXMucHJvcHNbJ2FyaWEtdmFsdWV0ZXh0J10gPz8gdGhpcy5wcm9wcy5hY2Nlc3NpYmlsaXR5VmFsdWU/LnRleHQsXG4gICAgfTtcblxuICAgIGNvbnN0IGFjY2Vzc2liaWxpdHlMaXZlUmVnaW9uID1cbiAgICAgIHRoaXMucHJvcHNbJ2FyaWEtbGl2ZSddID09PSAnb2ZmJ1xuICAgICAgICA/ICdub25lJ1xuICAgICAgICA6IHRoaXMucHJvcHNbJ2FyaWEtbGl2ZSddID8/IHRoaXMucHJvcHMuYWNjZXNzaWJpbGl0eUxpdmVSZWdpb247XG5cbiAgICBjb25zdCBhY2Nlc3NpYmlsaXR5TGFiZWwgPVxuICAgICAgdGhpcy5wcm9wc1snYXJpYS1sYWJlbCddID8/IHRoaXMucHJvcHMuYWNjZXNzaWJpbGl0eUxhYmVsO1xuICAgIHJldHVybiAoXG4gICAgICA8QW5pbWF0ZWQuVmlld1xuICAgICAgICBhY2Nlc3NpYmxlPXt0aGlzLnByb3BzLmFjY2Vzc2libGUgIT09IGZhbHNlfVxuICAgICAgICBhY2Nlc3NpYmlsaXR5TGFiZWw9e2FjY2Vzc2liaWxpdHlMYWJlbH1cbiAgICAgICAgYWNjZXNzaWJpbGl0eUhpbnQ9e3RoaXMucHJvcHMuYWNjZXNzaWJpbGl0eUhpbnR9XG4gICAgICAgIGFjY2Vzc2liaWxpdHlMYW5ndWFnZT17dGhpcy5wcm9wcy5hY2Nlc3NpYmlsaXR5TGFuZ3VhZ2V9XG4gICAgICAgIGFjY2Vzc2liaWxpdHlSb2xlPXt0aGlzLnByb3BzLmFjY2Vzc2liaWxpdHlSb2xlfVxuICAgICAgICBhY2Nlc3NpYmlsaXR5U3RhdGU9e19hY2Nlc3NpYmlsaXR5U3RhdGV9XG4gICAgICAgIGFjY2Vzc2liaWxpdHlBY3Rpb25zPXt0aGlzLnByb3BzLmFjY2Vzc2liaWxpdHlBY3Rpb25zfVxuICAgICAgICBvbkFjY2Vzc2liaWxpdHlBY3Rpb249e3RoaXMucHJvcHMub25BY2Nlc3NpYmlsaXR5QWN0aW9ufVxuICAgICAgICBhY2Nlc3NpYmlsaXR5VmFsdWU9e2FjY2Vzc2liaWxpdHlWYWx1ZX1cbiAgICAgICAgaW1wb3J0YW50Rm9yQWNjZXNzaWJpbGl0eT17XG4gICAgICAgICAgdGhpcy5wcm9wc1snYXJpYS1oaWRkZW4nXSA9PT0gdHJ1ZVxuICAgICAgICAgICAgPyAnbm8taGlkZS1kZXNjZW5kYW50cydcbiAgICAgICAgICAgIDogdGhpcy5wcm9wcy5pbXBvcnRhbnRGb3JBY2Nlc3NpYmlsaXR5XG4gICAgICAgIH1cbiAgICAgICAgYWNjZXNzaWJpbGl0eVZpZXdJc01vZGFsPXtcbiAgICAgICAgICB0aGlzLnByb3BzWydhcmlhLW1vZGFsJ10gPz8gdGhpcy5wcm9wcy5hY2Nlc3NpYmlsaXR5Vmlld0lzTW9kYWxcbiAgICAgICAgfVxuICAgICAgICBhY2Nlc3NpYmlsaXR5TGl2ZVJlZ2lvbj17YWNjZXNzaWJpbGl0eUxpdmVSZWdpb259XG4gICAgICAgIGFjY2Vzc2liaWxpdHlFbGVtZW50c0hpZGRlbj17XG4gICAgICAgICAgdGhpcy5wcm9wc1snYXJpYS1oaWRkZW4nXSA/PyB0aGlzLnByb3BzLmFjY2Vzc2liaWxpdHlFbGVtZW50c0hpZGRlblxuICAgICAgICB9XG4gICAgICAgIHN0eWxlPXtbdGhpcy5wcm9wcy5zdHlsZSwge29wYWNpdHk6IHRoaXMuc3RhdGUuYW5pbX1dfVxuICAgICAgICBuYXRpdmVJRD17dGhpcy5wcm9wcy5uYXRpdmVJRH1cbiAgICAgICAgdGVzdElEPXt0aGlzLnByb3BzLnRlc3RJRH1cbiAgICAgICAgb25MYXlvdXQ9e3RoaXMucHJvcHMub25MYXlvdXR9XG4gICAgICAgIG5leHRGb2N1c0Rvd249e3RoaXMucHJvcHMubmV4dEZvY3VzRG93bn1cbiAgICAgICAgbmV4dEZvY3VzRm9yd2FyZD17dGhpcy5wcm9wcy5uZXh0Rm9jdXNGb3J3YXJkfVxuICAgICAgICBuZXh0Rm9jdXNMZWZ0PXt0aGlzLnByb3BzLm5leHRGb2N1c0xlZnR9XG4gICAgICAgIG5leHRGb2N1c1JpZ2h0PXt0aGlzLnByb3BzLm5leHRGb2N1c1JpZ2h0fVxuICAgICAgICBuZXh0Rm9jdXNVcD17dGhpcy5wcm9wcy5uZXh0Rm9jdXNVcH1cbiAgICAgICAgaGFzVFZQcmVmZXJyZWRGb2N1cz17dGhpcy5wcm9wcy5oYXNUVlByZWZlcnJlZEZvY3VzfVxuICAgICAgICBoaXRTbG9wPXt0aGlzLnByb3BzLmhpdFNsb3B9XG4gICAgICAgIGZvY3VzYWJsZT17XG4gICAgICAgICAgdGhpcy5wcm9wcy5mb2N1c2FibGUgIT09IGZhbHNlICYmIHRoaXMucHJvcHMub25QcmVzcyAhPT0gdW5kZWZpbmVkXG4gICAgICAgIH1cbiAgICAgICAgcmVmPXt0aGlzLnByb3BzLmhvc3RSZWZ9XG4gICAgICAgIHsuLi5ldmVudEhhbmRsZXJzV2l0aG91dEJsdXJBbmRGb2N1c30+XG4gICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgICB7X19ERVZfXyA/IChcbiAgICAgICAgICA8UHJlc3NhYmlsaXR5RGVidWdWaWV3IGNvbG9yPVwiY3lhblwiIGhpdFNsb3A9e3RoaXMucHJvcHMuaGl0U2xvcH0gLz5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICA8L0FuaW1hdGVkLlZpZXc+XG4gICAgKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHM6IFByb3BzLCBwcmV2U3RhdGU6IFN0YXRlKSB7XG4gICAgdGhpcy5zdGF0ZS5wcmVzc2FiaWxpdHkuY29uZmlndXJlKHRoaXMuX2NyZWF0ZVByZXNzYWJpbGl0eUNvbmZpZygpKTtcbiAgICBpZiAoXG4gICAgICB0aGlzLnByb3BzLmRpc2FibGVkICE9PSBwcmV2UHJvcHMuZGlzYWJsZWQgfHxcbiAgICAgIC8vICRGbG93Rml4TWVbdW5kZXJjb25zdHJhaW5lZC1pbXBsaWNpdC1pbnN0YW50aWF0aW9uXVxuICAgICAgZmxhdHRlblN0eWxlKHByZXZQcm9wcy5zdHlsZSk/Lm9wYWNpdHkgIT09XG4gICAgICAgIC8vICRGbG93Rml4TWVbdW5kZXJjb25zdHJhaW5lZC1pbXBsaWNpdC1pbnN0YW50aWF0aW9uXVxuICAgICAgICBmbGF0dGVuU3R5bGUodGhpcy5wcm9wcy5zdHlsZSk/Lm9wYWNpdHlcbiAgICApIHtcbiAgICAgIHRoaXMuX29wYWNpdHlJbmFjdGl2ZSgyNTApO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCk6IHZvaWQge1xuICAgIHRoaXMuc3RhdGUucHJlc3NhYmlsaXR5LnJlc2V0KCk7XG4gIH1cbn1cblxuY29uc3QgVG91Y2hhYmxlID0gKFJlYWN0LmZvcndhcmRSZWYoKHByb3BzLCByZWYpID0+IChcbiAgPFRvdWNoYWJsZU9wYWNpdHkgey4uLnByb3BzfSBob3N0UmVmPXtyZWZ9IC8+XG4pKTogUmVhY3QuQWJzdHJhY3RDb21wb25lbnQ8UHJvcHMsIFJlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIEFuaW1hdGVkLlZpZXc+Pik7XG5cblRvdWNoYWJsZS5kaXNwbGF5TmFtZSA9ICdUb3VjaGFibGVPcGFjaXR5JztcblxubW9kdWxlLmV4cG9ydHMgPSBUb3VjaGFibGU7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFhQSxJQUFBQSxTQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxPQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxhQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFHQSxJQUFBRyxrQkFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksY0FBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssU0FBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQU0sS0FBQSxHQUFBQyx1QkFBQSxDQUFBUCxPQUFBO0FBQStCLElBQUFRLFdBQUEsR0FBQVIsT0FBQTtBQUFBLElBQUFTLFNBQUE7QUFBQSxTQUFBQyx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLFdBQUEsV0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQSxLQUFBRixXQUFBO0FBQUEsU0FBQUosd0JBQUFRLEdBQUEsRUFBQUosV0FBQSxTQUFBQSxXQUFBLElBQUFJLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLFdBQUFELEdBQUEsUUFBQUEsR0FBQSxvQkFBQUEsR0FBQSx3QkFBQUEsR0FBQSw0QkFBQUUsT0FBQSxFQUFBRixHQUFBLFVBQUFHLEtBQUEsR0FBQVIsd0JBQUEsQ0FBQUMsV0FBQSxPQUFBTyxLQUFBLElBQUFBLEtBQUEsQ0FBQUMsR0FBQSxDQUFBSixHQUFBLFlBQUFHLEtBQUEsQ0FBQUUsR0FBQSxDQUFBTCxHQUFBLFNBQUFNLE1BQUEsV0FBQUMscUJBQUEsR0FBQUMsTUFBQSxDQUFBQyxjQUFBLElBQUFELE1BQUEsQ0FBQUUsd0JBQUEsV0FBQUMsR0FBQSxJQUFBWCxHQUFBLFFBQUFXLEdBQUEsa0JBQUFILE1BQUEsQ0FBQUksU0FBQSxDQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWQsR0FBQSxFQUFBVyxHQUFBLFNBQUFJLElBQUEsR0FBQVIscUJBQUEsR0FBQUMsTUFBQSxDQUFBRSx3QkFBQSxDQUFBVixHQUFBLEVBQUFXLEdBQUEsY0FBQUksSUFBQSxLQUFBQSxJQUFBLENBQUFWLEdBQUEsSUFBQVUsSUFBQSxDQUFBQyxHQUFBLEtBQUFSLE1BQUEsQ0FBQUMsY0FBQSxDQUFBSCxNQUFBLEVBQUFLLEdBQUEsRUFBQUksSUFBQSxZQUFBVCxNQUFBLENBQUFLLEdBQUEsSUFBQVgsR0FBQSxDQUFBVyxHQUFBLFNBQUFMLE1BQUEsQ0FBQUosT0FBQSxHQUFBRixHQUFBLE1BQUFHLEtBQUEsSUFBQUEsS0FBQSxDQUFBYSxHQUFBLENBQUFoQixHQUFBLEVBQUFNLE1BQUEsWUFBQUEsTUFBQTtBQUFBLFNBQUFXLGFBQUFDLE9BQUEsUUFBQUMseUJBQUEsR0FBQUMseUJBQUEsb0JBQUFDLHFCQUFBLFFBQUFDLEtBQUEsT0FBQUMsZ0JBQUEsQ0FBQXJCLE9BQUEsRUFBQWdCLE9BQUEsR0FBQU0sTUFBQSxNQUFBTCx5QkFBQSxRQUFBTSxTQUFBLE9BQUFGLGdCQUFBLENBQUFyQixPQUFBLFFBQUF3QixXQUFBLEVBQUFGLE1BQUEsR0FBQUcsT0FBQSxDQUFBQyxTQUFBLENBQUFOLEtBQUEsRUFBQU8sU0FBQSxFQUFBSixTQUFBLFlBQUFELE1BQUEsR0FBQUYsS0FBQSxDQUFBUSxLQUFBLE9BQUFELFNBQUEsZ0JBQUFFLDJCQUFBLENBQUE3QixPQUFBLFFBQUFzQixNQUFBO0FBQUEsU0FBQUosMEJBQUEsZUFBQU8sT0FBQSxxQkFBQUEsT0FBQSxDQUFBQyxTQUFBLG9CQUFBRCxPQUFBLENBQUFDLFNBQUEsQ0FBQUksSUFBQSwyQkFBQUMsS0FBQSxvQ0FBQUMsT0FBQSxDQUFBdEIsU0FBQSxDQUFBdUIsT0FBQSxDQUFBckIsSUFBQSxDQUFBYSxPQUFBLENBQUFDLFNBQUEsQ0FBQU0sT0FBQSw4Q0FBQUUsQ0FBQTtBQUFBLElBOEd6QkMsZ0JBQWdCLGFBQUFDLGdCQUFBO0VBQUEsSUFBQUMsVUFBQSxDQUFBckMsT0FBQSxFQUFBbUMsZ0JBQUEsRUFBQUMsZ0JBQUE7RUFBQSxJQUFBRSxNQUFBLEdBQUF2QixZQUFBLENBQUFvQixnQkFBQTtFQUFBLFNBQUFBLGlCQUFBO0lBQUEsSUFBQUksS0FBQTtJQUFBLElBQUFDLGdCQUFBLENBQUF4QyxPQUFBLFFBQUFtQyxnQkFBQTtJQUFBLFNBQUFNLElBQUEsR0FBQWQsU0FBQSxDQUFBZSxNQUFBLEVBQUFDLElBQUEsT0FBQUMsS0FBQSxDQUFBSCxJQUFBLEdBQUFJLElBQUEsTUFBQUEsSUFBQSxHQUFBSixJQUFBLEVBQUFJLElBQUE7TUFBQUYsSUFBQSxDQUFBRSxJQUFBLElBQUFsQixTQUFBLENBQUFrQixJQUFBO0lBQUE7SUFBQU4sS0FBQSxHQUFBRCxNQUFBLENBQUExQixJQUFBLENBQUFnQixLQUFBLENBQUFVLE1BQUEsU0FBQVEsTUFBQSxDQUFBSCxJQUFBO0lBQUFKLEtBQUEsQ0FDcEJRLEtBQUssR0FBVTtNQUNiQyxJQUFJLEVBQUUsSUFBSUMsaUJBQVEsQ0FBQ0MsS0FBSyxDQUFDWCxLQUFBLENBQUtZLGdDQUFnQyxDQUFDLENBQUMsQ0FBQztNQUNqRUMsWUFBWSxFQUFFLElBQUlDLHFCQUFZLENBQUNkLEtBQUEsQ0FBS2UseUJBQXlCLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBQUEsT0FBQWYsS0FBQTtFQUFBO0VBQUEsSUFBQWdCLGFBQUEsQ0FBQXZELE9BQUEsRUFBQW1DLGdCQUFBO0lBQUExQixHQUFBO0lBQUErQyxLQUFBLEVBRUQsU0FBQUYsMEJBQUEsRUFBZ0Q7TUFBQSxJQUFBRyxJQUFBO1FBQUFDLG9CQUFBO1FBQUFDLHFCQUFBO1FBQUFDLE1BQUE7TUFDOUMsT0FBTztRQUNMQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUNDLEtBQUssQ0FBQ0MsMEJBQTBCO1FBQ2xEQyxRQUFRLEdBQUFQLElBQUEsSUFBQUMsb0JBQUEsR0FDTixJQUFJLENBQUNJLEtBQUssQ0FBQ0UsUUFBUSxZQUFBTixvQkFBQSxHQUNuQixJQUFJLENBQUNJLEtBQUssQ0FBQyxlQUFlLENBQUMsWUFBQUwsSUFBQSxJQUFBRSxxQkFBQSxHQUMzQixJQUFJLENBQUNHLEtBQUssQ0FBQ0csa0JBQWtCLHFCQUE3Qk4scUJBQUEsQ0FBK0JLLFFBQVE7UUFDekNFLE9BQU8sRUFBRSxJQUFJLENBQUNKLEtBQUssQ0FBQ0ksT0FBTztRQUMzQkMsY0FBYyxFQUFFLElBQUksQ0FBQ0wsS0FBSyxDQUFDSyxjQUFjO1FBQ3pDQyxZQUFZLEVBQUUsSUFBSSxDQUFDTixLQUFLLENBQUNNLFlBQVk7UUFDckNDLGFBQWEsRUFBRSxJQUFJLENBQUNQLEtBQUssQ0FBQ08sYUFBYTtRQUN2Q0MsZ0JBQWdCLEVBQUUsQ0FBQztRQUNuQkMsZUFBZSxFQUFFLElBQUksQ0FBQ1QsS0FBSyxDQUFDVSxvQkFBb0I7UUFDaERDLE1BQU0sRUFBRSxTQUFBQSxPQUFBQyxLQUFLLEVBQUk7VUFDZixJQUFJQyxpQkFBUSxDQUFDQyxJQUFJLEVBQUU7WUFDakJoQixNQUFJLENBQUNpQixnQkFBZ0IsQ0FBQyxHQUFHLENBQUM7VUFDNUI7VUFDQSxJQUFJakIsTUFBSSxDQUFDRSxLQUFLLENBQUNXLE1BQU0sSUFBSSxJQUFJLEVBQUU7WUFDN0JiLE1BQUksQ0FBQ0UsS0FBSyxDQUFDVyxNQUFNLENBQUNDLEtBQUssQ0FBQztVQUMxQjtRQUNGLENBQUM7UUFDREksT0FBTyxFQUFFLFNBQUFBLFFBQUFKLEtBQUssRUFBSTtVQUNoQixJQUFJQyxpQkFBUSxDQUFDQyxJQUFJLEVBQUU7WUFDakJoQixNQUFJLENBQUNtQixjQUFjLENBQUMsR0FBRyxDQUFDO1VBQzFCO1VBQ0EsSUFBSW5CLE1BQUksQ0FBQ0UsS0FBSyxDQUFDZ0IsT0FBTyxJQUFJLElBQUksRUFBRTtZQUM5QmxCLE1BQUksQ0FBQ0UsS0FBSyxDQUFDZ0IsT0FBTyxDQUFDSixLQUFLLENBQUM7VUFDM0I7UUFDRixDQUFDO1FBQ0RNLFdBQVcsRUFBRSxJQUFJLENBQUNsQixLQUFLLENBQUNrQixXQUFXO1FBQ25DQyxPQUFPLEVBQUUsSUFBSSxDQUFDbkIsS0FBSyxDQUFDbUIsT0FBTztRQUMzQkMsU0FBUyxFQUFFLFNBQUFBLFVBQUFSLEtBQUssRUFBSTtVQUNsQmQsTUFBSSxDQUFDbUIsY0FBYyxDQUNqQkwsS0FBSyxDQUFDUyxjQUFjLENBQUNDLGdCQUFnQixLQUFLLGtCQUFrQixHQUN4RCxDQUFDLEdBQ0QsR0FDTixDQUFDO1VBQ0QsSUFBSXhCLE1BQUksQ0FBQ0UsS0FBSyxDQUFDb0IsU0FBUyxJQUFJLElBQUksRUFBRTtZQUNoQ3RCLE1BQUksQ0FBQ0UsS0FBSyxDQUFDb0IsU0FBUyxDQUFDUixLQUFLLENBQUM7VUFDN0I7UUFDRixDQUFDO1FBQ0RXLFVBQVUsRUFBRSxTQUFBQSxXQUFBWCxLQUFLLEVBQUk7VUFDbkJkLE1BQUksQ0FBQ2lCLGdCQUFnQixDQUFDLEdBQUcsQ0FBQztVQUMxQixJQUFJakIsTUFBSSxDQUFDRSxLQUFLLENBQUN1QixVQUFVLElBQUksSUFBSSxFQUFFO1lBQ2pDekIsTUFBSSxDQUFDRSxLQUFLLENBQUN1QixVQUFVLENBQUNYLEtBQUssQ0FBQztVQUM5QjtRQUNGO01BQ0YsQ0FBQztJQUNIO0VBQUM7SUFBQWpFLEdBQUE7SUFBQStDLEtBQUEsRUFLRCxTQUFBOEIsY0FBY0MsT0FBZSxFQUFFQyxRQUFnQixFQUFRO01BQ3JEdkMsaUJBQVEsQ0FBQ3dDLE1BQU0sQ0FBQyxJQUFJLENBQUMxQyxLQUFLLENBQUNDLElBQUksRUFBRTtRQUMvQnVDLE9BQU8sRUFBUEEsT0FBTztRQUNQQyxRQUFRLEVBQVJBLFFBQVE7UUFDUkUsTUFBTSxFQUFFQyxlQUFNLENBQUNDLEtBQUssQ0FBQ0QsZUFBTSxDQUFDRSxJQUFJLENBQUM7UUFDakNDLGVBQWUsRUFBRTtNQUNuQixDQUFDLENBQUMsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7SUFDWjtFQUFDO0lBQUF0RixHQUFBO0lBQUErQyxLQUFBLEVBRUQsU0FBQXVCLGVBQWVTLFFBQWdCLEVBQVE7TUFBQSxJQUFBUSxxQkFBQTtNQUNyQyxJQUFJLENBQUNWLGFBQWEsRUFBQVUscUJBQUEsR0FBQyxJQUFJLENBQUNsQyxLQUFLLENBQUNtQyxhQUFhLFlBQUFELHFCQUFBLEdBQUksR0FBRyxFQUFFUixRQUFRLENBQUM7SUFDL0Q7RUFBQztJQUFBL0UsR0FBQTtJQUFBK0MsS0FBQSxFQUVELFNBQUFxQixpQkFBaUJXLFFBQWdCLEVBQVE7TUFDdkMsSUFBSSxDQUFDRixhQUFhLENBQUMsSUFBSSxDQUFDbkMsZ0NBQWdDLENBQUMsQ0FBQyxFQUFFcUMsUUFBUSxDQUFDO0lBQ3ZFO0VBQUM7SUFBQS9FLEdBQUE7SUFBQStDLEtBQUEsRUFFRCxTQUFBTCxpQ0FBQSxFQUEyQztNQUFBLElBQUErQyxhQUFBO01BRXpDLElBQU1DLE9BQU8sSUFBQUQsYUFBQSxHQUFHLElBQUFFLHNCQUFZLEVBQUMsSUFBSSxDQUFDdEMsS0FBSyxDQUFDdUMsS0FBSyxDQUFDLHFCQUE5QkgsYUFBQSxDQUFnQ0MsT0FBTztNQUN2RCxPQUFPLE9BQU9BLE9BQU8sS0FBSyxRQUFRLEdBQUdBLE9BQU8sR0FBRyxDQUFDO0lBQ2xEO0VBQUM7SUFBQTFGLEdBQUE7SUFBQStDLEtBQUEsRUFFRCxTQUFBOEMsT0FBQSxFQUFxQjtNQUFBLElBQUFDLG9CQUFBLEVBQUFDLHNCQUFBLEVBQUFDLG9CQUFBLEVBQUFDLHNCQUFBLEVBQUFDLG9CQUFBLEVBQUFDLHNCQUFBLEVBQUFDLG9CQUFBLEVBQUFDLHNCQUFBLEVBQUFDLG9CQUFBLEVBQUFDLHNCQUFBLEVBQUFDLG9CQUFBLEVBQUFDLHNCQUFBLEVBQUFDLHFCQUFBLEVBQUFDLHNCQUFBLEVBQUFDLHFCQUFBLEVBQUFDLHNCQUFBLEVBQUFDLHFCQUFBLEVBQUFDLHVCQUFBLEVBQUFDLG9CQUFBLEVBQUFDLG9CQUFBLEVBQUFDLG9CQUFBLEVBQUFDLG9CQUFBO01BR25CLElBQUFDLHFCQUFBLEdBQ0UsSUFBSSxDQUFDOUUsS0FBSyxDQUFDSyxZQUFZLENBQUMwRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBRHJDckQsTUFBTSxHQUFBb0QscUJBQUEsQ0FBTnBELE1BQU07UUFBRUssT0FBTyxHQUFBK0MscUJBQUEsQ0FBUC9DLE9BQU87UUFBS2lELGdDQUFnQyxPQUFBQyx5QkFBQSxDQUFBaEksT0FBQSxFQUFBNkgscUJBQUEsRUFBQXJJLFNBQUE7TUFHM0QsSUFBSXlJLG1CQUFtQixHQUFHO1FBQ3hCQyxJQUFJLEdBQUEzQixvQkFBQSxHQUFFLElBQUksQ0FBQ3pDLEtBQUssQ0FBQyxXQUFXLENBQUMsWUFBQXlDLG9CQUFBLElBQUFDLHNCQUFBLEdBQUksSUFBSSxDQUFDMUMsS0FBSyxDQUFDRyxrQkFBa0IscUJBQTdCdUMsc0JBQUEsQ0FBK0IwQixJQUFJO1FBQ3BFQyxPQUFPLEdBQUExQixvQkFBQSxHQUNMLElBQUksQ0FBQzNDLEtBQUssQ0FBQyxjQUFjLENBQUMsWUFBQTJDLG9CQUFBLElBQUFDLHNCQUFBLEdBQUksSUFBSSxDQUFDNUMsS0FBSyxDQUFDRyxrQkFBa0IscUJBQTdCeUMsc0JBQUEsQ0FBK0J5QixPQUFPO1FBQ3RFbkUsUUFBUSxHQUFBMkMsb0JBQUEsR0FDTixJQUFJLENBQUM3QyxLQUFLLENBQUMsZUFBZSxDQUFDLFlBQUE2QyxvQkFBQSxJQUFBQyxzQkFBQSxHQUFJLElBQUksQ0FBQzlDLEtBQUssQ0FBQ0csa0JBQWtCLHFCQUE3QjJDLHNCQUFBLENBQStCNUMsUUFBUTtRQUN4RW9FLFFBQVEsR0FBQXZCLG9CQUFBLEdBQ04sSUFBSSxDQUFDL0MsS0FBSyxDQUFDLGVBQWUsQ0FBQyxZQUFBK0Msb0JBQUEsSUFBQUMsc0JBQUEsR0FBSSxJQUFJLENBQUNoRCxLQUFLLENBQUNHLGtCQUFrQixxQkFBN0I2QyxzQkFBQSxDQUErQnNCLFFBQVE7UUFDeEVDLFFBQVEsR0FBQXRCLG9CQUFBLEdBQ04sSUFBSSxDQUFDakQsS0FBSyxDQUFDLGVBQWUsQ0FBQyxZQUFBaUQsb0JBQUEsSUFBQUMsc0JBQUEsR0FBSSxJQUFJLENBQUNsRCxLQUFLLENBQUNHLGtCQUFrQixxQkFBN0IrQyxzQkFBQSxDQUErQnFCO01BQ2xFLENBQUM7TUFFREosbUJBQW1CLEdBQ2pCLElBQUksQ0FBQ25FLEtBQUssQ0FBQ0UsUUFBUSxJQUFJLElBQUksR0FBQTFELE1BQUEsQ0FBQWdJLE1BQUEsS0FFbEJMLG1CQUFtQjtRQUN0QmpFLFFBQVEsRUFBRSxJQUFJLENBQUNGLEtBQUssQ0FBQ0U7TUFBUSxLQUUvQmlFLG1CQUFtQjtNQUV6QixJQUFNTSxrQkFBa0IsR0FBRztRQUN6QkMsR0FBRyxHQUFBdkIsb0JBQUEsR0FBRSxJQUFJLENBQUNuRCxLQUFLLENBQUMsZUFBZSxDQUFDLFlBQUFtRCxvQkFBQSxJQUFBQyxzQkFBQSxHQUFJLElBQUksQ0FBQ3BELEtBQUssQ0FBQ3lFLGtCQUFrQixxQkFBN0JyQixzQkFBQSxDQUErQnNCLEdBQUc7UUFDdEVDLEdBQUcsR0FBQXRCLHFCQUFBLEdBQUUsSUFBSSxDQUFDckQsS0FBSyxDQUFDLGVBQWUsQ0FBQyxZQUFBcUQscUJBQUEsSUFBQUMsc0JBQUEsR0FBSSxJQUFJLENBQUN0RCxLQUFLLENBQUN5RSxrQkFBa0IscUJBQTdCbkIsc0JBQUEsQ0FBK0JxQixHQUFHO1FBQ3RFQyxHQUFHLEdBQUFyQixxQkFBQSxHQUFFLElBQUksQ0FBQ3ZELEtBQUssQ0FBQyxlQUFlLENBQUMsWUFBQXVELHFCQUFBLElBQUFDLHNCQUFBLEdBQUksSUFBSSxDQUFDeEQsS0FBSyxDQUFDeUUsa0JBQWtCLHFCQUE3QmpCLHNCQUFBLENBQStCb0IsR0FBRztRQUN0RUMsSUFBSSxHQUFBcEIscUJBQUEsR0FBRSxJQUFJLENBQUN6RCxLQUFLLENBQUMsZ0JBQWdCLENBQUMsWUFBQXlELHFCQUFBLElBQUFDLHVCQUFBLEdBQUksSUFBSSxDQUFDMUQsS0FBSyxDQUFDeUUsa0JBQWtCLHFCQUE3QmYsdUJBQUEsQ0FBK0JtQjtNQUN2RSxDQUFDO01BRUQsSUFBTUMsdUJBQXVCLEdBQzNCLElBQUksQ0FBQzlFLEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxLQUFLLEdBQzdCLE1BQU0sSUFBQTJELG9CQUFBLEdBQ04sSUFBSSxDQUFDM0QsS0FBSyxDQUFDLFdBQVcsQ0FBQyxZQUFBMkQsb0JBQUEsR0FBSSxJQUFJLENBQUMzRCxLQUFLLENBQUM4RSx1QkFBdUI7TUFFbkUsSUFBTUMsa0JBQWtCLElBQUFuQixvQkFBQSxHQUN0QixJQUFJLENBQUM1RCxLQUFLLENBQUMsWUFBWSxDQUFDLFlBQUE0RCxvQkFBQSxHQUFJLElBQUksQ0FBQzVELEtBQUssQ0FBQytFLGtCQUFrQjtNQUMzRCxPQUNFLElBQUF0SixXQUFBLENBQUF1SixJQUFBLEVBQUNqSyxTQUFBLENBQUFtQixPQUFRLENBQUMrSSxJQUFJLEVBQUF6SSxNQUFBLENBQUFnSSxNQUFBO1FBQ1pVLFVBQVUsRUFBRSxJQUFJLENBQUNsRixLQUFLLENBQUNrRixVQUFVLEtBQUssS0FBTTtRQUM1Q0gsa0JBQWtCLEVBQUVBLGtCQUFtQjtRQUN2Q0ksaUJBQWlCLEVBQUUsSUFBSSxDQUFDbkYsS0FBSyxDQUFDbUYsaUJBQWtCO1FBQ2hEQyxxQkFBcUIsRUFBRSxJQUFJLENBQUNwRixLQUFLLENBQUNvRixxQkFBc0I7UUFDeERDLGlCQUFpQixFQUFFLElBQUksQ0FBQ3JGLEtBQUssQ0FBQ3FGLGlCQUFrQjtRQUNoRGxGLGtCQUFrQixFQUFFZ0UsbUJBQW9CO1FBQ3hDbUIsb0JBQW9CLEVBQUUsSUFBSSxDQUFDdEYsS0FBSyxDQUFDc0Ysb0JBQXFCO1FBQ3REQyxxQkFBcUIsRUFBRSxJQUFJLENBQUN2RixLQUFLLENBQUN1RixxQkFBc0I7UUFDeERkLGtCQUFrQixFQUFFQSxrQkFBbUI7UUFDdkNlLHlCQUF5QixFQUN2QixJQUFJLENBQUN4RixLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssSUFBSSxHQUM5QixxQkFBcUIsR0FDckIsSUFBSSxDQUFDQSxLQUFLLENBQUN3Rix5QkFDaEI7UUFDREMsd0JBQXdCLEdBQUE1QixvQkFBQSxHQUN0QixJQUFJLENBQUM3RCxLQUFLLENBQUMsWUFBWSxDQUFDLFlBQUE2RCxvQkFBQSxHQUFJLElBQUksQ0FBQzdELEtBQUssQ0FBQ3lGLHdCQUN4QztRQUNEWCx1QkFBdUIsRUFBRUEsdUJBQXdCO1FBQ2pEWSwyQkFBMkIsR0FBQTVCLG9CQUFBLEdBQ3pCLElBQUksQ0FBQzlELEtBQUssQ0FBQyxhQUFhLENBQUMsWUFBQThELG9CQUFBLEdBQUksSUFBSSxDQUFDOUQsS0FBSyxDQUFDMEYsMkJBQ3pDO1FBQ0RuRCxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUN2QyxLQUFLLENBQUN1QyxLQUFLLEVBQUU7VUFBQ0YsT0FBTyxFQUFFLElBQUksQ0FBQ3BELEtBQUssQ0FBQ0M7UUFBSSxDQUFDLENBQUU7UUFDdER5RyxRQUFRLEVBQUUsSUFBSSxDQUFDM0YsS0FBSyxDQUFDMkYsUUFBUztRQUM5QkMsTUFBTSxFQUFFLElBQUksQ0FBQzVGLEtBQUssQ0FBQzRGLE1BQU87UUFDMUJDLFFBQVEsRUFBRSxJQUFJLENBQUM3RixLQUFLLENBQUM2RixRQUFTO1FBQzlCQyxhQUFhLEVBQUUsSUFBSSxDQUFDOUYsS0FBSyxDQUFDOEYsYUFBYztRQUN4Q0MsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDL0YsS0FBSyxDQUFDK0YsZ0JBQWlCO1FBQzlDQyxhQUFhLEVBQUUsSUFBSSxDQUFDaEcsS0FBSyxDQUFDZ0csYUFBYztRQUN4Q0MsY0FBYyxFQUFFLElBQUksQ0FBQ2pHLEtBQUssQ0FBQ2lHLGNBQWU7UUFDMUNDLFdBQVcsRUFBRSxJQUFJLENBQUNsRyxLQUFLLENBQUNrRyxXQUFZO1FBQ3BDQyxtQkFBbUIsRUFBRSxJQUFJLENBQUNuRyxLQUFLLENBQUNtRyxtQkFBb0I7UUFDcEQvRixPQUFPLEVBQUUsSUFBSSxDQUFDSixLQUFLLENBQUNJLE9BQVE7UUFDNUJnRyxTQUFTLEVBQ1AsSUFBSSxDQUFDcEcsS0FBSyxDQUFDb0csU0FBUyxLQUFLLEtBQUssSUFBSSxJQUFJLENBQUNwRyxLQUFLLENBQUNtQixPQUFPLEtBQUtrRixTQUMxRDtRQUNEQyxHQUFHLEVBQUUsSUFBSSxDQUFDdEcsS0FBSyxDQUFDdUc7TUFBUSxHQUNwQnRDLGdDQUFnQztRQUFBdUMsUUFBQSxHQUNuQyxJQUFJLENBQUN4RyxLQUFLLENBQUN3RyxRQUFRLEVBQ25CQyxPQUFPLEdBQ04sSUFBQWhMLFdBQUEsQ0FBQWlMLEdBQUEsRUFBQ3RMLGtCQUFBLENBQUF1TCxxQkFBcUI7VUFBQ0MsS0FBSyxFQUFDLE1BQU07VUFBQ3hHLE9BQU8sRUFBRSxJQUFJLENBQUNKLEtBQUssQ0FBQ0k7UUFBUSxDQUFFLENBQUMsR0FDakUsSUFBSTtNQUFBLEVBQ0ssQ0FBQztJQUVwQjtFQUFDO0lBQUF6RCxHQUFBO0lBQUErQyxLQUFBLEVBRUQsU0FBQW1ILG1CQUFtQkMsU0FBZ0IsRUFBRUMsU0FBZ0IsRUFBRTtNQUFBLElBQUFDLGNBQUEsRUFBQUMsY0FBQTtNQUNyRCxJQUFJLENBQUNoSSxLQUFLLENBQUNLLFlBQVksQ0FBQzRILFNBQVMsQ0FBQyxJQUFJLENBQUMxSCx5QkFBeUIsQ0FBQyxDQUFDLENBQUM7TUFDbkUsSUFDRSxJQUFJLENBQUNRLEtBQUssQ0FBQ0UsUUFBUSxLQUFLNEcsU0FBUyxDQUFDNUcsUUFBUSxJQUUxQyxFQUFBOEcsY0FBQSxPQUFBMUUsc0JBQVksRUFBQ3dFLFNBQVMsQ0FBQ3ZFLEtBQUssQ0FBQyxxQkFBN0J5RSxjQUFBLENBQStCM0UsT0FBTyxRQUFBNEUsY0FBQSxHQUVwQyxJQUFBM0Usc0JBQVksRUFBQyxJQUFJLENBQUN0QyxLQUFLLENBQUN1QyxLQUFLLENBQUMscUJBQTlCMEUsY0FBQSxDQUFnQzVFLE9BQU8sR0FDekM7UUFDQSxJQUFJLENBQUN0QixnQkFBZ0IsQ0FBQyxHQUFHLENBQUM7TUFDNUI7SUFDRjtFQUFDO0lBQUFwRSxHQUFBO0lBQUErQyxLQUFBLEVBRUQsU0FBQXlILHFCQUFBLEVBQTZCO01BQzNCLElBQUksQ0FBQ2xJLEtBQUssQ0FBQ0ssWUFBWSxDQUFDOEgsS0FBSyxDQUFDLENBQUM7SUFDakM7RUFBQztFQUFBLE9BQUEvSSxnQkFBQTtBQUFBLEVBeEw0QjlDLEtBQUssQ0FBQzhMLFNBQVM7QUEyTDlDLElBQU1DLFNBQVMsR0FBSS9MLEtBQUssQ0FBQ2dNLFVBQVUsQ0FBQyxVQUFDdkgsS0FBSyxFQUFFc0csR0FBRztFQUFBLE9BQzdDLElBQUE3SyxXQUFBLENBQUFpTCxHQUFBLEVBQUNySSxnQkFBZ0IsRUFBQTdCLE1BQUEsQ0FBQWdJLE1BQUEsS0FBS3hFLEtBQUs7SUFBRXVHLE9BQU8sRUFBRUQ7RUFBSSxFQUFFLENBQUM7QUFBQSxDQUM5QyxDQUEwRTtBQUUzRWdCLFNBQVMsQ0FBQ0UsV0FBVyxHQUFHLGtCQUFrQjtBQUUxQ0MsTUFBTSxDQUFDQyxPQUFPLEdBQUdKLFNBQVMifQ==