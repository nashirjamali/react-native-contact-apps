0d8a36022b4d04b618923fa5bf62e1f8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ContactItem;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _Typography = _interopRequireDefault(require("./Typography"));
var _UserAvatar = _interopRequireDefault(require("./UserAvatar"));
var _jsxRuntime = require("react/jsx-runtime");
function cov_1e9hwjvo5j() {
  var path = "D:\\riset\\ReactNative\\ContactApps\\src\\components\\ContactItem.tsx";
  var hash = "b717ceed35f6e75e653bc4752507929bf8d11a26";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\riset\\ReactNative\\ContactApps\\src\\components\\ContactItem.tsx",
    statementMap: {
      "0": {
        start: {
          line: 13,
          column: 39
        },
        end: {
          line: 13,
          column: 46
        }
      },
      "1": {
        start: {
          line: 15,
          column: 2
        },
        end: {
          line: 30,
          column: 4
        }
      },
      "2": {
        start: {
          line: 33,
          column: 15
        },
        end: {
          line: 58,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "ContactItem",
        decl: {
          start: {
            line: 12,
            column: 24
          },
          end: {
            line: 12,
            column: 35
          }
        },
        loc: {
          start: {
            line: 12,
            column: 74
          },
          end: {
            line: 31,
            column: 1
          }
        },
        line: 12
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    f: {
      "0": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b717ceed35f6e75e653bc4752507929bf8d11a26"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_1e9hwjvo5j = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1e9hwjvo5j();
function ContactItem(_ref) {
  var contact = _ref.contact,
    onPress = _ref.onPress;
  cov_1e9hwjvo5j().f[0]++;
  var _ref2 = (cov_1e9hwjvo5j().s[0]++, contact),
    firstName = _ref2.firstName,
    lastName = _ref2.lastName,
    photo = _ref2.photo;
  cov_1e9hwjvo5j().s[1]++;
  return (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
    style: styles.container,
    onPress: onPress,
    testID: "contact-item",
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.wrapper,
      children: [(0, _jsxRuntime.jsx)(_UserAvatar.default, {
        firstName: firstName,
        lastName: lastName,
        photo: photo
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.textWrapper,
        children: (0, _jsxRuntime.jsxs)(_Typography.default, {
          children: [firstName, " ", lastName]
        })
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.divider
    })]
  });
}
var styles = (cov_1e9hwjvo5j().s[2]++, _reactNative.StyleSheet.create({
  container: {
    paddingHorizontal: 20
  },
  wrapper: {
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'center',
    gap: 10
  },
  textWrapper: {
    display: 'flex',
    flexDirection: 'column'
  },
  image: {
    height: 50,
    width: 50,
    borderRadius: 9999
  },
  divider: {
    height: 2,
    backgroundColor: '#71717a',
    opacity: 0.1,
    marginVertical: 16
  }
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9UeXBvZ3JhcGh5IiwiX1VzZXJBdmF0YXIiLCJfanN4UnVudGltZSIsImNvdl8xZTlod2p2bzVqIiwicGF0aCIsImhhc2giLCJnbG9iYWwiLCJGdW5jdGlvbiIsImdjdiIsImNvdmVyYWdlRGF0YSIsInN0YXRlbWVudE1hcCIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsImZuTWFwIiwibmFtZSIsImRlY2wiLCJsb2MiLCJicmFuY2hNYXAiLCJzIiwiZiIsImIiLCJfY292ZXJhZ2VTY2hlbWEiLCJjb3ZlcmFnZSIsImFjdHVhbENvdmVyYWdlIiwiQ29udGFjdEl0ZW0iLCJfcmVmIiwiY29udGFjdCIsIm9uUHJlc3MiLCJfcmVmMiIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwicGhvdG8iLCJqc3hzIiwiVG91Y2hhYmxlT3BhY2l0eSIsInN0eWxlIiwic3R5bGVzIiwiY29udGFpbmVyIiwidGVzdElEIiwiY2hpbGRyZW4iLCJWaWV3Iiwid3JhcHBlciIsImpzeCIsImRlZmF1bHQiLCJ0ZXh0V3JhcHBlciIsImRpdmlkZXIiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwicGFkZGluZ0hvcml6b250YWwiLCJkaXNwbGF5IiwiZmxleERpcmVjdGlvbiIsImFsaWduSXRlbXMiLCJnYXAiLCJpbWFnZSIsImhlaWdodCIsIndpZHRoIiwiYm9yZGVyUmFkaXVzIiwiYmFja2dyb3VuZENvbG9yIiwib3BhY2l0eSIsIm1hcmdpblZlcnRpY2FsIl0sInNvdXJjZXMiOlsiQ29udGFjdEl0ZW0udHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1N0eWxlU2hlZXQsIFZpZXcsIFRvdWNoYWJsZU9wYWNpdHl9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQge0NvbnRhY3R9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJy4vVHlwb2dyYXBoeSc7XG5pbXBvcnQgVXNlckF2YXRhciBmcm9tICcuL1VzZXJBdmF0YXInO1xuXG50eXBlIENvbnRhY3RJdGVtUHJvcHMgPSB7XG4gIGNvbnRhY3Q6IENvbnRhY3Q7XG4gIG9uUHJlc3M/OiAoKSA9PiB2b2lkO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ29udGFjdEl0ZW0oe2NvbnRhY3QsIG9uUHJlc3N9OiBDb250YWN0SXRlbVByb3BzKSB7XG4gIGNvbnN0IHtmaXJzdE5hbWUsIGxhc3ROYW1lLCBwaG90b30gPSBjb250YWN0O1xuXG4gIHJldHVybiAoXG4gICAgPFRvdWNoYWJsZU9wYWNpdHlcbiAgICAgIHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfVxuICAgICAgb25QcmVzcz17b25QcmVzc31cbiAgICAgIHRlc3RJRD1cImNvbnRhY3QtaXRlbVwiPlxuICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy53cmFwcGVyfT5cbiAgICAgICAgPFVzZXJBdmF0YXIgZmlyc3ROYW1lPXtmaXJzdE5hbWV9IGxhc3ROYW1lPXtsYXN0TmFtZX0gcGhvdG89e3Bob3RvfSAvPlxuICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLnRleHRXcmFwcGVyfT5cbiAgICAgICAgICA8VHlwb2dyYXBoeT5cbiAgICAgICAgICAgIHtmaXJzdE5hbWV9IHtsYXN0TmFtZX1cbiAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgIDwvVmlldz5cbiAgICAgIDwvVmlldz5cbiAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuZGl2aWRlcn0gLz5cbiAgICA8L1RvdWNoYWJsZU9wYWNpdHk+XG4gICk7XG59XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgY29udGFpbmVyOiB7XG4gICAgcGFkZGluZ0hvcml6b250YWw6IDIwLFxuICB9LFxuICB3cmFwcGVyOiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGdhcDogMTAsXG4gIH0sXG4gIHRleHRXcmFwcGVyOiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICB9LFxuICBpbWFnZToge1xuICAgIGhlaWdodDogNTAsXG4gICAgd2lkdGg6IDUwLFxuICAgIGJvcmRlclJhZGl1czogOTk5OSxcbiAgfSxcbiAgZGl2aWRlcjoge1xuICAgIGhlaWdodDogMixcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjNzE3MTdhJyxcbiAgICBvcGFjaXR5OiAwLjEsXG4gICAgbWFyZ2luVmVydGljYWw6IDE2LFxuICB9LFxufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsV0FBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsV0FBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQXNDLElBQUFJLFdBQUEsR0FBQUosT0FBQTtBQUFBLFNBQUFLLGVBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLE1BQUEsT0FBQUMsUUFBQTtFQUFBLElBQUFDLEdBQUE7RUFBQSxJQUFBQyxZQUFBO0lBQUFMLElBQUE7SUFBQU0sWUFBQTtNQUFBO1FBQUFDLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFB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