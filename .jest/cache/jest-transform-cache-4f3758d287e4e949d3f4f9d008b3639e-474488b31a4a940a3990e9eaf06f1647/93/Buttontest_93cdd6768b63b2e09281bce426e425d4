211a72f7c5a970ef76f33b72e0f42540
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Button = _interopRequireDefault(require("../Button"));
var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));
var _jsxRuntime = require("react/jsx-runtime");
describe('Button', function () {
  test('renders correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {})),
      getByTestId = _render.getByTestId;
    var button = getByTestId('button');
    var tree = _reactTestRenderer.default.create((0, _jsxRuntime.jsx)(_Button.default, {})).toJSON();
    expect(tree).toMatchSnapshot();
    expect(button).toBeTruthy();
  });
  test('executes onPress callback when pressed', function () {
    var onPressMock = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: onPressMock
      })),
      getByTestId = _render2.getByTestId;
    var button = getByTestId('button');
    _reactNative.fireEvent.press(button);
    expect(onPressMock).toHaveBeenCalledTimes(1);
  });
  test('applies disabled style when disabled prop is true', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        disabled: true
      })),
      getByTestId = _render3.getByTestId;
    var button = getByTestId('button');
    expect(button.props.style[1]).toEqual({
      backgroundColor: '#3f3f46'
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9CdXR0b24iLCJfcmVhY3RUZXN0UmVuZGVyZXIiLCJfanN4UnVudGltZSIsImRlc2NyaWJlIiwidGVzdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJkZWZhdWx0IiwiZ2V0QnlUZXN0SWQiLCJidXR0b24iLCJ0cmVlIiwicmVuZGVyZXIiLCJjcmVhdGUiLCJ0b0pTT04iLCJleHBlY3QiLCJ0b01hdGNoU25hcHNob3QiLCJ0b0JlVHJ1dGh5Iiwib25QcmVzc01vY2siLCJqZXN0IiwiZm4iLCJfcmVuZGVyMiIsIm9uUHJlc3MiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsIl9yZW5kZXIzIiwiZGlzYWJsZWQiLCJwcm9wcyIsInN0eWxlIiwidG9FcXVhbCIsImJhY2tncm91bmRDb2xvciJdLCJzb3VyY2VzIjpbIkJ1dHRvbi50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtyZW5kZXIsIGZpcmVFdmVudH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi9CdXR0b24nO1xuXG5pbXBvcnQgcmVuZGVyZXIgZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcic7XG5cbmRlc2NyaWJlKCdCdXR0b24nLCAoKSA9PiB7XG4gIHRlc3QoJ3JlbmRlcnMgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPEJ1dHRvbiAvPik7XG5cbiAgICBjb25zdCBidXR0b24gPSBnZXRCeVRlc3RJZCgnYnV0dG9uJyk7XG5cbiAgICBjb25zdCB0cmVlID0gcmVuZGVyZXIuY3JlYXRlKDxCdXR0b24gLz4pLnRvSlNPTigpO1xuICAgIGV4cGVjdCh0cmVlKS50b01hdGNoU25hcHNob3QoKTtcblxuICAgIGV4cGVjdChidXR0b24pLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgdGVzdCgnZXhlY3V0ZXMgb25QcmVzcyBjYWxsYmFjayB3aGVuIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgY29uc3Qgb25QcmVzc01vY2sgPSBqZXN0LmZuKCk7XG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8QnV0dG9uIG9uUHJlc3M9e29uUHJlc3NNb2NrfSAvPik7XG4gICAgY29uc3QgYnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2J1dHRvbicpO1xuICAgIGZpcmVFdmVudC5wcmVzcyhidXR0b24pO1xuICAgIGV4cGVjdChvblByZXNzTW9jaykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICB9KTtcblxuICB0ZXN0KCdhcHBsaWVzIGRpc2FibGVkIHN0eWxlIHdoZW4gZGlzYWJsZWQgcHJvcCBpcyB0cnVlJywgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPEJ1dHRvbiBkaXNhYmxlZCAvPik7XG4gICAgY29uc3QgYnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2J1dHRvbicpO1xuICAgIGV4cGVjdChidXR0b24ucHJvcHMuc3R5bGVbMV0pLnRvRXF1YWwoe2JhY2tncm91bmRDb2xvcjogJyMzZjNmNDYnfSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBRyxrQkFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQTJDLElBQUFJLFdBQUEsR0FBQUosT0FBQTtBQUUzQ0ssUUFBUSxDQUFDLFFBQVEsRUFBRSxZQUFNO0VBQ3ZCQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsWUFBTTtJQUM5QixJQUFBQyxPQUFBLEdBQXNCLElBQUFDLG1CQUFNLEVBQUMsSUFBQUosV0FBQSxDQUFBSyxHQUFBLEVBQUNQLE9BQUEsQ0FBQVEsT0FBTSxJQUFFLENBQUMsQ0FBQztNQUFqQ0MsV0FBVyxHQUFBSixPQUFBLENBQVhJLFdBQVc7SUFFbEIsSUFBTUMsTUFBTSxHQUFHRCxXQUFXLENBQUMsUUFBUSxDQUFDO0lBRXBDLElBQU1FLElBQUksR0FBR0MsMEJBQVEsQ0FBQ0MsTUFBTSxDQUFDLElBQUFYLFdBQUEsQ0FBQUssR0FBQSxFQUFDUCxPQUFBLENBQUFRLE9BQU0sSUFBRSxDQUFDLENBQUMsQ0FBQ00sTUFBTSxDQUFDLENBQUM7SUFDakRDLE1BQU0sQ0FBQ0osSUFBSSxDQUFDLENBQUNLLGVBQWUsQ0FBQyxDQUFDO0lBRTlCRCxNQUFNLENBQUNMLE1BQU0sQ0FBQyxDQUFDTyxVQUFVLENBQUMsQ0FBQztFQUM3QixDQUFDLENBQUM7RUFFRmIsSUFBSSxDQUFDLHdDQUF3QyxFQUFFLFlBQU07SUFDbkQsSUFBTWMsV0FBVyxHQUFHQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLElBQUFDLFFBQUEsR0FBc0IsSUFBQWYsbUJBQU0sRUFBQyxJQUFBSixXQUFBLENBQUFLLEdBQUEsRUFBQ1AsT0FBQSxDQUFBUSxPQUFNO1FBQUNjLE9BQU8sRUFBRUo7TUFBWSxDQUFFLENBQUMsQ0FBQztNQUF2RFQsV0FBVyxHQUFBWSxRQUFBLENBQVhaLFdBQVc7SUFDbEIsSUFBTUMsTUFBTSxHQUFHRCxXQUFXLENBQUMsUUFBUSxDQUFDO0lBQ3BDYyxzQkFBUyxDQUFDQyxLQUFLLENBQUNkLE1BQU0sQ0FBQztJQUN2QkssTUFBTSxDQUFDRyxXQUFXLENBQUMsQ0FBQ08scUJBQXFCLENBQUMsQ0FBQyxDQUFDO0VBQzlDLENBQUMsQ0FBQztFQUVGckIsSUFBSSxDQUFDLG1EQUFtRCxFQUFFLFlBQU07SUFDOUQsSUFBQXNCLFFBQUEsR0FBc0IsSUFBQXBCLG1CQUFNLEVBQUMsSUFBQUosV0FBQSxDQUFBSyxHQUFBLEVBQUNQLE9BQUEsQ0FBQVEsT0FBTTtRQUFDbUIsUUFBUTtNQUFBLENBQUUsQ0FBQyxDQUFDO01BQTFDbEIsV0FBVyxHQUFBaUIsUUFBQSxDQUFYakIsV0FBVztJQUNsQixJQUFNQyxNQUFNLEdBQUdELFdBQVcsQ0FBQyxRQUFRLENBQUM7SUFDcENNLE1BQU0sQ0FBQ0wsTUFBTSxDQUFDa0IsS0FBSyxDQUFDQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsT0FBTyxDQUFDO01BQUNDLGVBQWUsRUFBRTtJQUFTLENBQUMsQ0FBQztFQUNyRSxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==