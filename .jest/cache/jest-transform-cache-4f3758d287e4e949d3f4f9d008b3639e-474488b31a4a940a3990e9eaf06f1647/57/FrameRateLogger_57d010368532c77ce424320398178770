49724c5ef26c5b6a5175d2def7642e2c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _NativeFrameRateLogger = _interopRequireDefault(require("./NativeFrameRateLogger"));
var invariant = require('invariant');
var FrameRateLogger = {
  setGlobalOptions: function setGlobalOptions(options) {
    if (options.debug !== undefined) {
      invariant(_NativeFrameRateLogger.default, 'Trying to debug FrameRateLogger without the native module!');
    }
    if (_NativeFrameRateLogger.default) {
      var optionsClone = {
        debug: !!options.debug,
        reportStackTraces: !!options.reportStackTraces
      };
      _NativeFrameRateLogger.default.setGlobalOptions(optionsClone);
    }
  },
  setContext: function setContext(context) {
    _NativeFrameRateLogger.default && _NativeFrameRateLogger.default.setContext(context);
  },
  beginScroll: function beginScroll() {
    _NativeFrameRateLogger.default && _NativeFrameRateLogger.default.beginScroll();
  },
  endScroll: function endScroll() {
    _NativeFrameRateLogger.default && _NativeFrameRateLogger.default.endScroll();
  }
};
module.exports = FrameRateLogger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfTmF0aXZlRnJhbWVSYXRlTG9nZ2VyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJpbnZhcmlhbnQiLCJGcmFtZVJhdGVMb2dnZXIiLCJzZXRHbG9iYWxPcHRpb25zIiwib3B0aW9ucyIsImRlYnVnIiwidW5kZWZpbmVkIiwiTmF0aXZlRnJhbWVSYXRlTG9nZ2VyIiwib3B0aW9uc0Nsb25lIiwicmVwb3J0U3RhY2tUcmFjZXMiLCJzZXRDb250ZXh0IiwiY29udGV4dCIsImJlZ2luU2Nyb2xsIiwiZW5kU2Nyb2xsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkZyYW1lUmF0ZUxvZ2dlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKi9cblxuaW1wb3J0IE5hdGl2ZUZyYW1lUmF0ZUxvZ2dlciBmcm9tICcuL05hdGl2ZUZyYW1lUmF0ZUxvZ2dlcic7XG5cbmNvbnN0IGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG4vKipcbiAqIEZsb3cgQVBJIGZvciBuYXRpdmUgRnJhbWVSYXRlTG9nZ2VyIG1vZHVsZS4gSWYgdGhlIG5hdGl2ZSBtb2R1bGUgaXMgbm90IGluc3RhbGxlZCwgZnVuY3Rpb24gY2FsbHNcbiAqIGFyZSBqdXN0IG5vLW9wcy5cbiAqXG4gKiBUeXBpY2FsIGJlaGF2aW9yIGlzIHRoYXQgYHNldENvbnRleHRgIGlzIGNhbGxlZCB3aGVuIGEgbmV3IHNjcmVlbiBpcyBsb2FkZWQgKGUuZy4gdmlhIGFcbiAqIG5hdmlnYXRpb24gaW50ZWdyYXRpb24pLCBhbmQgdGhlbiBgYmVnaW5TY3JvbGxgIGlzIGNhbGxlZCBieSBgU2Nyb2xsUmVzcG9uZGVyYCBhdCB3aGljaCBwb2ludCB0aGVcbiAqIG5hdGl2ZSBtb2R1bGUgdGhlbiBiZWdpbnMgdHJhY2tpbmcgZnJhbWUgZHJvcHMuIFdoZW4gYFNjcm9sbFJlc3BvbmRlcmAgY2FsbHMgYGVuZFNjcm9sbGAsIHRoZVxuICogbmF0aXZlIG1vZHVsZSBnYXRoZXJzIHVwIGFsbCBpdCdzIGZyYW1lIGRyb3AgZGF0YSBhbmQgcmVwb3J0cyBpdCB2aWEgYW4gYW5hbHl0aWNzIHBpcGVsaW5lIGZvclxuICogYW5hbHlzaXMuXG4gKlxuICogTm90ZSB0aGF0IGBiZWdpblNjcm9sbGAgbWF5IGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyBieSBgU2Nyb2xsUmVzcG9uZGVyYCAtIHVuY2xlYXIgaWYgdGhhdCdzIGFcbiAqIGJ1ZywgYnV0IHRoZSBuYXRpdmUgbW9kdWxlIHNob3VsZCBiZSByb2J1c3QgdG8gdGhhdC5cbiAqXG4gKiBJbiB0aGUgZnV0dXJlIHdlIG1heSBhZGQgc3VwcG9ydCBmb3IgdHJhY2tpbmcgZnJhbWUgZHJvcHMgaW4gb3RoZXIgdHlwZXMgb2YgaW50ZXJhY3Rpb25zIGJleW9uZFxuICogc2Nyb2xsaW5nLlxuICovXG5jb25zdCBGcmFtZVJhdGVMb2dnZXIgPSB7XG4gIC8qKlxuICAgKiBFbmFibGUgYGRlYnVnYCB0byBzZWUgbG9jYWwgbG9ncyBvZiB3aGF0J3MgZ29pbmcgb24uIGByZXBvcnRTdGFja1RyYWNlc2Agd2lsbCBncmFiIHN0YWNrIHRyYWNlc1xuICAgKiBkdXJpbmcgVUkgdGhyZWFkIHN0YWxscyBhbmQgdXBsb2FkIHRoZW0gaWYgdGhlIG5hdGl2ZSBtb2R1bGUgc3VwcG9ydHMgaXQuXG4gICAqL1xuICBzZXRHbG9iYWxPcHRpb25zOiBmdW5jdGlvbiAob3B0aW9uczoge1xuICAgIGRlYnVnPzogYm9vbGVhbixcbiAgICByZXBvcnRTdGFja1RyYWNlcz86IGJvb2xlYW4sXG4gICAgLi4uXG4gIH0pIHtcbiAgICBpZiAob3B0aW9ucy5kZWJ1ZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIE5hdGl2ZUZyYW1lUmF0ZUxvZ2dlcixcbiAgICAgICAgJ1RyeWluZyB0byBkZWJ1ZyBGcmFtZVJhdGVMb2dnZXIgd2l0aG91dCB0aGUgbmF0aXZlIG1vZHVsZSEnLFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKE5hdGl2ZUZyYW1lUmF0ZUxvZ2dlcikge1xuICAgICAgLy8gTmVlZHMgdG8gY2xvbmUgdGhlIG9iamVjdCBmaXJzdCB0byBhdm9pZCBtb2RpZnlpbmcgdGhlIGFyZ3VtZW50LlxuICAgICAgY29uc3Qgb3B0aW9uc0Nsb25lID0ge1xuICAgICAgICBkZWJ1ZzogISFvcHRpb25zLmRlYnVnLFxuICAgICAgICByZXBvcnRTdGFja1RyYWNlczogISFvcHRpb25zLnJlcG9ydFN0YWNrVHJhY2VzLFxuICAgICAgfTtcbiAgICAgIE5hdGl2ZUZyYW1lUmF0ZUxvZ2dlci5zZXRHbG9iYWxPcHRpb25zKG9wdGlvbnNDbG9uZSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBNdXN0IGNhbGwgYHNldENvbnRleHRgIGJlZm9yZSBhbnkgZXZlbnRzIGNhbiBiZSBwcm9wZXJseSB0cmFja2VkLCB3aGljaCBpcyBkb25lIGF1dG9tYXRpY2FsbHlcbiAgICogaW4gYEFwcFJlZ2lzdHJ5YCwgYnV0IG5hdmlnYXRpb24gaXMgYWxzbyBhIGNvbW1vbiBwbGFjZSB0byBob29rIGluLlxuICAgKi9cbiAgc2V0Q29udGV4dDogZnVuY3Rpb24gKGNvbnRleHQ6IHN0cmluZykge1xuICAgIE5hdGl2ZUZyYW1lUmF0ZUxvZ2dlciAmJiBOYXRpdmVGcmFtZVJhdGVMb2dnZXIuc2V0Q29udGV4dChjb250ZXh0KTtcbiAgfSxcblxuICAvKipcbiAgICogQ2FsbGVkIGluIGBTY3JvbGxSZXNwb25kZXJgIHNvIGFueSBjb21wb25lbnQgdGhhdCB1c2VzIHRoYXQgbW9kdWxlIHdpbGwgaGFuZGxlIHRoaXNcbiAgICogYXV0b21hdGljYWxseS5cbiAgICovXG4gIGJlZ2luU2Nyb2xsKCkge1xuICAgIE5hdGl2ZUZyYW1lUmF0ZUxvZ2dlciAmJiBOYXRpdmVGcmFtZVJhdGVMb2dnZXIuYmVnaW5TY3JvbGwoKTtcbiAgfSxcblxuICAvKipcbiAgICogQ2FsbGVkIGluIGBTY3JvbGxSZXNwb25kZXJgIHNvIGFueSBjb21wb25lbnQgdGhhdCB1c2VzIHRoYXQgbW9kdWxlIHdpbGwgaGFuZGxlIHRoaXNcbiAgICogYXV0b21hdGljYWxseS5cbiAgICovXG4gIGVuZFNjcm9sbCgpIHtcbiAgICBOYXRpdmVGcmFtZVJhdGVMb2dnZXIgJiYgTmF0aXZlRnJhbWVSYXRlTG9nZ2VyLmVuZFNjcm9sbCgpO1xuICB9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGcmFtZVJhdGVMb2dnZXI7XG4iXSwibWFwcGluZ3MiOiI7QUFVQSxJQUFBQSxzQkFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBTUMsU0FBUyxHQUFHRCxPQUFPLENBQUMsV0FBVyxDQUFDO0FBa0J0QyxJQUFNRSxlQUFlLEdBQUc7RUFLdEJDLGdCQUFnQixFQUFFLFNBQUFBLGlCQUFVQyxPQUkzQixFQUFFO0lBQ0QsSUFBSUEsT0FBTyxDQUFDQyxLQUFLLEtBQUtDLFNBQVMsRUFBRTtNQUMvQkwsU0FBUyxDQUNQTSw4QkFBcUIsRUFDckIsNERBQ0YsQ0FBQztJQUNIO0lBQ0EsSUFBSUEsOEJBQXFCLEVBQUU7TUFFekIsSUFBTUMsWUFBWSxHQUFHO1FBQ25CSCxLQUFLLEVBQUUsQ0FBQyxDQUFDRCxPQUFPLENBQUNDLEtBQUs7UUFDdEJJLGlCQUFpQixFQUFFLENBQUMsQ0FBQ0wsT0FBTyxDQUFDSztNQUMvQixDQUFDO01BQ0RGLDhCQUFxQixDQUFDSixnQkFBZ0IsQ0FBQ0ssWUFBWSxDQUFDO0lBQ3REO0VBQ0YsQ0FBQztFQU1ERSxVQUFVLEVBQUUsU0FBQUEsV0FBVUMsT0FBZSxFQUFFO0lBQ3JDSiw4QkFBcUIsSUFBSUEsOEJBQXFCLENBQUNHLFVBQVUsQ0FBQ0MsT0FBTyxDQUFDO0VBQ3BFLENBQUM7RUFNREMsV0FBVyxXQUFBQSxZQUFBLEVBQUc7SUFDWkwsOEJBQXFCLElBQUlBLDhCQUFxQixDQUFDSyxXQUFXLENBQUMsQ0FBQztFQUM5RCxDQUFDO0VBTURDLFNBQVMsV0FBQUEsVUFBQSxFQUFHO0lBQ1ZOLDhCQUFxQixJQUFJQSw4QkFBcUIsQ0FBQ00sU0FBUyxDQUFDLENBQUM7RUFDNUQ7QUFDRixDQUFDO0FBRURDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHYixlQUFlIn0=