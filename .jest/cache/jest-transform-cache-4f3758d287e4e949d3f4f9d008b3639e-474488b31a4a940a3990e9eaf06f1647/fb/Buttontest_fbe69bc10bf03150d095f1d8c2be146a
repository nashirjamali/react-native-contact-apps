c3d8a87d212a4f5a5c2684c31904aaa5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Button = _interopRequireDefault(require("../Button"));
var _jsxRuntime = require("react/jsx-runtime");
describe('Button', function () {
  test('renders correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {})),
      getByTestId = _render.getByTestId;
    _reactNative.screen.debug();
  });
  test('executes onPress callback when pressed', function () {
    var onPressMock = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: onPressMock
      })),
      getByTestId = _render2.getByTestId;
    var button = getByTestId('button');
    _reactNative.fireEvent.press(button);
    expect(onPressMock).toHaveBeenCalledTimes(1);
  });
  test('applies disabled style when disabled prop is true', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        disabled: true
      })),
      getByTestId = _render3.getByTestId;
    var button = getByTestId('button');
    expect(button.props.style[1]).toEqual({
      backgroundColor: '#3f3f46'
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9CdXR0b24iLCJfanN4UnVudGltZSIsImRlc2NyaWJlIiwidGVzdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJkZWZhdWx0IiwiZ2V0QnlUZXN0SWQiLCJzY3JlZW4iLCJkZWJ1ZyIsIm9uUHJlc3NNb2NrIiwiamVzdCIsImZuIiwiX3JlbmRlcjIiLCJvblByZXNzIiwiYnV0dG9uIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJfcmVuZGVyMyIsImRpc2FibGVkIiwicHJvcHMiLCJzdHlsZSIsInRvRXF1YWwiLCJiYWNrZ3JvdW5kQ29sb3IiXSwic291cmNlcyI6WyJCdXR0b24udGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7cmVuZGVyLCBmaXJlRXZlbnQsIHNjcmVlbn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi9CdXR0b24nO1xuXG5pbXBvcnQgcmVuZGVyZXIgZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcic7XG5cbmRlc2NyaWJlKCdCdXR0b24nLCAoKSA9PiB7XG4gIHRlc3QoJ3JlbmRlcnMgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPEJ1dHRvbiAvPik7XG4gICAgLy8gY29uc3QgYnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2J1dHRvbicpO1xuICAgIHNjcmVlbi5kZWJ1ZygpO1xuICAgIC8vIGV4cGVjdChidXR0b24pLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgdGVzdCgnZXhlY3V0ZXMgb25QcmVzcyBjYWxsYmFjayB3aGVuIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgY29uc3Qgb25QcmVzc01vY2sgPSBqZXN0LmZuKCk7XG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8QnV0dG9uIG9uUHJlc3M9e29uUHJlc3NNb2NrfSAvPik7XG4gICAgY29uc3QgYnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2J1dHRvbicpO1xuICAgIGZpcmVFdmVudC5wcmVzcyhidXR0b24pO1xuICAgIGV4cGVjdChvblByZXNzTW9jaykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICB9KTtcblxuICB0ZXN0KCdhcHBsaWVzIGRpc2FibGVkIHN0eWxlIHdoZW4gZGlzYWJsZWQgcHJvcCBpcyB0cnVlJywgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPEJ1dHRvbiBkaXNhYmxlZCAvPik7XG4gICAgY29uc3QgYnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2J1dHRvbicpO1xuICAgIGV4cGVjdChidXR0b24ucHJvcHMuc3R5bGVbMV0pLnRvRXF1YWwoe2JhY2tncm91bmRDb2xvcjogJyMzZjNmNDYnfSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBK0IsSUFBQUcsV0FBQSxHQUFBSCxPQUFBO0FBSS9CSSxRQUFRLENBQUMsUUFBUSxFQUFFLFlBQU07RUFDdkJDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxZQUFNO0lBQzlCLElBQUFDLE9BQUEsR0FBc0IsSUFBQUMsbUJBQU0sRUFBQyxJQUFBSixXQUFBLENBQUFLLEdBQUEsRUFBQ04sT0FBQSxDQUFBTyxPQUFNLElBQUUsQ0FBQyxDQUFDO01BQWpDQyxXQUFXLEdBQUFKLE9BQUEsQ0FBWEksV0FBVztJQUVsQkMsbUJBQU0sQ0FBQ0MsS0FBSyxDQUFDLENBQUM7RUFFaEIsQ0FBQyxDQUFDO0VBRUZQLElBQUksQ0FBQyx3Q0FBd0MsRUFBRSxZQUFNO0lBQ25ELElBQU1RLFdBQVcsR0FBR0MsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUM3QixJQUFBQyxRQUFBLEdBQXNCLElBQUFULG1CQUFNLEVBQUMsSUFBQUosV0FBQSxDQUFBSyxHQUFBLEVBQUNOLE9BQUEsQ0FBQU8sT0FBTTtRQUFDUSxPQUFPLEVBQUVKO01BQVksQ0FBRSxDQUFDLENBQUM7TUFBdkRILFdBQVcsR0FBQU0sUUFBQSxDQUFYTixXQUFXO0lBQ2xCLElBQU1RLE1BQU0sR0FBR1IsV0FBVyxDQUFDLFFBQVEsQ0FBQztJQUNwQ1Msc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDRixNQUFNLENBQUM7SUFDdkJHLE1BQU0sQ0FBQ1IsV0FBVyxDQUFDLENBQUNTLHFCQUFxQixDQUFDLENBQUMsQ0FBQztFQUM5QyxDQUFDLENBQUM7RUFFRmpCLElBQUksQ0FBQyxtREFBbUQsRUFBRSxZQUFNO0lBQzlELElBQUFrQixRQUFBLEdBQXNCLElBQUFoQixtQkFBTSxFQUFDLElBQUFKLFdBQUEsQ0FBQUssR0FBQSxFQUFDTixPQUFBLENBQUFPLE9BQU07UUFBQ2UsUUFBUTtNQUFBLENBQUUsQ0FBQyxDQUFDO01BQTFDZCxXQUFXLEdBQUFhLFFBQUEsQ0FBWGIsV0FBVztJQUNsQixJQUFNUSxNQUFNLEdBQUdSLFdBQVcsQ0FBQyxRQUFRLENBQUM7SUFDcENXLE1BQU0sQ0FBQ0gsTUFBTSxDQUFDTyxLQUFLLENBQUNDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDQyxPQUFPLENBQUM7TUFBQ0MsZUFBZSxFQUFFO0lBQVMsQ0FBQyxDQUFDO0VBQ3JFLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyJ9