90186c6684d7deda3bf49a33aba61279
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Button = _interopRequireDefault(require("../Button"));
var _jsxRuntime = require("react/jsx-runtime");
describe('Button', function () {
  test('renders correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        "aria-label": "button"
      })),
      getByLabelText = _render.getByLabelText;
    var button = getByLabelText('button');
    _reactNative.screen.debug();
    expect(button).toBeTruthy();
  });
  test('executes onPress callback when pressed', function () {
    var onPressMock = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: onPressMock
      })),
      getByTestId = _render2.getByTestId;
    var button = getByTestId('button');
    _reactNative.fireEvent.press(button);
    expect(onPressMock).toHaveBeenCalledTimes(1);
  });
  test('applies disabled style when disabled prop is true', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        disabled: true
      })),
      getByTestId = _render3.getByTestId;
    var button = getByTestId('button');
    expect(button.props.style[1]).toEqual({
      backgroundColor: '#3f3f46'
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9CdXR0b24iLCJfanN4UnVudGltZSIsImRlc2NyaWJlIiwidGVzdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJkZWZhdWx0IiwiZ2V0QnlMYWJlbFRleHQiLCJidXR0b24iLCJzY3JlZW4iLCJkZWJ1ZyIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJvblByZXNzTW9jayIsImplc3QiLCJmbiIsIl9yZW5kZXIyIiwib25QcmVzcyIsImdldEJ5VGVzdElkIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJfcmVuZGVyMyIsImRpc2FibGVkIiwicHJvcHMiLCJzdHlsZSIsInRvRXF1YWwiLCJiYWNrZ3JvdW5kQ29sb3IiXSwic291cmNlcyI6WyJCdXR0b24udGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7cmVuZGVyLCBmaXJlRXZlbnQsIHNjcmVlbn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi9CdXR0b24nO1xuXG5pbXBvcnQgcmVuZGVyZXIgZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcic7XG5cbmRlc2NyaWJlKCdCdXR0b24nLCAoKSA9PiB7XG4gIHRlc3QoJ3JlbmRlcnMgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeUxhYmVsVGV4dH0gPSByZW5kZXIoPEJ1dHRvbiBhcmlhLWxhYmVsPVwiYnV0dG9uXCIgLz4pO1xuICAgIGNvbnN0IGJ1dHRvbiA9IGdldEJ5TGFiZWxUZXh0KCdidXR0b24nKTtcbiAgICBzY3JlZW4uZGVidWcoKTtcbiAgICBleHBlY3QoYnV0dG9uKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIHRlc3QoJ2V4ZWN1dGVzIG9uUHJlc3MgY2FsbGJhY2sgd2hlbiBwcmVzc2VkJywgKCkgPT4ge1xuICAgIGNvbnN0IG9uUHJlc3NNb2NrID0gamVzdC5mbigpO1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPEJ1dHRvbiBvblByZXNzPXtvblByZXNzTW9ja30gLz4pO1xuICAgIGNvbnN0IGJ1dHRvbiA9IGdldEJ5VGVzdElkKCdidXR0b24nKTtcbiAgICBmaXJlRXZlbnQucHJlc3MoYnV0dG9uKTtcbiAgICBleHBlY3Qob25QcmVzc01vY2spLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgfSk7XG5cbiAgdGVzdCgnYXBwbGllcyBkaXNhYmxlZCBzdHlsZSB3aGVuIGRpc2FibGVkIHByb3AgaXMgdHJ1ZScsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxCdXR0b24gZGlzYWJsZWQgLz4pO1xuICAgIGNvbnN0IGJ1dHRvbiA9IGdldEJ5VGVzdElkKCdidXR0b24nKTtcbiAgICBleHBlY3QoYnV0dG9uLnByb3BzLnN0eWxlWzFdKS50b0VxdWFsKHtiYWNrZ3JvdW5kQ29sb3I6ICcjM2YzZjQ2J30pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQStCLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUkvQkksUUFBUSxDQUFDLFFBQVEsRUFBRSxZQUFNO0VBQ3ZCQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsWUFBTTtJQUM5QixJQUFBQyxPQUFBLEdBQXlCLElBQUFDLG1CQUFNLEVBQUMsSUFBQUosV0FBQSxDQUFBSyxHQUFBLEVBQUNOLE9BQUEsQ0FBQU8sT0FBTTtRQUFDLGNBQVc7TUFBUSxDQUFFLENBQUMsQ0FBQztNQUF4REMsY0FBYyxHQUFBSixPQUFBLENBQWRJLGNBQWM7SUFDckIsSUFBTUMsTUFBTSxHQUFHRCxjQUFjLENBQUMsUUFBUSxDQUFDO0lBQ3ZDRSxtQkFBTSxDQUFDQyxLQUFLLENBQUMsQ0FBQztJQUNkQyxNQUFNLENBQUNILE1BQU0sQ0FBQyxDQUFDSSxVQUFVLENBQUMsQ0FBQztFQUM3QixDQUFDLENBQUM7RUFFRlYsSUFBSSxDQUFDLHdDQUF3QyxFQUFFLFlBQU07SUFDbkQsSUFBTVcsV0FBVyxHQUFHQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLElBQUFDLFFBQUEsR0FBc0IsSUFBQVosbUJBQU0sRUFBQyxJQUFBSixXQUFBLENBQUFLLEdBQUEsRUFBQ04sT0FBQSxDQUFBTyxPQUFNO1FBQUNXLE9BQU8sRUFBRUo7TUFBWSxDQUFFLENBQUMsQ0FBQztNQUF2REssV0FBVyxHQUFBRixRQUFBLENBQVhFLFdBQVc7SUFDbEIsSUFBTVYsTUFBTSxHQUFHVSxXQUFXLENBQUMsUUFBUSxDQUFDO0lBQ3BDQyxzQkFBUyxDQUFDQyxLQUFLLENBQUNaLE1BQU0sQ0FBQztJQUN2QkcsTUFBTSxDQUFDRSxXQUFXLENBQUMsQ0FBQ1EscUJBQXFCLENBQUMsQ0FBQyxDQUFDO0VBQzlDLENBQUMsQ0FBQztFQUVGbkIsSUFBSSxDQUFDLG1EQUFtRCxFQUFFLFlBQU07SUFDOUQsSUFBQW9CLFFBQUEsR0FBc0IsSUFBQWxCLG1CQUFNLEVBQUMsSUFBQUosV0FBQSxDQUFBSyxHQUFBLEVBQUNOLE9BQUEsQ0FBQU8sT0FBTTtRQUFDaUIsUUFBUTtNQUFBLENBQUUsQ0FBQyxDQUFDO01BQTFDTCxXQUFXLEdBQUFJLFFBQUEsQ0FBWEosV0FBVztJQUNsQixJQUFNVixNQUFNLEdBQUdVLFdBQVcsQ0FBQyxRQUFRLENBQUM7SUFDcENQLE1BQU0sQ0FBQ0gsTUFBTSxDQUFDZ0IsS0FBSyxDQUFDQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsT0FBTyxDQUFDO01BQUNDLGVBQWUsRUFBRTtJQUFTLENBQUMsQ0FBQztFQUNyRSxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==