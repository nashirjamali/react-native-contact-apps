429f3d3de1efd24b547a18b2e7ba21b2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _PressabilityDebug = require("../../Pressability/PressabilityDebug");
var _UIManager = _interopRequireDefault(require("../../ReactNative/UIManager"));
var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));
var _SoundManager = _interopRequireDefault(require("../Sound/SoundManager"));
var _BoundingDimensions = _interopRequireDefault(require("./BoundingDimensions"));
var _Position = _interopRequireDefault(require("./Position"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var extractSingleTouch = function extractSingleTouch(nativeEvent) {
  var touches = nativeEvent.touches;
  var changedTouches = nativeEvent.changedTouches;
  var hasTouches = touches && touches.length > 0;
  var hasChangedTouches = changedTouches && changedTouches.length > 0;
  return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;
};
var States = {
  NOT_RESPONDER: 'NOT_RESPONDER',
  RESPONDER_INACTIVE_PRESS_IN: 'RESPONDER_INACTIVE_PRESS_IN',
  RESPONDER_INACTIVE_PRESS_OUT: 'RESPONDER_INACTIVE_PRESS_OUT',
  RESPONDER_ACTIVE_PRESS_IN: 'RESPONDER_ACTIVE_PRESS_IN',
  RESPONDER_ACTIVE_PRESS_OUT: 'RESPONDER_ACTIVE_PRESS_OUT',
  RESPONDER_ACTIVE_LONG_PRESS_IN: 'RESPONDER_ACTIVE_LONG_PRESS_IN',
  RESPONDER_ACTIVE_LONG_PRESS_OUT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',
  ERROR: 'ERROR'
};
var baseStatesConditions = {
  NOT_RESPONDER: false,
  RESPONDER_INACTIVE_PRESS_IN: false,
  RESPONDER_INACTIVE_PRESS_OUT: false,
  RESPONDER_ACTIVE_PRESS_IN: false,
  RESPONDER_ACTIVE_PRESS_OUT: false,
  RESPONDER_ACTIVE_LONG_PRESS_IN: false,
  RESPONDER_ACTIVE_LONG_PRESS_OUT: false,
  ERROR: false
};
var IsActive = Object.assign({}, baseStatesConditions, {
  RESPONDER_ACTIVE_PRESS_OUT: true,
  RESPONDER_ACTIVE_PRESS_IN: true
});
var IsPressingIn = Object.assign({}, baseStatesConditions, {
  RESPONDER_INACTIVE_PRESS_IN: true,
  RESPONDER_ACTIVE_PRESS_IN: true,
  RESPONDER_ACTIVE_LONG_PRESS_IN: true
});
var IsLongPressingIn = Object.assign({}, baseStatesConditions, {
  RESPONDER_ACTIVE_LONG_PRESS_IN: true
});
var Signals = {
  DELAY: 'DELAY',
  RESPONDER_GRANT: 'RESPONDER_GRANT',
  RESPONDER_RELEASE: 'RESPONDER_RELEASE',
  RESPONDER_TERMINATED: 'RESPONDER_TERMINATED',
  ENTER_PRESS_RECT: 'ENTER_PRESS_RECT',
  LEAVE_PRESS_RECT: 'LEAVE_PRESS_RECT',
  LONG_PRESS_DETECTED: 'LONG_PRESS_DETECTED'
};
var Transitions = {
  NOT_RESPONDER: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
    RESPONDER_RELEASE: States.ERROR,
    RESPONDER_TERMINATED: States.ERROR,
    ENTER_PRESS_RECT: States.ERROR,
    LEAVE_PRESS_RECT: States.ERROR,
    LONG_PRESS_DETECTED: States.ERROR
  },
  RESPONDER_INACTIVE_PRESS_IN: {
    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
    LONG_PRESS_DETECTED: States.ERROR
  },
  RESPONDER_INACTIVE_PRESS_OUT: {
    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
    LONG_PRESS_DETECTED: States.ERROR
  },
  RESPONDER_ACTIVE_PRESS_IN: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
  },
  RESPONDER_ACTIVE_PRESS_OUT: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
    LONG_PRESS_DETECTED: States.ERROR
  },
  RESPONDER_ACTIVE_LONG_PRESS_IN: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
  },
  RESPONDER_ACTIVE_LONG_PRESS_OUT: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
    LONG_PRESS_DETECTED: States.ERROR
  },
  error: {
    DELAY: States.NOT_RESPONDER,
    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.NOT_RESPONDER,
    LEAVE_PRESS_RECT: States.NOT_RESPONDER,
    LONG_PRESS_DETECTED: States.NOT_RESPONDER
  }
};
var HIGHLIGHT_DELAY_MS = 130;
var PRESS_EXPAND_PX = 20;
var LONG_PRESS_THRESHOLD = 500;
var LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;
var LONG_PRESS_ALLOWED_MOVEMENT = 10;
var TouchableMixin = {
  componentDidMount: function componentDidMount() {
    if (!_Platform.default.isTV) {
      return;
    }
  },
  componentWillUnmount: function componentWillUnmount() {
    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
  },
  touchableGetInitialState: function touchableGetInitialState() {
    return {
      touchable: {
        touchState: undefined,
        responderID: null
      }
    };
  },
  touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {
    return !this.props.rejectResponderTermination;
  },
  touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {
    return !this.props.disabled;
  },
  touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {
    return true;
  },
  touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {
    var dispatchID = e.currentTarget;
    e.persist();
    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
    this.pressOutDelayTimeout = null;
    this.state.touchable.touchState = States.NOT_RESPONDER;
    this.state.touchable.responderID = dispatchID;
    this._receiveSignal(Signals.RESPONDER_GRANT, e);
    var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;
    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;
    if (delayMS !== 0) {
      this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);
    } else {
      this._handleDelay(e);
    }
    var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;
    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;
    this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);
  },
  touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {
    this.pressInLocation = null;
    this._receiveSignal(Signals.RESPONDER_RELEASE, e);
  },
  touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {
    this.pressInLocation = null;
    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);
  },
  touchableHandleResponderMove: function touchableHandleResponderMove(e) {
    if (!this.state.touchable.positionOnActivate) {
      return;
    }
    var positionOnActivate = this.state.touchable.positionOnActivate;
    var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;
    var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {
      left: PRESS_EXPAND_PX,
      right: PRESS_EXPAND_PX,
      top: PRESS_EXPAND_PX,
      bottom: PRESS_EXPAND_PX
    };
    var pressExpandLeft = pressRectOffset.left;
    var pressExpandTop = pressRectOffset.top;
    var pressExpandRight = pressRectOffset.right;
    var pressExpandBottom = pressRectOffset.bottom;
    var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;
    if (hitSlop) {
      pressExpandLeft += hitSlop.left || 0;
      pressExpandTop += hitSlop.top || 0;
      pressExpandRight += hitSlop.right || 0;
      pressExpandBottom += hitSlop.bottom || 0;
    }
    var touch = extractSingleTouch(e.nativeEvent);
    var pageX = touch && touch.pageX;
    var pageY = touch && touch.pageY;
    if (this.pressInLocation) {
      var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);
      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {
        this._cancelLongPressDelayTimeout();
      }
    }
    var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;
    if (isTouchWithinActive) {
      var prevState = this.state.touchable.touchState;
      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);
      var curState = this.state.touchable.touchState;
      if (curState === States.RESPONDER_INACTIVE_PRESS_IN && prevState !== States.RESPONDER_INACTIVE_PRESS_IN) {
        this._cancelLongPressDelayTimeout();
      }
    } else {
      this._cancelLongPressDelayTimeout();
      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);
    }
  },
  touchableHandleFocus: function touchableHandleFocus(e) {
    this.props.onFocus && this.props.onFocus(e);
  },
  touchableHandleBlur: function touchableHandleBlur(e) {
    this.props.onBlur && this.props.onBlur(e);
  },
  _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {
    var responderID = this.state.touchable.responderID;
    if (responderID == null) {
      return;
    }
    if (typeof responderID === 'number') {
      _UIManager.default.measure(responderID, this._handleQueryLayout);
    } else {
      responderID.measure(this._handleQueryLayout);
    }
  },
  _handleQueryLayout: function _handleQueryLayout(l, t, w, h, globalX, globalY) {
    if (!l && !t && !w && !h && !globalX && !globalY) {
      return;
    }
    this.state.touchable.positionOnActivate && _Position.default.release(this.state.touchable.positionOnActivate);
    this.state.touchable.dimensionsOnActivate && _BoundingDimensions.default.release(this.state.touchable.dimensionsOnActivate);
    this.state.touchable.positionOnActivate = _Position.default.getPooled(globalX, globalY);
    this.state.touchable.dimensionsOnActivate = _BoundingDimensions.default.getPooled(w, h);
  },
  _handleDelay: function _handleDelay(e) {
    this.touchableDelayTimeout = null;
    this._receiveSignal(Signals.DELAY, e);
  },
  _handleLongDelay: function _handleLongDelay(e) {
    this.longPressDelayTimeout = null;
    var curState = this.state.touchable.touchState;
    if (curState === States.RESPONDER_ACTIVE_PRESS_IN || curState === States.RESPONDER_ACTIVE_LONG_PRESS_IN) {
      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);
    }
  },
  _receiveSignal: function _receiveSignal(signal, e) {
    var responderID = this.state.touchable.responderID;
    var curState = this.state.touchable.touchState;
    var nextState = Transitions[curState] && Transitions[curState][signal];
    if (!responderID && signal === Signals.RESPONDER_RELEASE) {
      return;
    }
    if (!nextState) {
      throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + typeof this.state.touchable.responderID === 'number' ? this.state.touchable.responderID : 'host component' + '`');
    }
    if (nextState === States.ERROR) {
      throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + typeof this.state.touchable.responderID === 'number' ? this.state.touchable.responderID : '<<host component>>' + '`');
    }
    if (curState !== nextState) {
      this._performSideEffectsForTransition(curState, nextState, signal, e);
      this.state.touchable.touchState = nextState;
    }
  },
  _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {
    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
    this.longPressDelayTimeout = null;
  },
  _isHighlight: function _isHighlight(state) {
    return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;
  },
  _savePressInLocation: function _savePressInLocation(e) {
    var touch = extractSingleTouch(e.nativeEvent);
    var pageX = touch && touch.pageX;
    var pageY = touch && touch.pageY;
    var locationX = touch && touch.locationX;
    var locationY = touch && touch.locationY;
    this.pressInLocation = {
      pageX: pageX,
      pageY: pageY,
      locationX: locationX,
      locationY: locationY
    };
  },
  _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {
    var deltaX = aX - bX;
    var deltaY = aY - bY;
    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
  },
  _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {
    var curIsHighlight = this._isHighlight(curState);
    var newIsHighlight = this._isHighlight(nextState);
    var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;
    if (isFinalSignal) {
      this._cancelLongPressDelayTimeout();
    }
    var isInitialTransition = curState === States.NOT_RESPONDER && nextState === States.RESPONDER_INACTIVE_PRESS_IN;
    var isActiveTransition = !IsActive[curState] && IsActive[nextState];
    if (isInitialTransition || isActiveTransition) {
      this._remeasureMetricsOnActivation();
    }
    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {
      this.touchableHandleLongPress && this.touchableHandleLongPress(e);
    }
    if (newIsHighlight && !curIsHighlight) {
      this._startHighlight(e);
    } else if (!newIsHighlight && curIsHighlight) {
      this._endHighlight(e);
    }
    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {
      var hasLongPressHandler = !!this.props.onLongPress;
      var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && (!hasLongPressHandler || !this.touchableLongPressCancelsPress());
      var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;
      if (shouldInvokePress && this.touchableHandlePress) {
        if (!newIsHighlight && !curIsHighlight) {
          this._startHighlight(e);
          this._endHighlight(e);
        }
        if (_Platform.default.OS === 'android' && !this.props.touchSoundDisabled) {
          _SoundManager.default.playTouchSound();
        }
        this.touchableHandlePress(e);
      }
    }
    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
    this.touchableDelayTimeout = null;
  },
  _startHighlight: function _startHighlight(e) {
    this._savePressInLocation(e);
    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);
  },
  _endHighlight: function _endHighlight(e) {
    var _this = this;
    if (this.touchableHandleActivePressOut) {
      if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {
        this.pressOutDelayTimeout = setTimeout(function () {
          _this.touchableHandleActivePressOut(e);
        }, this.touchableGetPressOutDelayMS());
      } else {
        this.touchableHandleActivePressOut(e);
      }
    }
  },
  withoutDefaultFocusAndBlur: {}
};
var touchableHandleFocus = TouchableMixin.touchableHandleFocus,
  touchableHandleBlur = TouchableMixin.touchableHandleBlur,
  TouchableMixinWithoutDefaultFocusAndBlur = (0, _objectWithoutProperties2.default)(TouchableMixin, ["touchableHandleFocus", "touchableHandleBlur"]);
TouchableMixin.withoutDefaultFocusAndBlur = TouchableMixinWithoutDefaultFocusAndBlur;
var Touchable = {
  Mixin: TouchableMixin,
  renderDebugView: function renderDebugView(_ref) {
    var color = _ref.color,
      hitSlop = _ref.hitSlop;
    if (__DEV__) {
      return (0, _jsxRuntime.jsx)(_PressabilityDebug.PressabilityDebugView, {
        color: color,
        hitSlop: hitSlop
      });
    }
    return null;
  }
};
module.exports = Touchable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUHJlc3NhYmlsaXR5RGVidWciLCJyZXF1aXJlIiwiX1VJTWFuYWdlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfUGxhdGZvcm0iLCJfU291bmRNYW5hZ2VyIiwiX0JvdW5kaW5nRGltZW5zaW9ucyIsIl9Qb3NpdGlvbiIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfanN4UnVudGltZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJleHRyYWN0U2luZ2xlVG91Y2giLCJuYXRpdmVFdmVudCIsInRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsImhhc1RvdWNoZXMiLCJsZW5ndGgiLCJoYXNDaGFuZ2VkVG91Y2hlcyIsIlN0YXRlcyIsIk5PVF9SRVNQT05ERVIiLCJSRVNQT05ERVJfSU5BQ1RJVkVfUFJFU1NfSU4iLCJSRVNQT05ERVJfSU5BQ1RJVkVfUFJFU1NfT1VUIiwiUkVTUE9OREVSX0FDVElWRV9QUkVTU19JTiIsIlJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfT1VUIiwiUkVTUE9OREVSX0FDVElWRV9MT05HX1BSRVNTX0lOIiwiUkVTUE9OREVSX0FDVElWRV9MT05HX1BSRVNTX09VVCIsIkVSUk9SIiwiYmFzZVN0YXRlc0NvbmRpdGlvbnMiLCJJc0FjdGl2ZSIsImFzc2lnbiIsIklzUHJlc3NpbmdJbiIsIklzTG9uZ1ByZXNzaW5nSW4iLCJTaWduYWxzIiwiREVMQVkiLCJSRVNQT05ERVJfR1JBTlQiLCJSRVNQT05ERVJfUkVMRUFTRSIsIlJFU1BPTkRFUl9URVJNSU5BVEVEIiwiRU5URVJfUFJFU1NfUkVDVCIsIkxFQVZFX1BSRVNTX1JFQ1QiLCJMT05HX1BSRVNTX0RFVEVDVEVEIiwiVHJhbnNpdGlvbnMiLCJlcnJvciIsIkhJR0hMSUdIVF9ERUxBWV9NUyIsIlBSRVNTX0VYUEFORF9QWCIsIkxPTkdfUFJFU1NfVEhSRVNIT0xEIiwiTE9OR19QUkVTU19ERUxBWV9NUyIsIkxPTkdfUFJFU1NfQUxMT1dFRF9NT1ZFTUVOVCIsIlRvdWNoYWJsZU1peGluIiwiY29tcG9uZW50RGlkTW91bnQiLCJQbGF0Zm9ybSIsImlzVFYiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInRvdWNoYWJsZURlbGF5VGltZW91dCIsImNsZWFyVGltZW91dCIsImxvbmdQcmVzc0RlbGF5VGltZW91dCIsInByZXNzT3V0RGVsYXlUaW1lb3V0IiwidG91Y2hhYmxlR2V0SW5pdGlhbFN0YXRlIiwidG91Y2hhYmxlIiwidG91Y2hTdGF0ZSIsInVuZGVmaW5lZCIsInJlc3BvbmRlcklEIiwidG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0IiwicHJvcHMiLCJyZWplY3RSZXNwb25kZXJUZXJtaW5hdGlvbiIsInRvdWNoYWJsZUhhbmRsZVN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyIiwiZGlzYWJsZWQiLCJ0b3VjaGFibGVMb25nUHJlc3NDYW5jZWxzUHJlc3MiLCJ0b3VjaGFibGVIYW5kbGVSZXNwb25kZXJHcmFudCIsImUiLCJkaXNwYXRjaElEIiwiY3VycmVudFRhcmdldCIsInBlcnNpc3QiLCJzdGF0ZSIsIl9yZWNlaXZlU2lnbmFsIiwiZGVsYXlNUyIsInRvdWNoYWJsZUdldEhpZ2hsaWdodERlbGF5TVMiLCJNYXRoIiwibWF4IiwiaXNOYU4iLCJzZXRUaW1lb3V0IiwiX2hhbmRsZURlbGF5IiwiYmluZCIsImxvbmdEZWxheU1TIiwidG91Y2hhYmxlR2V0TG9uZ1ByZXNzRGVsYXlNUyIsIl9oYW5kbGVMb25nRGVsYXkiLCJ0b3VjaGFibGVIYW5kbGVSZXNwb25kZXJSZWxlYXNlIiwicHJlc3NJbkxvY2F0aW9uIiwidG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyVGVybWluYXRlIiwidG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyTW92ZSIsInBvc2l0aW9uT25BY3RpdmF0ZSIsImRpbWVuc2lvbnNPbkFjdGl2YXRlIiwicHJlc3NSZWN0T2Zmc2V0IiwidG91Y2hhYmxlR2V0UHJlc3NSZWN0T2Zmc2V0IiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwicHJlc3NFeHBhbmRMZWZ0IiwicHJlc3NFeHBhbmRUb3AiLCJwcmVzc0V4cGFuZFJpZ2h0IiwicHJlc3NFeHBhbmRCb3R0b20iLCJoaXRTbG9wIiwidG91Y2hhYmxlR2V0SGl0U2xvcCIsInRvdWNoIiwicGFnZVgiLCJwYWdlWSIsIm1vdmVkRGlzdGFuY2UiLCJfZ2V0RGlzdGFuY2VCZXR3ZWVuUG9pbnRzIiwiX2NhbmNlbExvbmdQcmVzc0RlbGF5VGltZW91dCIsImlzVG91Y2hXaXRoaW5BY3RpdmUiLCJ3aWR0aCIsImhlaWdodCIsInByZXZTdGF0ZSIsImN1clN0YXRlIiwidG91Y2hhYmxlSGFuZGxlRm9jdXMiLCJvbkZvY3VzIiwidG91Y2hhYmxlSGFuZGxlQmx1ciIsIm9uQmx1ciIsIl9yZW1lYXN1cmVNZXRyaWNzT25BY3RpdmF0aW9uIiwiVUlNYW5hZ2VyIiwibWVhc3VyZSIsIl9oYW5kbGVRdWVyeUxheW91dCIsImwiLCJ0IiwidyIsImgiLCJnbG9iYWxYIiwiZ2xvYmFsWSIsIlBvc2l0aW9uIiwicmVsZWFzZSIsIkJvdW5kaW5nRGltZW5zaW9ucyIsImdldFBvb2xlZCIsInNpZ25hbCIsIm5leHRTdGF0ZSIsIkVycm9yIiwiX3BlcmZvcm1TaWRlRWZmZWN0c0ZvclRyYW5zaXRpb24iLCJfaXNIaWdobGlnaHQiLCJfc2F2ZVByZXNzSW5Mb2NhdGlvbiIsImxvY2F0aW9uWCIsImxvY2F0aW9uWSIsImFYIiwiYVkiLCJiWCIsImJZIiwiZGVsdGFYIiwiZGVsdGFZIiwic3FydCIsImN1cklzSGlnaGxpZ2h0IiwibmV3SXNIaWdobGlnaHQiLCJpc0ZpbmFsU2lnbmFsIiwiaXNJbml0aWFsVHJhbnNpdGlvbiIsImlzQWN0aXZlVHJhbnNpdGlvbiIsInRvdWNoYWJsZUhhbmRsZUxvbmdQcmVzcyIsIl9zdGFydEhpZ2hsaWdodCIsIl9lbmRIaWdobGlnaHQiLCJoYXNMb25nUHJlc3NIYW5kbGVyIiwib25Mb25nUHJlc3MiLCJwcmVzc0lzTG9uZ0J1dFN0aWxsQ2FsbE9uUHJlc3MiLCJzaG91bGRJbnZva2VQcmVzcyIsInRvdWNoYWJsZUhhbmRsZVByZXNzIiwiT1MiLCJ0b3VjaFNvdW5kRGlzYWJsZWQiLCJTb3VuZE1hbmFnZXIiLCJwbGF5VG91Y2hTb3VuZCIsInRvdWNoYWJsZUhhbmRsZUFjdGl2ZVByZXNzSW4iLCJfdGhpcyIsInRvdWNoYWJsZUhhbmRsZUFjdGl2ZVByZXNzT3V0IiwidG91Y2hhYmxlR2V0UHJlc3NPdXREZWxheU1TIiwid2l0aG91dERlZmF1bHRGb2N1c0FuZEJsdXIiLCJUb3VjaGFibGVNaXhpbldpdGhvdXREZWZhdWx0Rm9jdXNBbmRCbHVyIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiIsIlRvdWNoYWJsZSIsIk1peGluIiwicmVuZGVyRGVidWdWaWV3IiwiX3JlZiIsImNvbG9yIiwiX19ERVZfXyIsImpzeCIsIlByZXNzYWJpbGl0eURlYnVnVmlldyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJUb3VjaGFibGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IHR5cGUge0VkZ2VJbnNldHNQcm9wfSBmcm9tICcuLi8uLi9TdHlsZVNoZWV0L0VkZ2VJbnNldHNQcm9wVHlwZSc7XG5pbXBvcnQgdHlwZSB7Q29sb3JWYWx1ZX0gZnJvbSAnLi4vLi4vU3R5bGVTaGVldC9TdHlsZVNoZWV0JztcbmltcG9ydCB0eXBlIHtQcmVzc0V2ZW50fSBmcm9tICcuLi8uLi9UeXBlcy9Db3JlRXZlbnRUeXBlcyc7XG5pbXBvcnQgdHlwZSB7VG91Y2hhYmxlVHlwZX0gZnJvbSAnLi9Ub3VjaGFibGUuZmxvdyc7XG5cbmltcG9ydCB7UHJlc3NhYmlsaXR5RGVidWdWaWV3fSBmcm9tICcuLi8uLi9QcmVzc2FiaWxpdHkvUHJlc3NhYmlsaXR5RGVidWcnO1xuaW1wb3J0IFVJTWFuYWdlciBmcm9tICcuLi8uLi9SZWFjdE5hdGl2ZS9VSU1hbmFnZXInO1xuaW1wb3J0IFBsYXRmb3JtIGZyb20gJy4uLy4uL1V0aWxpdGllcy9QbGF0Zm9ybSc7XG5pbXBvcnQgU291bmRNYW5hZ2VyIGZyb20gJy4uL1NvdW5kL1NvdW5kTWFuYWdlcic7XG5pbXBvcnQgQm91bmRpbmdEaW1lbnNpb25zIGZyb20gJy4vQm91bmRpbmdEaW1lbnNpb25zJztcbmltcG9ydCBQb3NpdGlvbiBmcm9tICcuL1Bvc2l0aW9uJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY29uc3QgZXh0cmFjdFNpbmdsZVRvdWNoID0gKG5hdGl2ZUV2ZW50OiB7XG4gICtjaGFuZ2VkVG91Y2hlczogJFJlYWRPbmx5QXJyYXk8UHJlc3NFdmVudFsnbmF0aXZlRXZlbnQnXT4sXG4gICtmb3JjZT86IG51bWJlcixcbiAgK2lkZW50aWZpZXI6IG51bWJlcixcbiAgK2xvY2F0aW9uWDogbnVtYmVyLFxuICArbG9jYXRpb25ZOiBudW1iZXIsXG4gICtwYWdlWDogbnVtYmVyLFxuICArcGFnZVk6IG51bWJlcixcbiAgK3RhcmdldDogP251bWJlcixcbiAgK3RpbWVzdGFtcDogbnVtYmVyLFxuICArdG91Y2hlczogJFJlYWRPbmx5QXJyYXk8UHJlc3NFdmVudFsnbmF0aXZlRXZlbnQnXT4sXG59KSA9PiB7XG4gIGNvbnN0IHRvdWNoZXMgPSBuYXRpdmVFdmVudC50b3VjaGVzO1xuICBjb25zdCBjaGFuZ2VkVG91Y2hlcyA9IG5hdGl2ZUV2ZW50LmNoYW5nZWRUb3VjaGVzO1xuICBjb25zdCBoYXNUb3VjaGVzID0gdG91Y2hlcyAmJiB0b3VjaGVzLmxlbmd0aCA+IDA7XG4gIGNvbnN0IGhhc0NoYW5nZWRUb3VjaGVzID0gY2hhbmdlZFRvdWNoZXMgJiYgY2hhbmdlZFRvdWNoZXMubGVuZ3RoID4gMDtcblxuICByZXR1cm4gIWhhc1RvdWNoZXMgJiYgaGFzQ2hhbmdlZFRvdWNoZXNcbiAgICA/IGNoYW5nZWRUb3VjaGVzWzBdXG4gICAgOiBoYXNUb3VjaGVzXG4gICAgPyB0b3VjaGVzWzBdXG4gICAgOiBuYXRpdmVFdmVudDtcbn07XG5cbi8qKlxuICogYFRvdWNoYWJsZWA6IFRhcHMgZG9uZSByaWdodC5cbiAqXG4gKiBZb3UgaG9vayB5b3VyIGBSZXNwb25kZXJFdmVudFBsdWdpbmAgZXZlbnRzIGludG8gYFRvdWNoYWJsZWAuIGBUb3VjaGFibGVgXG4gKiB3aWxsIG1lYXN1cmUgdGltZS9nZW9tZXRyeSBhbmQgdGVsbHMgeW91IHdoZW4gdG8gZ2l2ZSBmZWVkYmFjayB0byB0aGUgdXNlci5cbiAqXG4gKiA9PT09PT09PT09PT09PT09PT09PT09IFRvdWNoYWJsZSBUdXRvcmlhbCA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBUaGUgYFRvdWNoYWJsZWAgbWl4aW4gaGVscHMgeW91IGhhbmRsZSB0aGUgXCJwcmVzc1wiIGludGVyYWN0aW9uLiBJdCBhbmFseXplc1xuICogdGhlIGdlb21ldHJ5IG9mIGVsZW1lbnRzLCBhbmQgb2JzZXJ2ZXMgd2hlbiBhbm90aGVyIHJlc3BvbmRlciAoc2Nyb2xsIHZpZXdcbiAqIGV0YykgaGFzIHN0b2xlbiB0aGUgdG91Y2ggbG9jay4gSXQgbm90aWZpZXMgeW91ciBjb21wb25lbnQgd2hlbiBpdCBzaG91bGRcbiAqIGdpdmUgZmVlZGJhY2sgdG8gdGhlIHVzZXIuIChib3VuY2luZy9oaWdobGlnaHRpbmcvdW5oaWdobGlnaHRpbmcpLlxuICpcbiAqIC0gV2hlbiBhIHRvdWNoIHdhcyBhY3RpdmF0ZWQgKHR5cGljYWxseSB5b3UgaGlnaGxpZ2h0KVxuICogLSBXaGVuIGEgdG91Y2ggd2FzIGRlYWN0aXZhdGVkICh0eXBpY2FsbHkgeW91IHVuaGlnaGxpZ2h0KVxuICogLSBXaGVuIGEgdG91Y2ggd2FzIFwicHJlc3NlZFwiIC0gYSB0b3VjaCBlbmRlZCB3aGlsZSBzdGlsbCB3aXRoaW4gdGhlIGdlb21ldHJ5XG4gKiAgIG9mIHRoZSBlbGVtZW50LCBhbmQgbm8gb3RoZXIgZWxlbWVudCAobGlrZSBzY3JvbGxlcikgaGFzIFwic3RvbGVuXCIgdG91Y2hcbiAqICAgbG9jayAoXCJyZXNwb25kZXJcIikgKFR5cGljYWxseSB5b3UgYm91bmNlIHRoZSBlbGVtZW50KS5cbiAqXG4gKiBBIGdvb2QgdGFwIGludGVyYWN0aW9uIGlzbid0IGFzIHNpbXBsZSBhcyB5b3UgbWlnaHQgdGhpbmsuIFRoZXJlIHNob3VsZCBiZSBhXG4gKiBzbGlnaHQgZGVsYXkgYmVmb3JlIHNob3dpbmcgYSBoaWdobGlnaHQgd2hlbiBzdGFydGluZyBhIHRvdWNoLiBJZiBhXG4gKiBzdWJzZXF1ZW50IHRvdWNoIG1vdmUgZXhjZWVkcyB0aGUgYm91bmRhcnkgb2YgdGhlIGVsZW1lbnQsIGl0IHNob3VsZFxuICogdW5oaWdobGlnaHQsIGJ1dCBpZiB0aGF0IHNhbWUgdG91Y2ggaXMgYnJvdWdodCBiYWNrIHdpdGhpbiB0aGUgYm91bmRhcnksIGl0XG4gKiBzaG91bGQgcmVoaWdobGlnaHQgYWdhaW4uIEEgdG91Y2ggY2FuIG1vdmUgaW4gYW5kIG91dCBvZiB0aGF0IGJvdW5kYXJ5XG4gKiBzZXZlcmFsIHRpbWVzLCBlYWNoIHRpbWUgdG9nZ2xpbmcgaGlnaGxpZ2h0aW5nLCBidXQgYSBcInByZXNzXCIgaXMgb25seVxuICogdHJpZ2dlcmVkIGlmIHRoYXQgdG91Y2ggZW5kcyB3aGlsZSB3aXRoaW4gdGhlIGVsZW1lbnQncyBib3VuZGFyeSBhbmQgbm9cbiAqIHNjcm9sbGVyIChvciBhbnl0aGluZyBlbHNlKSBoYXMgc3RvbGVuIHRoZSBsb2NrIG9uIHRvdWNoZXMuXG4gKlxuICogVG8gY3JlYXRlIGEgbmV3IHR5cGUgb2YgY29tcG9uZW50IHRoYXQgaGFuZGxlcyBpbnRlcmFjdGlvbiB1c2luZyB0aGVcbiAqIGBUb3VjaGFibGVgIG1peGluLCBkbyB0aGUgZm9sbG93aW5nOlxuICpcbiAqIC0gSW5pdGlhbGl6ZSB0aGUgYFRvdWNoYWJsZWAgc3RhdGUuXG4gKlxuICogICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuICogICAgIHJldHVybiBtZXJnZSh0aGlzLnRvdWNoYWJsZUdldEluaXRpYWxTdGF0ZSgpLCB5b3VyQ29tcG9uZW50U3RhdGUpO1xuICogICB9XG4gKlxuICogLSBDaG9vc2UgdGhlIHJlbmRlcmVkIGNvbXBvbmVudCB3aG8ncyB0b3VjaGVzIHNob3VsZCBzdGFydCB0aGUgaW50ZXJhY3RpdmVcbiAqICAgc2VxdWVuY2UuIE9uIHRoYXQgcmVuZGVyZWQgbm9kZSwgZm9yd2FyZCBhbGwgYFRvdWNoYWJsZWAgcmVzcG9uZGVyXG4gKiAgIGhhbmRsZXJzLiBZb3UgY2FuIGNob29zZSBhbnkgcmVuZGVyZWQgbm9kZSB5b3UgbGlrZS4gQ2hvb3NlIGEgbm9kZSB3aG9zZVxuICogICBoaXQgdGFyZ2V0IHlvdSdkIGxpa2UgdG8gaW5zdGlnYXRlIHRoZSBpbnRlcmFjdGlvbiBzZXF1ZW5jZTpcbiAqXG4gKiAgIC8vIEluIHJlbmRlciBmdW5jdGlvbjpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8Vmlld1xuICogICAgICAgb25TdGFydFNob3VsZFNldFJlc3BvbmRlcj17dGhpcy50b3VjaGFibGVIYW5kbGVTdGFydFNob3VsZFNldFJlc3BvbmRlcn1cbiAqICAgICAgIG9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0PXt0aGlzLnRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdH1cbiAqICAgICAgIG9uUmVzcG9uZGVyR3JhbnQ9e3RoaXMudG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyR3JhbnR9XG4gKiAgICAgICBvblJlc3BvbmRlck1vdmU9e3RoaXMudG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyTW92ZX1cbiAqICAgICAgIG9uUmVzcG9uZGVyUmVsZWFzZT17dGhpcy50b3VjaGFibGVIYW5kbGVSZXNwb25kZXJSZWxlYXNlfVxuICogICAgICAgb25SZXNwb25kZXJUZXJtaW5hdGU9e3RoaXMudG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyVGVybWluYXRlfT5cbiAqICAgICAgIDxWaWV3PlxuICogICAgICAgICBFdmVuIHRob3VnaCB0aGUgaGl0IGRldGVjdGlvbi9pbnRlcmFjdGlvbnMgYXJlIHRyaWdnZXJlZCBieSB0aGVcbiAqICAgICAgICAgd3JhcHBpbmcgKHR5cGljYWxseSBsYXJnZXIpIG5vZGUsIHdlIHVzdWFsbHkgZW5kIHVwIGltcGxlbWVudGluZ1xuICogICAgICAgICBjdXN0b20gbG9naWMgdGhhdCBoaWdobGlnaHRzIHRoaXMgaW5uZXIgb25lLlxuICogICAgICAgPC9WaWV3PlxuICogICAgIDwvVmlldz5cbiAqICAgKTtcbiAqXG4gKiAtIFlvdSBtYXkgc2V0IHVwIHlvdXIgb3duIGhhbmRsZXJzIGZvciBlYWNoIG9mIHRoZXNlIGV2ZW50cywgc28gbG9uZyBhcyB5b3VcbiAqICAgYWxzbyBpbnZva2UgdGhlIGB0b3VjaGFibGUqYCBoYW5kbGVycyBpbnNpZGUgb2YgeW91ciBjdXN0b20gaGFuZGxlci5cbiAqXG4gKiAtIEltcGxlbWVudCB0aGUgaGFuZGxlcnMgb24geW91ciBjb21wb25lbnQgY2xhc3MgaW4gb3JkZXIgdG8gcHJvdmlkZVxuICogICBmZWVkYmFjayB0byB0aGUgdXNlci4gU2VlIGRvY3VtZW50YXRpb24gZm9yIGVhY2ggb2YgdGhlc2UgY2xhc3MgbWV0aG9kc1xuICogICB0aGF0IHlvdSBzaG91bGQgaW1wbGVtZW50LlxuICpcbiAqICAgdG91Y2hhYmxlSGFuZGxlUHJlc3M6IGZ1bmN0aW9uKCkge1xuICogICAgICB0aGlzLnBlcmZvcm1Cb3VuY2VBbmltYXRpb24oKTsgIC8vIG9yIHdoYXRldmVyIHlvdSB3YW50IHRvIGRvLlxuICogICB9LFxuICogICB0b3VjaGFibGVIYW5kbGVBY3RpdmVQcmVzc0luOiBmdW5jdGlvbigpIHtcbiAqICAgICB0aGlzLmJlZ2luSGlnaGxpZ2h0aW5nKC4uLik7ICAvLyBXaGF0ZXZlciB5b3UgbGlrZSB0byBjb252ZXkgYWN0aXZhdGlvblxuICogICB9LFxuICogICB0b3VjaGFibGVIYW5kbGVBY3RpdmVQcmVzc091dDogZnVuY3Rpb24oKSB7XG4gKiAgICAgdGhpcy5lbmRIaWdobGlnaHRpbmcoLi4uKTsgIC8vIFdoYXRldmVyIHlvdSBsaWtlIHRvIGNvbnZleSBkZWFjdGl2YXRpb25cbiAqICAgfSxcbiAqXG4gKiAtIFRoZXJlIGFyZSBtb3JlIGFkdmFuY2VkIG1ldGhvZHMgeW91IGNhbiBpbXBsZW1lbnQgKHNlZSBkb2N1bWVudGF0aW9uIGJlbG93KTpcbiAqICAgdG91Y2hhYmxlR2V0SGlnaGxpZ2h0RGVsYXlNUzogZnVuY3Rpb24oKSB7XG4gKiAgICAgcmV0dXJuIDIwO1xuICogICB9XG4gKiAgIC8vIEluIHByYWN0aWNlLCAqYWx3YXlzKiB1c2UgYSBwcmVkZWNsYXJlZCBjb25zdGFudCAoY29uc2VydmUgbWVtb3J5KS5cbiAqICAgdG91Y2hhYmxlR2V0UHJlc3NSZWN0T2Zmc2V0OiBmdW5jdGlvbigpIHtcbiAqICAgICByZXR1cm4ge3RvcDogMjAsIGxlZnQ6IDIwLCByaWdodDogMjAsIGJvdHRvbTogMTAwfTtcbiAqICAgfVxuICovXG5cbi8qKlxuICogVG91Y2hhYmxlIHN0YXRlcy5cbiAqL1xuXG5jb25zdCBTdGF0ZXMgPSB7XG4gIE5PVF9SRVNQT05ERVI6ICdOT1RfUkVTUE9OREVSJywgLy8gTm90IHRoZSByZXNwb25kZXJcbiAgUkVTUE9OREVSX0lOQUNUSVZFX1BSRVNTX0lOOiAnUkVTUE9OREVSX0lOQUNUSVZFX1BSRVNTX0lOJywgLy8gUmVzcG9uZGVyLCBpbmFjdGl2ZSwgaW4gdGhlIGBQcmVzc1JlY3RgXG4gIFJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19PVVQ6ICdSRVNQT05ERVJfSU5BQ1RJVkVfUFJFU1NfT1VUJywgLy8gUmVzcG9uZGVyLCBpbmFjdGl2ZSwgb3V0IG9mIGBQcmVzc1JlY3RgXG4gIFJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfSU46ICdSRVNQT05ERVJfQUNUSVZFX1BSRVNTX0lOJywgLy8gUmVzcG9uZGVyLCBhY3RpdmUsIGluIHRoZSBgUHJlc3NSZWN0YFxuICBSRVNQT05ERVJfQUNUSVZFX1BSRVNTX09VVDogJ1JFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfT1VUJywgLy8gUmVzcG9uZGVyLCBhY3RpdmUsIG91dCBvZiBgUHJlc3NSZWN0YFxuICBSRVNQT05ERVJfQUNUSVZFX0xPTkdfUFJFU1NfSU46ICdSRVNQT05ERVJfQUNUSVZFX0xPTkdfUFJFU1NfSU4nLCAvLyBSZXNwb25kZXIsIGFjdGl2ZSwgaW4gdGhlIGBQcmVzc1JlY3RgLCBhZnRlciBsb25nIHByZXNzIHRocmVzaG9sZFxuICBSRVNQT05ERVJfQUNUSVZFX0xPTkdfUFJFU1NfT1VUOiAnUkVTUE9OREVSX0FDVElWRV9MT05HX1BSRVNTX09VVCcsIC8vIFJlc3BvbmRlciwgYWN0aXZlLCBvdXQgb2YgYFByZXNzUmVjdGAsIGFmdGVyIGxvbmcgcHJlc3MgdGhyZXNob2xkXG4gIEVSUk9SOiAnRVJST1InLFxufTtcblxudHlwZSBTdGF0ZSA9XG4gIHwgdHlwZW9mIFN0YXRlcy5OT1RfUkVTUE9OREVSXG4gIHwgdHlwZW9mIFN0YXRlcy5SRVNQT05ERVJfSU5BQ1RJVkVfUFJFU1NfSU5cbiAgfCB0eXBlb2YgU3RhdGVzLlJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19PVVRcbiAgfCB0eXBlb2YgU3RhdGVzLlJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfSU5cbiAgfCB0eXBlb2YgU3RhdGVzLlJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfT1VUXG4gIHwgdHlwZW9mIFN0YXRlcy5SRVNQT05ERVJfQUNUSVZFX0xPTkdfUFJFU1NfSU5cbiAgfCB0eXBlb2YgU3RhdGVzLlJFU1BPTkRFUl9BQ1RJVkVfTE9OR19QUkVTU19PVVRcbiAgfCB0eXBlb2YgU3RhdGVzLkVSUk9SO1xuXG4vKlxuICogUXVpY2sgbG9va3VwIG1hcCBmb3Igc3RhdGVzIHRoYXQgYXJlIGNvbnNpZGVyZWQgdG8gYmUgXCJhY3RpdmVcIlxuICovXG5cbmNvbnN0IGJhc2VTdGF0ZXNDb25kaXRpb25zID0ge1xuICBOT1RfUkVTUE9OREVSOiBmYWxzZSxcbiAgUkVTUE9OREVSX0lOQUNUSVZFX1BSRVNTX0lOOiBmYWxzZSxcbiAgUkVTUE9OREVSX0lOQUNUSVZFX1BSRVNTX09VVDogZmFsc2UsXG4gIFJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfSU46IGZhbHNlLFxuICBSRVNQT05ERVJfQUNUSVZFX1BSRVNTX09VVDogZmFsc2UsXG4gIFJFU1BPTkRFUl9BQ1RJVkVfTE9OR19QUkVTU19JTjogZmFsc2UsXG4gIFJFU1BPTkRFUl9BQ1RJVkVfTE9OR19QUkVTU19PVVQ6IGZhbHNlLFxuICBFUlJPUjogZmFsc2UsXG59O1xuXG5jb25zdCBJc0FjdGl2ZSA9IHtcbiAgLi4uYmFzZVN0YXRlc0NvbmRpdGlvbnMsXG4gIFJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfT1VUOiB0cnVlLFxuICBSRVNQT05ERVJfQUNUSVZFX1BSRVNTX0lOOiB0cnVlLFxufTtcblxuLyoqXG4gKiBRdWljayBsb29rdXAgZm9yIHN0YXRlcyB0aGF0IGFyZSBjb25zaWRlcmVkIHRvIGJlIFwicHJlc3NpbmdcIiBhbmQgYXJlXG4gKiB0aGVyZWZvcmUgZWxpZ2libGUgdG8gcmVzdWx0IGluIGEgXCJzZWxlY3Rpb25cIiBpZiB0aGUgcHJlc3Mgc3RvcHMuXG4gKi9cbmNvbnN0IElzUHJlc3NpbmdJbiA9IHtcbiAgLi4uYmFzZVN0YXRlc0NvbmRpdGlvbnMsXG4gIFJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19JTjogdHJ1ZSxcbiAgUkVTUE9OREVSX0FDVElWRV9QUkVTU19JTjogdHJ1ZSxcbiAgUkVTUE9OREVSX0FDVElWRV9MT05HX1BSRVNTX0lOOiB0cnVlLFxufTtcblxuY29uc3QgSXNMb25nUHJlc3NpbmdJbiA9IHtcbiAgLi4uYmFzZVN0YXRlc0NvbmRpdGlvbnMsXG4gIFJFU1BPTkRFUl9BQ1RJVkVfTE9OR19QUkVTU19JTjogdHJ1ZSxcbn07XG5cbi8qKlxuICogSW5wdXRzIHRvIHRoZSBzdGF0ZSBtYWNoaW5lLlxuICovXG5jb25zdCBTaWduYWxzID0ge1xuICBERUxBWTogJ0RFTEFZJyxcbiAgUkVTUE9OREVSX0dSQU5UOiAnUkVTUE9OREVSX0dSQU5UJyxcbiAgUkVTUE9OREVSX1JFTEVBU0U6ICdSRVNQT05ERVJfUkVMRUFTRScsXG4gIFJFU1BPTkRFUl9URVJNSU5BVEVEOiAnUkVTUE9OREVSX1RFUk1JTkFURUQnLFxuICBFTlRFUl9QUkVTU19SRUNUOiAnRU5URVJfUFJFU1NfUkVDVCcsXG4gIExFQVZFX1BSRVNTX1JFQ1Q6ICdMRUFWRV9QUkVTU19SRUNUJyxcbiAgTE9OR19QUkVTU19ERVRFQ1RFRDogJ0xPTkdfUFJFU1NfREVURUNURUQnLFxufTtcblxudHlwZSBTaWduYWwgPVxuICB8IHR5cGVvZiBTaWduYWxzLkRFTEFZXG4gIHwgdHlwZW9mIFNpZ25hbHMuUkVTUE9OREVSX0dSQU5UXG4gIHwgdHlwZW9mIFNpZ25hbHMuUkVTUE9OREVSX1JFTEVBU0VcbiAgfCB0eXBlb2YgU2lnbmFscy5SRVNQT05ERVJfVEVSTUlOQVRFRFxuICB8IHR5cGVvZiBTaWduYWxzLkVOVEVSX1BSRVNTX1JFQ1RcbiAgfCB0eXBlb2YgU2lnbmFscy5MRUFWRV9QUkVTU19SRUNUXG4gIHwgdHlwZW9mIFNpZ25hbHMuTE9OR19QUkVTU19ERVRFQ1RFRDtcblxuLyoqXG4gKiBNYXBwaW5nIGZyb20gU3RhdGVzIHggU2lnbmFscyA9PiBTdGF0ZXNcbiAqL1xuY29uc3QgVHJhbnNpdGlvbnMgPSB7XG4gIE5PVF9SRVNQT05ERVI6IHtcbiAgICBERUxBWTogU3RhdGVzLkVSUk9SLFxuICAgIFJFU1BPTkRFUl9HUkFOVDogU3RhdGVzLlJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19JTixcbiAgICBSRVNQT05ERVJfUkVMRUFTRTogU3RhdGVzLkVSUk9SLFxuICAgIFJFU1BPTkRFUl9URVJNSU5BVEVEOiBTdGF0ZXMuRVJST1IsXG4gICAgRU5URVJfUFJFU1NfUkVDVDogU3RhdGVzLkVSUk9SLFxuICAgIExFQVZFX1BSRVNTX1JFQ1Q6IFN0YXRlcy5FUlJPUixcbiAgICBMT05HX1BSRVNTX0RFVEVDVEVEOiBTdGF0ZXMuRVJST1IsXG4gIH0sXG4gIFJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19JTjoge1xuICAgIERFTEFZOiBTdGF0ZXMuUkVTUE9OREVSX0FDVElWRV9QUkVTU19JTixcbiAgICBSRVNQT05ERVJfR1JBTlQ6IFN0YXRlcy5FUlJPUixcbiAgICBSRVNQT05ERVJfUkVMRUFTRTogU3RhdGVzLk5PVF9SRVNQT05ERVIsXG4gICAgUkVTUE9OREVSX1RFUk1JTkFURUQ6IFN0YXRlcy5OT1RfUkVTUE9OREVSLFxuICAgIEVOVEVSX1BSRVNTX1JFQ1Q6IFN0YXRlcy5SRVNQT05ERVJfSU5BQ1RJVkVfUFJFU1NfSU4sXG4gICAgTEVBVkVfUFJFU1NfUkVDVDogU3RhdGVzLlJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19PVVQsXG4gICAgTE9OR19QUkVTU19ERVRFQ1RFRDogU3RhdGVzLkVSUk9SLFxuICB9LFxuICBSRVNQT05ERVJfSU5BQ1RJVkVfUFJFU1NfT1VUOiB7XG4gICAgREVMQVk6IFN0YXRlcy5SRVNQT05ERVJfQUNUSVZFX1BSRVNTX09VVCxcbiAgICBSRVNQT05ERVJfR1JBTlQ6IFN0YXRlcy5FUlJPUixcbiAgICBSRVNQT05ERVJfUkVMRUFTRTogU3RhdGVzLk5PVF9SRVNQT05ERVIsXG4gICAgUkVTUE9OREVSX1RFUk1JTkFURUQ6IFN0YXRlcy5OT1RfUkVTUE9OREVSLFxuICAgIEVOVEVSX1BSRVNTX1JFQ1Q6IFN0YXRlcy5SRVNQT05ERVJfSU5BQ1RJVkVfUFJFU1NfSU4sXG4gICAgTEVBVkVfUFJFU1NfUkVDVDogU3RhdGVzLlJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19PVVQsXG4gICAgTE9OR19QUkVTU19ERVRFQ1RFRDogU3RhdGVzLkVSUk9SLFxuICB9LFxuICBSRVNQT05ERVJfQUNUSVZFX1BSRVNTX0lOOiB7XG4gICAgREVMQVk6IFN0YXRlcy5FUlJPUixcbiAgICBSRVNQT05ERVJfR1JBTlQ6IFN0YXRlcy5FUlJPUixcbiAgICBSRVNQT05ERVJfUkVMRUFTRTogU3RhdGVzLk5PVF9SRVNQT05ERVIsXG4gICAgUkVTUE9OREVSX1RFUk1JTkFURUQ6IFN0YXRlcy5OT1RfUkVTUE9OREVSLFxuICAgIEVOVEVSX1BSRVNTX1JFQ1Q6IFN0YXRlcy5SRVNQT05ERVJfQUNUSVZFX1BSRVNTX0lOLFxuICAgIExFQVZFX1BSRVNTX1JFQ1Q6IFN0YXRlcy5SRVNQT05ERVJfQUNUSVZFX1BSRVNTX09VVCxcbiAgICBMT05HX1BSRVNTX0RFVEVDVEVEOiBTdGF0ZXMuUkVTUE9OREVSX0FDVElWRV9MT05HX1BSRVNTX0lOLFxuICB9LFxuICBSRVNQT05ERVJfQUNUSVZFX1BSRVNTX09VVDoge1xuICAgIERFTEFZOiBTdGF0ZXMuRVJST1IsXG4gICAgUkVTUE9OREVSX0dSQU5UOiBTdGF0ZXMuRVJST1IsXG4gICAgUkVTUE9OREVSX1JFTEVBU0U6IFN0YXRlcy5OT1RfUkVTUE9OREVSLFxuICAgIFJFU1BPTkRFUl9URVJNSU5BVEVEOiBTdGF0ZXMuTk9UX1JFU1BPTkRFUixcbiAgICBFTlRFUl9QUkVTU19SRUNUOiBTdGF0ZXMuUkVTUE9OREVSX0FDVElWRV9QUkVTU19JTixcbiAgICBMRUFWRV9QUkVTU19SRUNUOiBTdGF0ZXMuUkVTUE9OREVSX0FDVElWRV9QUkVTU19PVVQsXG4gICAgTE9OR19QUkVTU19ERVRFQ1RFRDogU3RhdGVzLkVSUk9SLFxuICB9LFxuICBSRVNQT05ERVJfQUNUSVZFX0xPTkdfUFJFU1NfSU46IHtcbiAgICBERUxBWTogU3RhdGVzLkVSUk9SLFxuICAgIFJFU1BPTkRFUl9HUkFOVDogU3RhdGVzLkVSUk9SLFxuICAgIFJFU1BPTkRFUl9SRUxFQVNFOiBTdGF0ZXMuTk9UX1JFU1BPTkRFUixcbiAgICBSRVNQT05ERVJfVEVSTUlOQVRFRDogU3RhdGVzLk5PVF9SRVNQT05ERVIsXG4gICAgRU5URVJfUFJFU1NfUkVDVDogU3RhdGVzLlJFU1BPTkRFUl9BQ1RJVkVfTE9OR19QUkVTU19JTixcbiAgICBMRUFWRV9QUkVTU19SRUNUOiBTdGF0ZXMuUkVTUE9OREVSX0FDVElWRV9MT05HX1BSRVNTX09VVCxcbiAgICBMT05HX1BSRVNTX0RFVEVDVEVEOiBTdGF0ZXMuUkVTUE9OREVSX0FDVElWRV9MT05HX1BSRVNTX0lOLFxuICB9LFxuICBSRVNQT05ERVJfQUNUSVZFX0xPTkdfUFJFU1NfT1VUOiB7XG4gICAgREVMQVk6IFN0YXRlcy5FUlJPUixcbiAgICBSRVNQT05ERVJfR1JBTlQ6IFN0YXRlcy5FUlJPUixcbiAgICBSRVNQT05ERVJfUkVMRUFTRTogU3RhdGVzLk5PVF9SRVNQT05ERVIsXG4gICAgUkVTUE9OREVSX1RFUk1JTkFURUQ6IFN0YXRlcy5OT1RfUkVTUE9OREVSLFxuICAgIEVOVEVSX1BSRVNTX1JFQ1Q6IFN0YXRlcy5SRVNQT05ERVJfQUNUSVZFX0xPTkdfUFJFU1NfSU4sXG4gICAgTEVBVkVfUFJFU1NfUkVDVDogU3RhdGVzLlJFU1BPTkRFUl9BQ1RJVkVfTE9OR19QUkVTU19PVVQsXG4gICAgTE9OR19QUkVTU19ERVRFQ1RFRDogU3RhdGVzLkVSUk9SLFxuICB9LFxuICBlcnJvcjoge1xuICAgIERFTEFZOiBTdGF0ZXMuTk9UX1JFU1BPTkRFUixcbiAgICBSRVNQT05ERVJfR1JBTlQ6IFN0YXRlcy5SRVNQT05ERVJfSU5BQ1RJVkVfUFJFU1NfSU4sXG4gICAgUkVTUE9OREVSX1JFTEVBU0U6IFN0YXRlcy5OT1RfUkVTUE9OREVSLFxuICAgIFJFU1BPTkRFUl9URVJNSU5BVEVEOiBTdGF0ZXMuTk9UX1JFU1BPTkRFUixcbiAgICBFTlRFUl9QUkVTU19SRUNUOiBTdGF0ZXMuTk9UX1JFU1BPTkRFUixcbiAgICBMRUFWRV9QUkVTU19SRUNUOiBTdGF0ZXMuTk9UX1JFU1BPTkRFUixcbiAgICBMT05HX1BSRVNTX0RFVEVDVEVEOiBTdGF0ZXMuTk9UX1JFU1BPTkRFUixcbiAgfSxcbn07XG5cbi8vID09PT0gVHlwaWNhbCBDb25zdGFudHMgZm9yIGludGVncmF0aW5nIGludG8gVUkgY29tcG9uZW50cyA9PT09XG4vLyB2YXIgSElUX0VYUEFORF9QWCA9IDIwO1xuLy8gdmFyIEhJVF9WRVJUX09GRlNFVF9QWCA9IDEwO1xuY29uc3QgSElHSExJR0hUX0RFTEFZX01TID0gMTMwO1xuXG5jb25zdCBQUkVTU19FWFBBTkRfUFggPSAyMDtcblxuY29uc3QgTE9OR19QUkVTU19USFJFU0hPTEQgPSA1MDA7XG5cbmNvbnN0IExPTkdfUFJFU1NfREVMQVlfTVMgPSBMT05HX1BSRVNTX1RIUkVTSE9MRCAtIEhJR0hMSUdIVF9ERUxBWV9NUztcblxuY29uc3QgTE9OR19QUkVTU19BTExPV0VEX01PVkVNRU5UID0gMTA7XG5cbi8vIERlZmF1bHQgYW1vdW50IFwiYWN0aXZlXCIgcmVnaW9uIHByb3RydWRlcyBiZXlvbmQgYm94XG5cbi8qKlxuICogQnkgY29udmVudGlvbiwgbWV0aG9kcyBwcmVmaXhlZCB3aXRoIHVuZGVyc2NvcmVzIGFyZSBtZWFudCB0byBiZSBAcHJpdmF0ZSxcbiAqIGFuZCBub3QgQHByb3RlY3RlZC4gTWl4ZXJzIHNob3VsZG4ndCBhY2Nlc3MgdGhlbSAtIG5vdCBldmVuIHRvIHByb3ZpZGUgdGhlbVxuICogYXMgY2FsbGJhY2sgaGFuZGxlcnMuXG4gKlxuICpcbiAqID09PT09PT09PT0gR2VvbWV0cnkgPT09PT09PT09XG4gKiBgVG91Y2hhYmxlYCBvbmx5IGFzc3VtZXMgdGhhdCB0aGVyZSBleGlzdHMgYSBgSGl0UmVjdGAgbm9kZS4gVGhlIGBQcmVzc1JlY3RgXG4gKiBpcyBhbiBhYnN0cmFjdCBib3ggdGhhdCBpcyBleHRlbmRlZCBiZXlvbmQgdGhlIGBIaXRSZWN0YC5cbiAqXG4gKiAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xuICogIHwgICAgICAgICAgICAgICAgICAgICAgICAgIHwgLSBcIlN0YXJ0XCIgZXZlbnRzIGluIGBIaXRSZWN0YCBjYXVzZSBgSGl0UmVjdGBcbiAqICB8ICArLS0tLS0tLS0tLS0tLS0tLS0tLS0rICB8ICAgdG8gYmVjb21lIHRoZSByZXNwb25kZXIuXG4gKiAgfCAgfCAgKy0tLS0tLS0tLS0tLS0tKyAgfCAgfCAtIGBIaXRSZWN0YCBpcyB0eXBpY2FsbHkgZXhwYW5kZWQgYXJvdW5kXG4gKiAgfCAgfCAgfCAgICAgICAgICAgICAgfCAgfCAgfCAgIHRoZSBgVmlzdWFsUmVjdGAsIGJ1dCBzaGlmdGVkIGRvd253YXJkLlxuICogIHwgIHwgIHwgIFZpc3VhbFJlY3QgIHwgIHwgIHwgLSBBZnRlciBwcmVzc2luZyBkb3duLCBhZnRlciBzb21lIGRlbGF5LFxuICogIHwgIHwgIHwgICAgICAgICAgICAgIHwgIHwgIHwgICBhbmQgYmVmb3JlIGxldHRpbmcgdXAsIHRoZSBWaXN1YWwgUmVhY3RcbiAqICB8ICB8ICArLS0tLS0tLS0tLS0tLS0rICB8ICB8ICAgd2lsbCBiZWNvbWUgXCJhY3RpdmVcIi4gVGhpcyBtYWtlcyBpdCBlbGlnaWJsZVxuICogIHwgIHwgICAgIEhpdFJlY3QgICAgICAgIHwgIHwgICBmb3IgYmVpbmcgaGlnaGxpZ2h0ZWQgKHNvIGxvbmcgYXMgdGhlXG4gKiAgfCAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tKyAgfCAgIHByZXNzIHJlbWFpbnMgaW4gdGhlIGBQcmVzc1JlY3RgKS5cbiAqICB8ICAgICAgICBQcmVzc1JlY3QgICAgIG8gICB8XG4gKiAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tK1xuICogICAgICAgICAgIE91dCBSZWdpb24gICAgfFxuICogICAgICAgICAgICAgICAgICAgICAgICAgKy0tLS0tKyBUaGlzIGdhcCBiZXR3ZWVuIHRoZSBgSGl0UmVjdGAgYW5kXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBQcmVzc1JlY3RgIGFsbG93cyBhIHRvdWNoIHRvIG1vdmUgZmFyIGF3YXlcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgb3JpZ2luYWwgaGl0IHJlY3QsIGFuZCByZW1haW5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0ZWQsIGFuZCBlbGlnaWJsZSBmb3IgYSBcIlByZXNzXCIuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1c3RvbWl6ZSB0aGlzIHZpYVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgdG91Y2hhYmxlR2V0UHJlc3NSZWN0T2Zmc2V0KClgLlxuICpcbiAqXG4gKlxuICogPT09PT09PSBTdGF0ZSBNYWNoaW5lID09PT09PT1cbiAqXG4gKiArLS0tLS0tLS0tLS0tLSsgPC0tLSsgUkVTUE9OREVSX1JFTEVBU0VcbiAqIHxOT1RfUkVTUE9OREVSfFxuICogKy0tLS0tLS0tLS0tLS0rIDwtLS0rIFJFU1BPTkRFUl9URVJNSU5BVEVEXG4gKiAgICAgK1xuICogICAgIHwgUkVTUE9OREVSX0dSQU5UIChIaXRSZWN0KVxuICogICAgIHZcbiAqICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rICBERUxBWSAgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyAgVCArIERFTEFZICAgICArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xuICogfFJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19JTnwrLS0tLS0tLS0+fFJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfSU58ICstLS0tLS0tLS0tLS0+IHxSRVNQT05ERVJfQUNUSVZFX0xPTkdfUFJFU1NfSU58XG4gKiArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyAgICAgICAgICArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAqICAgICArICAgICAgICAgICAgXiAgICAgICAgICAgICAgICAgICAgICAgICArICAgICAgICAgICBeICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAgICAgICAgICAgXlxuICogICAgIHxMRUFWRV8gICAgICB8RU5URVJfICAgICAgICAgICAgICAgICAgIHxMRUFWRV8gICAgIHxFTlRFUl8gICAgICAgICAgICAgICAgICAgICAgICAgICB8TEVBVkVfICAgICB8RU5URVJfXG4gKiAgICAgfFBSRVNTX1JFQ1QgIHxQUkVTU19SRUNUICAgICAgICAgICAgICAgfFBSRVNTX1JFQ1QgfFBSRVNTX1JFQ1QgICAgICAgICAgICAgICAgICAgICAgIHxQUkVTU19SRUNUIHxQUkVTU19SRUNUXG4gKiAgICAgfCAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgIHxcbiAqICAgICB2ICAgICAgICAgICAgKyAgICAgICAgICAgICAgICAgICAgICAgICB2ICAgICAgICAgICArICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdiAgICAgICAgICAgK1xuICogKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rICBERUxBWSAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyAgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xuICogfFJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19PVVR8Ky0tLS0tLS0+fFJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfT1VUfCAgICAgICAgICAgICAgIHxSRVNQT05ERVJfQUNUSVZFX0xPTkdfUFJFU1NfT1VUfFxuICogKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rICAgICAgICAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyAgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xuICpcbiAqIFQgKyBERUxBWSA9PiBMT05HX1BSRVNTX0RFTEFZX01TICsgREVMQVlcbiAqXG4gKiBOb3QgZHJhd24gYXJlIHRoZSBzaWRlIGVmZmVjdHMgb2YgZWFjaCB0cmFuc2l0aW9uLiBUaGUgbW9zdCBpbXBvcnRhbnQgc2lkZVxuICogZWZmZWN0IGlzIHRoZSBgdG91Y2hhYmxlSGFuZGxlUHJlc3NgIGFic3RyYWN0IG1ldGhvZCBpbnZvY2F0aW9uIHRoYXQgb2NjdXJzXG4gKiB3aGVuIGEgcmVzcG9uZGVyIGlzIHJlbGVhc2VkIHdoaWxlIGluIGVpdGhlciBvZiB0aGUgXCJQcmVzc1wiIHN0YXRlcy5cbiAqXG4gKiBUaGUgb3RoZXIgaW1wb3J0YW50IHNpZGUgZWZmZWN0cyBhcmUgdGhlIGhpZ2hsaWdodCBhYnN0cmFjdCBtZXRob2RcbiAqIGludm9jYXRpb25zIChpbnRlcm5hbCBjYWxsYmFja3MpIHRvIGJlIGltcGxlbWVudGVkIGJ5IHRoZSBtaXhlci5cbiAqXG4gKlxuICogQGxlbmRzIFRvdWNoYWJsZS5wcm90b3R5cGVcbiAqL1xuY29uc3QgVG91Y2hhYmxlTWl4aW4gPSB7XG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFQbGF0Zm9ybS5pc1RWKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgdGltZW91dHMgb24gdW5tb3VudFxuICAgKi9cbiAgLyogJEZsb3dGaXhNZVttaXNzaW5nLXRoaXMtYW5ub3RdIFRoZSAndGhpcycgdHlwZSBhbm5vdGF0aW9uKHMpIHJlcXVpcmVkIGJ5XG4gICAqIEZsb3cncyBMVEkgdXBkYXRlIGNvdWxkIG5vdCBiZSBhZGRlZCB2aWEgY29kZW1vZCAqL1xuICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudG91Y2hhYmxlRGVsYXlUaW1lb3V0ICYmIGNsZWFyVGltZW91dCh0aGlzLnRvdWNoYWJsZURlbGF5VGltZW91dCk7XG4gICAgdGhpcy5sb25nUHJlc3NEZWxheVRpbWVvdXQgJiYgY2xlYXJUaW1lb3V0KHRoaXMubG9uZ1ByZXNzRGVsYXlUaW1lb3V0KTtcbiAgICB0aGlzLnByZXNzT3V0RGVsYXlUaW1lb3V0ICYmIGNsZWFyVGltZW91dCh0aGlzLnByZXNzT3V0RGVsYXlUaW1lb3V0KTtcbiAgfSxcblxuICAvKipcbiAgICogSXQncyBwcmVmZXIgdGhhdCBtaXhpbnMgZGV0ZXJtaW5lIHN0YXRlIGluIHRoaXMgd2F5LCBoYXZpbmcgdGhlIGNsYXNzXG4gICAqIGV4cGxpY2l0bHkgbWl4IHRoZSBzdGF0ZSBpbiB0aGUgb25lIGFuZCBvbmx5IGBnZXRJbml0aWFsU3RhdGVgIG1ldGhvZC5cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fSBTdGF0ZSBvYmplY3QgdG8gYmUgcGxhY2VkIGluc2lkZSBvZlxuICAgKiBgdGhpcy5zdGF0ZS50b3VjaGFibGVgLlxuICAgKi9cbiAgdG91Y2hhYmxlR2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiAoKToge1xuICAgIHRvdWNoYWJsZToge1xuICAgICAgdG91Y2hTdGF0ZTogP1N0YXRlLFxuICAgICAgcmVzcG9uZGVySUQ6ID9QcmVzc0V2ZW50WydjdXJyZW50VGFyZ2V0J10sXG4gICAgfSxcbiAgfSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvdWNoYWJsZToge3RvdWNoU3RhdGU6IHVuZGVmaW5lZCwgcmVzcG9uZGVySUQ6IG51bGx9LFxuICAgIH07XG4gIH0sXG5cbiAgLy8gPT09PSBIb29rcyB0byBHZXN0dXJlIFJlc3BvbmRlciBzeXN0ZW0gPT09PVxuICAvKipcbiAgICogTXVzdCByZXR1cm4gdHJ1ZSBpZiBlbWJlZGRlZCBpbiBhIG5hdGl2ZSBwbGF0Zm9ybSBzY3JvbGwgdmlldy5cbiAgICovXG4gIC8qICRGbG93Rml4TWVbbWlzc2luZy10aGlzLWFubm90XSBUaGUgJ3RoaXMnIHR5cGUgYW5ub3RhdGlvbihzKSByZXF1aXJlZCBieVxuICAgKiBGbG93J3MgTFRJIHVwZGF0ZSBjb3VsZCBub3QgYmUgYWRkZWQgdmlhIGNvZGVtb2QgKi9cbiAgdG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0OiBmdW5jdGlvbiAoKTogYW55IHtcbiAgICByZXR1cm4gIXRoaXMucHJvcHMucmVqZWN0UmVzcG9uZGVyVGVybWluYXRpb247XG4gIH0sXG5cbiAgLyoqXG4gICAqIE11c3QgcmV0dXJuIHRydWUgdG8gc3RhcnQgdGhlIHByb2Nlc3Mgb2YgYFRvdWNoYWJsZWAuXG4gICAqL1xuICAvKiAkRmxvd0ZpeE1lW21pc3NpbmctdGhpcy1hbm5vdF0gVGhlICd0aGlzJyB0eXBlIGFubm90YXRpb24ocykgcmVxdWlyZWQgYnlcbiAgICogRmxvdydzIExUSSB1cGRhdGUgY291bGQgbm90IGJlIGFkZGVkIHZpYSBjb2RlbW9kICovXG4gIHRvdWNoYWJsZUhhbmRsZVN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyOiBmdW5jdGlvbiAoKTogYW55IHtcbiAgICByZXR1cm4gIXRoaXMucHJvcHMuZGlzYWJsZWQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybiB0cnVlIHRvIGNhbmNlbCBwcmVzcyBvbiBsb25nIHByZXNzLlxuICAgKi9cbiAgdG91Y2hhYmxlTG9uZ1ByZXNzQ2FuY2Vsc1ByZXNzOiBmdW5jdGlvbiAoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFBsYWNlIGFzIGNhbGxiYWNrIGZvciBhIERPTSBlbGVtZW50J3MgYG9uUmVzcG9uZGVyR3JhbnRgIGV2ZW50LlxuICAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBlIFN5bnRoZXRpYyBldmVudCBmcm9tIGV2ZW50IHN5c3RlbS5cbiAgICpcbiAgICovXG4gIC8qICRGbG93Rml4TWVbbWlzc2luZy10aGlzLWFubm90XSBUaGUgJ3RoaXMnIHR5cGUgYW5ub3RhdGlvbihzKSByZXF1aXJlZCBieVxuICAgKiBGbG93J3MgTFRJIHVwZGF0ZSBjb3VsZCBub3QgYmUgYWRkZWQgdmlhIGNvZGVtb2QgKi9cbiAgdG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyR3JhbnQ6IGZ1bmN0aW9uIChlOiBQcmVzc0V2ZW50KSB7XG4gICAgY29uc3QgZGlzcGF0Y2hJRCA9IGUuY3VycmVudFRhcmdldDtcbiAgICAvLyBTaW5jZSBlIGlzIHVzZWQgaW4gYSBjYWxsYmFjayBpbnZva2VkIG9uIGFub3RoZXIgZXZlbnQgbG9vcFxuICAgIC8vIChhcyBpbiBzZXRUaW1lb3V0IGV0YyksIHdlIG5lZWQgdG8gY2FsbCBlLnBlcnNpc3QoKSBvbiB0aGVcbiAgICAvLyBldmVudCB0byBtYWtlIHN1cmUgaXQgZG9lc24ndCBnZXQgcmV1c2VkIGluIHRoZSBldmVudCBvYmplY3QgcG9vbC5cbiAgICBlLnBlcnNpc3QoKTtcblxuICAgIHRoaXMucHJlc3NPdXREZWxheVRpbWVvdXQgJiYgY2xlYXJUaW1lb3V0KHRoaXMucHJlc3NPdXREZWxheVRpbWVvdXQpO1xuICAgIHRoaXMucHJlc3NPdXREZWxheVRpbWVvdXQgPSBudWxsO1xuXG4gICAgdGhpcy5zdGF0ZS50b3VjaGFibGUudG91Y2hTdGF0ZSA9IFN0YXRlcy5OT1RfUkVTUE9OREVSO1xuICAgIHRoaXMuc3RhdGUudG91Y2hhYmxlLnJlc3BvbmRlcklEID0gZGlzcGF0Y2hJRDtcbiAgICB0aGlzLl9yZWNlaXZlU2lnbmFsKFNpZ25hbHMuUkVTUE9OREVSX0dSQU5ULCBlKTtcbiAgICBsZXQgZGVsYXlNUyA9XG4gICAgICB0aGlzLnRvdWNoYWJsZUdldEhpZ2hsaWdodERlbGF5TVMgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IE1hdGgubWF4KHRoaXMudG91Y2hhYmxlR2V0SGlnaGxpZ2h0RGVsYXlNUygpLCAwKVxuICAgICAgICA6IEhJR0hMSUdIVF9ERUxBWV9NUztcbiAgICBkZWxheU1TID0gaXNOYU4oZGVsYXlNUykgPyBISUdITElHSFRfREVMQVlfTVMgOiBkZWxheU1TO1xuICAgIGlmIChkZWxheU1TICE9PSAwKSB7XG4gICAgICB0aGlzLnRvdWNoYWJsZURlbGF5VGltZW91dCA9IHNldFRpbWVvdXQoXG4gICAgICAgIHRoaXMuX2hhbmRsZURlbGF5LmJpbmQodGhpcywgZSksXG4gICAgICAgIGRlbGF5TVMsXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oYW5kbGVEZWxheShlKTtcbiAgICB9XG5cbiAgICBsZXQgbG9uZ0RlbGF5TVMgPVxuICAgICAgdGhpcy50b3VjaGFibGVHZXRMb25nUHJlc3NEZWxheU1TICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBNYXRoLm1heCh0aGlzLnRvdWNoYWJsZUdldExvbmdQcmVzc0RlbGF5TVMoKSwgMTApXG4gICAgICAgIDogTE9OR19QUkVTU19ERUxBWV9NUztcbiAgICBsb25nRGVsYXlNUyA9IGlzTmFOKGxvbmdEZWxheU1TKSA/IExPTkdfUFJFU1NfREVMQVlfTVMgOiBsb25nRGVsYXlNUztcbiAgICB0aGlzLmxvbmdQcmVzc0RlbGF5VGltZW91dCA9IHNldFRpbWVvdXQoXG4gICAgICB0aGlzLl9oYW5kbGVMb25nRGVsYXkuYmluZCh0aGlzLCBlKSxcbiAgICAgIGxvbmdEZWxheU1TICsgZGVsYXlNUyxcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBQbGFjZSBhcyBjYWxsYmFjayBmb3IgYSBET00gZWxlbWVudCdzIGBvblJlc3BvbmRlclJlbGVhc2VgIGV2ZW50LlxuICAgKi9cbiAgLyogJEZsb3dGaXhNZVttaXNzaW5nLXRoaXMtYW5ub3RdIFRoZSAndGhpcycgdHlwZSBhbm5vdGF0aW9uKHMpIHJlcXVpcmVkIGJ5XG4gICAqIEZsb3cncyBMVEkgdXBkYXRlIGNvdWxkIG5vdCBiZSBhZGRlZCB2aWEgY29kZW1vZCAqL1xuICB0b3VjaGFibGVIYW5kbGVSZXNwb25kZXJSZWxlYXNlOiBmdW5jdGlvbiAoZTogUHJlc3NFdmVudCkge1xuICAgIHRoaXMucHJlc3NJbkxvY2F0aW9uID0gbnVsbDtcbiAgICB0aGlzLl9yZWNlaXZlU2lnbmFsKFNpZ25hbHMuUkVTUE9OREVSX1JFTEVBU0UsIGUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBQbGFjZSBhcyBjYWxsYmFjayBmb3IgYSBET00gZWxlbWVudCdzIGBvblJlc3BvbmRlclRlcm1pbmF0ZWAgZXZlbnQuXG4gICAqL1xuICAvKiAkRmxvd0ZpeE1lW21pc3NpbmctdGhpcy1hbm5vdF0gVGhlICd0aGlzJyB0eXBlIGFubm90YXRpb24ocykgcmVxdWlyZWQgYnlcbiAgICogRmxvdydzIExUSSB1cGRhdGUgY291bGQgbm90IGJlIGFkZGVkIHZpYSBjb2RlbW9kICovXG4gIHRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlclRlcm1pbmF0ZTogZnVuY3Rpb24gKGU6IFByZXNzRXZlbnQpIHtcbiAgICB0aGlzLnByZXNzSW5Mb2NhdGlvbiA9IG51bGw7XG4gICAgdGhpcy5fcmVjZWl2ZVNpZ25hbChTaWduYWxzLlJFU1BPTkRFUl9URVJNSU5BVEVELCBlKTtcbiAgfSxcblxuICAvKipcbiAgICogUGxhY2UgYXMgY2FsbGJhY2sgZm9yIGEgRE9NIGVsZW1lbnQncyBgb25SZXNwb25kZXJNb3ZlYCBldmVudC5cbiAgICovXG4gIC8qICRGbG93Rml4TWVbbWlzc2luZy10aGlzLWFubm90XSBUaGUgJ3RoaXMnIHR5cGUgYW5ub3RhdGlvbihzKSByZXF1aXJlZCBieVxuICAgKiBGbG93J3MgTFRJIHVwZGF0ZSBjb3VsZCBub3QgYmUgYWRkZWQgdmlhIGNvZGVtb2QgKi9cbiAgdG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyTW92ZTogZnVuY3Rpb24gKGU6IFByZXNzRXZlbnQpIHtcbiAgICAvLyBNZWFzdXJlbWVudCBtYXkgbm90IGhhdmUgcmV0dXJuZWQgeWV0LlxuICAgIGlmICghdGhpcy5zdGF0ZS50b3VjaGFibGUucG9zaXRpb25PbkFjdGl2YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcG9zaXRpb25PbkFjdGl2YXRlID0gdGhpcy5zdGF0ZS50b3VjaGFibGUucG9zaXRpb25PbkFjdGl2YXRlO1xuICAgIGNvbnN0IGRpbWVuc2lvbnNPbkFjdGl2YXRlID0gdGhpcy5zdGF0ZS50b3VjaGFibGUuZGltZW5zaW9uc09uQWN0aXZhdGU7XG4gICAgY29uc3QgcHJlc3NSZWN0T2Zmc2V0ID0gdGhpcy50b3VjaGFibGVHZXRQcmVzc1JlY3RPZmZzZXRcbiAgICAgID8gdGhpcy50b3VjaGFibGVHZXRQcmVzc1JlY3RPZmZzZXQoKVxuICAgICAgOiB7XG4gICAgICAgICAgbGVmdDogUFJFU1NfRVhQQU5EX1BYLFxuICAgICAgICAgIHJpZ2h0OiBQUkVTU19FWFBBTkRfUFgsXG4gICAgICAgICAgdG9wOiBQUkVTU19FWFBBTkRfUFgsXG4gICAgICAgICAgYm90dG9tOiBQUkVTU19FWFBBTkRfUFgsXG4gICAgICAgIH07XG5cbiAgICBsZXQgcHJlc3NFeHBhbmRMZWZ0ID0gcHJlc3NSZWN0T2Zmc2V0LmxlZnQ7XG4gICAgbGV0IHByZXNzRXhwYW5kVG9wID0gcHJlc3NSZWN0T2Zmc2V0LnRvcDtcbiAgICBsZXQgcHJlc3NFeHBhbmRSaWdodCA9IHByZXNzUmVjdE9mZnNldC5yaWdodDtcbiAgICBsZXQgcHJlc3NFeHBhbmRCb3R0b20gPSBwcmVzc1JlY3RPZmZzZXQuYm90dG9tO1xuXG4gICAgY29uc3QgaGl0U2xvcCA9IHRoaXMudG91Y2hhYmxlR2V0SGl0U2xvcFxuICAgICAgPyB0aGlzLnRvdWNoYWJsZUdldEhpdFNsb3AoKVxuICAgICAgOiBudWxsO1xuXG4gICAgaWYgKGhpdFNsb3ApIHtcbiAgICAgIHByZXNzRXhwYW5kTGVmdCArPSBoaXRTbG9wLmxlZnQgfHwgMDtcbiAgICAgIHByZXNzRXhwYW5kVG9wICs9IGhpdFNsb3AudG9wIHx8IDA7XG4gICAgICBwcmVzc0V4cGFuZFJpZ2h0ICs9IGhpdFNsb3AucmlnaHQgfHwgMDtcbiAgICAgIHByZXNzRXhwYW5kQm90dG9tICs9IGhpdFNsb3AuYm90dG9tIHx8IDA7XG4gICAgfVxuXG4gICAgY29uc3QgdG91Y2ggPSBleHRyYWN0U2luZ2xlVG91Y2goZS5uYXRpdmVFdmVudCk7XG4gICAgY29uc3QgcGFnZVggPSB0b3VjaCAmJiB0b3VjaC5wYWdlWDtcbiAgICBjb25zdCBwYWdlWSA9IHRvdWNoICYmIHRvdWNoLnBhZ2VZO1xuXG4gICAgaWYgKHRoaXMucHJlc3NJbkxvY2F0aW9uKSB7XG4gICAgICBjb25zdCBtb3ZlZERpc3RhbmNlID0gdGhpcy5fZ2V0RGlzdGFuY2VCZXR3ZWVuUG9pbnRzKFxuICAgICAgICBwYWdlWCxcbiAgICAgICAgcGFnZVksXG4gICAgICAgIHRoaXMucHJlc3NJbkxvY2F0aW9uLnBhZ2VYLFxuICAgICAgICB0aGlzLnByZXNzSW5Mb2NhdGlvbi5wYWdlWSxcbiAgICAgICk7XG4gICAgICBpZiAobW92ZWREaXN0YW5jZSA+IExPTkdfUFJFU1NfQUxMT1dFRF9NT1ZFTUVOVCkge1xuICAgICAgICB0aGlzLl9jYW5jZWxMb25nUHJlc3NEZWxheVRpbWVvdXQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBpc1RvdWNoV2l0aGluQWN0aXZlID1cbiAgICAgIHBhZ2VYID4gcG9zaXRpb25PbkFjdGl2YXRlLmxlZnQgLSBwcmVzc0V4cGFuZExlZnQgJiZcbiAgICAgIHBhZ2VZID4gcG9zaXRpb25PbkFjdGl2YXRlLnRvcCAtIHByZXNzRXhwYW5kVG9wICYmXG4gICAgICBwYWdlWCA8XG4gICAgICAgIHBvc2l0aW9uT25BY3RpdmF0ZS5sZWZ0ICtcbiAgICAgICAgICBkaW1lbnNpb25zT25BY3RpdmF0ZS53aWR0aCArXG4gICAgICAgICAgcHJlc3NFeHBhbmRSaWdodCAmJlxuICAgICAgcGFnZVkgPFxuICAgICAgICBwb3NpdGlvbk9uQWN0aXZhdGUudG9wICtcbiAgICAgICAgICBkaW1lbnNpb25zT25BY3RpdmF0ZS5oZWlnaHQgK1xuICAgICAgICAgIHByZXNzRXhwYW5kQm90dG9tO1xuICAgIGlmIChpc1RvdWNoV2l0aGluQWN0aXZlKSB7XG4gICAgICBjb25zdCBwcmV2U3RhdGUgPSB0aGlzLnN0YXRlLnRvdWNoYWJsZS50b3VjaFN0YXRlO1xuICAgICAgdGhpcy5fcmVjZWl2ZVNpZ25hbChTaWduYWxzLkVOVEVSX1BSRVNTX1JFQ1QsIGUpO1xuICAgICAgY29uc3QgY3VyU3RhdGUgPSB0aGlzLnN0YXRlLnRvdWNoYWJsZS50b3VjaFN0YXRlO1xuICAgICAgaWYgKFxuICAgICAgICBjdXJTdGF0ZSA9PT0gU3RhdGVzLlJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19JTiAmJlxuICAgICAgICBwcmV2U3RhdGUgIT09IFN0YXRlcy5SRVNQT05ERVJfSU5BQ1RJVkVfUFJFU1NfSU5cbiAgICAgICkge1xuICAgICAgICAvLyBmaXggZm9yIHQ3OTY3NDIwXG4gICAgICAgIHRoaXMuX2NhbmNlbExvbmdQcmVzc0RlbGF5VGltZW91dCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9jYW5jZWxMb25nUHJlc3NEZWxheVRpbWVvdXQoKTtcbiAgICAgIHRoaXMuX3JlY2VpdmVTaWduYWwoU2lnbmFscy5MRUFWRV9QUkVTU19SRUNULCBlKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgaXRlbSByZWNlaXZlcyBmb2N1cy4gTWl4ZXJzIG1pZ2h0IG92ZXJyaWRlIHRoaXMgdG9cbiAgICogdmlzdWFsbHkgZGlzdGluZ3Vpc2ggdGhlIGBWaXN1YWxSZWN0YCBzbyB0aGF0IHRoZSB1c2VyIGtub3dzIHRoYXQgaXRcbiAgICogY3VycmVudGx5IGhhcyB0aGUgZm9jdXMuIE1vc3QgcGxhdGZvcm1zIG9ubHkgc3VwcG9ydCBhIHNpbmdsZSBlbGVtZW50IGJlaW5nXG4gICAqIGZvY3VzZWQgYXQgYSB0aW1lLCBpbiB3aGljaCBjYXNlIHRoZXJlIG1heSBoYXZlIGJlZW4gYSBwcmV2aW91c2x5IGZvY3VzZWRcbiAgICogZWxlbWVudCB0aGF0IHdhcyBibHVycmVkIGp1c3QgcHJpb3IgdG8gdGhpcy4gVGhpcyBjYW4gYmUgb3ZlcnJpZGRlbiB3aGVuXG4gICAqIHVzaW5nIGBUb3VjaGFibGUuTWl4aW4ud2l0aG91dERlZmF1bHRGb2N1c0FuZEJsdXJgLlxuICAgKi9cbiAgLyogJEZsb3dGaXhNZVttaXNzaW5nLXRoaXMtYW5ub3RdIFRoZSAndGhpcycgdHlwZSBhbm5vdGF0aW9uKHMpIHJlcXVpcmVkIGJ5XG4gICAqIEZsb3cncyBMVEkgdXBkYXRlIGNvdWxkIG5vdCBiZSBhZGRlZCB2aWEgY29kZW1vZCAqL1xuICB0b3VjaGFibGVIYW5kbGVGb2N1czogZnVuY3Rpb24gKGU6IEV2ZW50KSB7XG4gICAgdGhpcy5wcm9wcy5vbkZvY3VzICYmIHRoaXMucHJvcHMub25Gb2N1cyhlKTtcbiAgfSxcblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBpdGVtIGxvc2VzIGZvY3VzLiBNaXhlcnMgbWlnaHQgb3ZlcnJpZGUgdGhpcyB0b1xuICAgKiB2aXN1YWxseSBkaXN0aW5ndWlzaCB0aGUgYFZpc3VhbFJlY3RgIHNvIHRoYXQgdGhlIHVzZXIga25vd3MgdGhhdCBpdFxuICAgKiBubyBsb25nZXIgaGFzIGZvY3VzLiBNb3N0IHBsYXRmb3JtcyBvbmx5IHN1cHBvcnQgYSBzaW5nbGUgZWxlbWVudCBiZWluZ1xuICAgKiBmb2N1c2VkIGF0IGEgdGltZSwgaW4gd2hpY2ggY2FzZSB0aGUgZm9jdXMgbWF5IGhhdmUgbW92ZWQgdG8gYW5vdGhlci5cbiAgICogVGhpcyBjYW4gYmUgb3ZlcnJpZGRlbiB3aGVuIHVzaW5nXG4gICAqIGBUb3VjaGFibGUuTWl4aW4ud2l0aG91dERlZmF1bHRGb2N1c0FuZEJsdXJgLlxuICAgKi9cbiAgLyogJEZsb3dGaXhNZVttaXNzaW5nLXRoaXMtYW5ub3RdIFRoZSAndGhpcycgdHlwZSBhbm5vdGF0aW9uKHMpIHJlcXVpcmVkIGJ5XG4gICAqIEZsb3cncyBMVEkgdXBkYXRlIGNvdWxkIG5vdCBiZSBhZGRlZCB2aWEgY29kZW1vZCAqL1xuICB0b3VjaGFibGVIYW5kbGVCbHVyOiBmdW5jdGlvbiAoZTogRXZlbnQpIHtcbiAgICB0aGlzLnByb3BzLm9uQmx1ciAmJiB0aGlzLnByb3BzLm9uQmx1cihlKTtcbiAgfSxcblxuICAvLyA9PT09IEFic3RyYWN0IEFwcGxpY2F0aW9uIENhbGxiYWNrcyA9PT09XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgaXRlbSBzaG91bGQgYmUgaGlnaGxpZ2h0ZWQuIE1peGVycyBzaG91bGQgaW1wbGVtZW50IHRoaXNcbiAgICogdG8gdmlzdWFsbHkgZGlzdGluZ3Vpc2ggdGhlIGBWaXN1YWxSZWN0YCBzbyB0aGF0IHRoZSB1c2VyIGtub3dzIHRoYXRcbiAgICogcmVsZWFzaW5nIGEgdG91Y2ggd2lsbCByZXN1bHQgaW4gYSBcInNlbGVjdGlvblwiIChhbmFsb2cgdG8gY2xpY2spLlxuICAgKlxuICAgKiBAYWJzdHJhY3RcbiAgICogdG91Y2hhYmxlSGFuZGxlQWN0aXZlUHJlc3NJbjogZnVuY3Rpb24sXG4gICAqL1xuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGl0ZW0gaXMgXCJhY3RpdmVcIiAoaW4gdGhhdCBpdCBpcyBzdGlsbCBlbGlnaWJsZSB0byBiZWNvbWVcbiAgICogYSBcInNlbGVjdFwiKSBidXQgdGhlIHRvdWNoIGhhcyBsZWZ0IHRoZSBgUHJlc3NSZWN0YC4gVXN1YWxseSB0aGUgbWl4ZXIgd2lsbFxuICAgKiB3YW50IHRvIHVuaGlnaGxpZ2h0IHRoZSBgVmlzdWFsUmVjdGAuIElmIHRoZSB1c2VyICh3aGlsZSBwcmVzc2luZykgbW92ZXNcbiAgICogYmFjayBpbnRvIHRoZSBgUHJlc3NSZWN0YCBgdG91Y2hhYmxlSGFuZGxlQWN0aXZlUHJlc3NJbmAgd2lsbCBiZSBpbnZva2VkXG4gICAqIGFnYWluIGFuZCB0aGUgbWl4ZXIgc2hvdWxkIHByb2JhYmx5IGhpZ2hsaWdodCB0aGUgYFZpc3VhbFJlY3RgIGFnYWluLiBUaGlzXG4gICAqIGV2ZW50IHdpbGwgbm90IGZpcmUgb24gYW4gYHRvdWNoRW5kL21vdXNlVXBgIGV2ZW50LCBvbmx5IG1vdmUgZXZlbnRzIHdoaWxlXG4gICAqIHRoZSB1c2VyIGlzIGRlcHJlc3NpbmcgdGhlIG1vdXNlL3RvdWNoLlxuICAgKlxuICAgKiBAYWJzdHJhY3RcbiAgICogdG91Y2hhYmxlSGFuZGxlQWN0aXZlUHJlc3NPdXQ6IGZ1bmN0aW9uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGl0ZW0gaXMgXCJzZWxlY3RlZFwiIC0gbWVhbmluZyB0aGUgaW50ZXJhY3Rpb24gZW5kZWQgYnlcbiAgICogbGV0dGluZyB1cCB3aGlsZSB0aGUgaXRlbSB3YXMgZWl0aGVyIGluIHRoZSBzdGF0ZVxuICAgKiBgUkVTUE9OREVSX0FDVElWRV9QUkVTU19JTmAgb3IgYFJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19JTmAuXG4gICAqXG4gICAqIEBhYnN0cmFjdFxuICAgKiB0b3VjaGFibGVIYW5kbGVQcmVzczogZnVuY3Rpb25cbiAgICovXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgaXRlbSBpcyBsb25nIHByZXNzZWQgLSBtZWFuaW5nIHRoZSBpbnRlcmFjdGlvbiBlbmRlZCBieVxuICAgKiBsZXR0aW5nIHVwIHdoaWxlIHRoZSBpdGVtIHdhcyBpbiBgUkVTUE9OREVSX0FDVElWRV9MT05HX1BSRVNTX0lOYC4gSWZcbiAgICogYHRvdWNoYWJsZUhhbmRsZUxvbmdQcmVzc2AgaXMgKm5vdCogcHJvdmlkZWQsIGB0b3VjaGFibGVIYW5kbGVQcmVzc2Agd2lsbFxuICAgKiBiZSBjYWxsZWQgYXMgaXQgbm9ybWFsbHkgaXMuIElmIGB0b3VjaGFibGVIYW5kbGVMb25nUHJlc3NgIGlzIHByb3ZpZGVkLCBieVxuICAgKiBkZWZhdWx0IGFueSBgdG91Y2hhYmxlSGFuZGxlUHJlc3NgIGNhbGxiYWNrIHdpbGwgbm90IGJlIGludm9rZWQuIFRvXG4gICAqIG92ZXJyaWRlIHRoaXMgZGVmYXVsdCBiZWhhdmlvciwgb3ZlcnJpZGUgYHRvdWNoYWJsZUxvbmdQcmVzc0NhbmNlbHNQcmVzc2BcbiAgICogdG8gcmV0dXJuIGZhbHNlLiBBcyBhIHJlc3VsdCwgYHRvdWNoYWJsZUhhbmRsZVByZXNzYCB3aWxsIGJlIGNhbGxlZCB3aGVuXG4gICAqIGxpZnRpbmcgdXAsIGV2ZW4gaWYgYHRvdWNoYWJsZUhhbmRsZUxvbmdQcmVzc2AgaGFzIGFsc28gYmVlbiBjYWxsZWQuXG4gICAqXG4gICAqIEBhYnN0cmFjdFxuICAgKiB0b3VjaGFibGVIYW5kbGVMb25nUHJlc3M6IGZ1bmN0aW9uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgbWlsbGlzIHRvIHdhaXQgYmVmb3JlIHRyaWdnZXJpbmcgYSBoaWdobGlnaHQuXG4gICAqXG4gICAqIEBhYnN0cmFjdFxuICAgKiB0b3VjaGFibGVHZXRIaWdobGlnaHREZWxheU1TOiBmdW5jdGlvblxuICAgKi9cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYW1vdW50IHRvIGV4dGVuZCB0aGUgYEhpdFJlY3RgIGludG8gdGhlIGBQcmVzc1JlY3RgLiBQb3NpdGl2ZVxuICAgKiBudW1iZXJzIG1lYW4gdGhlIHNpemUgZXhwYW5kcyBvdXR3YXJkcy5cbiAgICpcbiAgICogQGFic3RyYWN0XG4gICAqIHRvdWNoYWJsZUdldFByZXNzUmVjdE9mZnNldDogZnVuY3Rpb25cbiAgICovXG5cbiAgLy8gPT09PSBJbnRlcm5hbCBMb2dpYyA9PT09XG5cbiAgLyoqXG4gICAqIE1lYXN1cmVzIHRoZSBgSGl0UmVjdGAgbm9kZSBvbiBhY3RpdmF0aW9uLiBUaGUgQm91bmRpbmcgcmVjdGFuZ2xlIGlzIHdpdGhcbiAgICogcmVzcGVjdCB0byB2aWV3cG9ydCAtIG5vdCBwYWdlLCBzbyBhZGRpbmcgdGhlIGBwYWdlWE9mZnNldC9wYWdlWU9mZnNldGBcbiAgICogc2hvdWxkIHJlc3VsdCBpbiBwb2ludHMgdGhhdCBhcmUgaW4gdGhlIHNhbWUgY29vcmRpbmF0ZSBzeXN0ZW0gYXMgYW5cbiAgICogZXZlbnQncyBgZ2xvYmFsWC9nbG9iYWxZYCBkYXRhIHZhbHVlcy5cbiAgICpcbiAgICogLSBDb25zaWRlciBjYWNoaW5nIHRoaXMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgY29tcG9uZW50LCBvciBwb3NzaWJseVxuICAgKiAgIGJlaW5nIGFibGUgdG8gc2hhcmUgdGhpcyBjYWNoZSBiZXR3ZWVuIGFueSBgU2Nyb2xsTWFwYCB2aWV3LlxuICAgKlxuICAgKiBAc2lkZWVmZmVjdHNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIC8qICRGbG93Rml4TWVbbWlzc2luZy10aGlzLWFubm90XSBUaGUgJ3RoaXMnIHR5cGUgYW5ub3RhdGlvbihzKSByZXF1aXJlZCBieVxuICAgKiBGbG93J3MgTFRJIHVwZGF0ZSBjb3VsZCBub3QgYmUgYWRkZWQgdmlhIGNvZGVtb2QgKi9cbiAgX3JlbWVhc3VyZU1ldHJpY3NPbkFjdGl2YXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCByZXNwb25kZXJJRCA9IHRoaXMuc3RhdGUudG91Y2hhYmxlLnJlc3BvbmRlcklEO1xuICAgIGlmIChyZXNwb25kZXJJRCA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZXNwb25kZXJJRCA9PT0gJ251bWJlcicpIHtcbiAgICAgIFVJTWFuYWdlci5tZWFzdXJlKHJlc3BvbmRlcklELCB0aGlzLl9oYW5kbGVRdWVyeUxheW91dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3BvbmRlcklELm1lYXN1cmUodGhpcy5faGFuZGxlUXVlcnlMYXlvdXQpO1xuICAgIH1cbiAgfSxcblxuICAvKiAkRmxvd0ZpeE1lW21pc3NpbmctdGhpcy1hbm5vdF0gVGhlICd0aGlzJyB0eXBlIGFubm90YXRpb24ocykgcmVxdWlyZWQgYnlcbiAgICogRmxvdydzIExUSSB1cGRhdGUgY291bGQgbm90IGJlIGFkZGVkIHZpYSBjb2RlbW9kICovXG4gIF9oYW5kbGVRdWVyeUxheW91dDogZnVuY3Rpb24gKFxuICAgIGw6IG51bWJlcixcbiAgICB0OiBudW1iZXIsXG4gICAgdzogbnVtYmVyLFxuICAgIGg6IG51bWJlcixcbiAgICBnbG9iYWxYOiBudW1iZXIsXG4gICAgZ2xvYmFsWTogbnVtYmVyLFxuICApIHtcbiAgICAvL2Rvbid0IGRvIGFueXRoaW5nIFVJTWFuYWdlciBmYWlsZWQgdG8gbWVhc3VyZSBub2RlXG4gICAgaWYgKCFsICYmICF0ICYmICF3ICYmICFoICYmICFnbG9iYWxYICYmICFnbG9iYWxZKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc3RhdGUudG91Y2hhYmxlLnBvc2l0aW9uT25BY3RpdmF0ZSAmJlxuICAgICAgUG9zaXRpb24ucmVsZWFzZSh0aGlzLnN0YXRlLnRvdWNoYWJsZS5wb3NpdGlvbk9uQWN0aXZhdGUpO1xuICAgIHRoaXMuc3RhdGUudG91Y2hhYmxlLmRpbWVuc2lvbnNPbkFjdGl2YXRlICYmXG4gICAgICBCb3VuZGluZ0RpbWVuc2lvbnMucmVsZWFzZSh0aGlzLnN0YXRlLnRvdWNoYWJsZS5kaW1lbnNpb25zT25BY3RpdmF0ZSk7XG4gICAgdGhpcy5zdGF0ZS50b3VjaGFibGUucG9zaXRpb25PbkFjdGl2YXRlID0gUG9zaXRpb24uZ2V0UG9vbGVkKFxuICAgICAgZ2xvYmFsWCxcbiAgICAgIGdsb2JhbFksXG4gICAgKTtcbiAgICB0aGlzLnN0YXRlLnRvdWNoYWJsZS5kaW1lbnNpb25zT25BY3RpdmF0ZSA9IEJvdW5kaW5nRGltZW5zaW9ucy5nZXRQb29sZWQoXG4gICAgICB3LFxuICAgICAgaCxcbiAgICApO1xuICB9LFxuXG4gIC8qICRGbG93Rml4TWVbbWlzc2luZy10aGlzLWFubm90XSBUaGUgJ3RoaXMnIHR5cGUgYW5ub3RhdGlvbihzKSByZXF1aXJlZCBieVxuICAgKiBGbG93J3MgTFRJIHVwZGF0ZSBjb3VsZCBub3QgYmUgYWRkZWQgdmlhIGNvZGVtb2QgKi9cbiAgX2hhbmRsZURlbGF5OiBmdW5jdGlvbiAoZTogUHJlc3NFdmVudCkge1xuICAgIHRoaXMudG91Y2hhYmxlRGVsYXlUaW1lb3V0ID0gbnVsbDtcbiAgICB0aGlzLl9yZWNlaXZlU2lnbmFsKFNpZ25hbHMuREVMQVksIGUpO1xuICB9LFxuXG4gIC8qICRGbG93Rml4TWVbbWlzc2luZy10aGlzLWFubm90XSBUaGUgJ3RoaXMnIHR5cGUgYW5ub3RhdGlvbihzKSByZXF1aXJlZCBieVxuICAgKiBGbG93J3MgTFRJIHVwZGF0ZSBjb3VsZCBub3QgYmUgYWRkZWQgdmlhIGNvZGVtb2QgKi9cbiAgX2hhbmRsZUxvbmdEZWxheTogZnVuY3Rpb24gKGU6IFByZXNzRXZlbnQpIHtcbiAgICB0aGlzLmxvbmdQcmVzc0RlbGF5VGltZW91dCA9IG51bGw7XG4gICAgY29uc3QgY3VyU3RhdGUgPSB0aGlzLnN0YXRlLnRvdWNoYWJsZS50b3VjaFN0YXRlO1xuICAgIGlmIChcbiAgICAgIGN1clN0YXRlID09PSBTdGF0ZXMuUkVTUE9OREVSX0FDVElWRV9QUkVTU19JTiB8fFxuICAgICAgY3VyU3RhdGUgPT09IFN0YXRlcy5SRVNQT05ERVJfQUNUSVZFX0xPTkdfUFJFU1NfSU5cbiAgICApIHtcbiAgICAgIHRoaXMuX3JlY2VpdmVTaWduYWwoU2lnbmFscy5MT05HX1BSRVNTX0RFVEVDVEVELCBlKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlY2VpdmVzIGEgc3RhdGUgbWFjaGluZSBzaWduYWwsIHBlcmZvcm1zIHNpZGUgZWZmZWN0cyBvZiB0aGUgdHJhbnNpdGlvblxuICAgKiBhbmQgc3RvcmVzIHRoZSBuZXcgc3RhdGUuIFZhbGlkYXRlcyB0aGUgdHJhbnNpdGlvbiBhcyB3ZWxsLlxuICAgKlxuICAgKiBAcGFyYW0ge1NpZ25hbHN9IHNpZ25hbCBTdGF0ZSBtYWNoaW5lIHNpZ25hbC5cbiAgICogQHRocm93cyBFcnJvciBpZiBpbnZhbGlkIHN0YXRlIHRyYW5zaXRpb24gb3IgdW5yZWNvZ25pemVkIHNpZ25hbC5cbiAgICogQHNpZGVlZmZlY3RzXG4gICAqL1xuICAvKiAkRmxvd0ZpeE1lW21pc3NpbmctdGhpcy1hbm5vdF0gVGhlICd0aGlzJyB0eXBlIGFubm90YXRpb24ocykgcmVxdWlyZWQgYnlcbiAgICogRmxvdydzIExUSSB1cGRhdGUgY291bGQgbm90IGJlIGFkZGVkIHZpYSBjb2RlbW9kICovXG4gIF9yZWNlaXZlU2lnbmFsOiBmdW5jdGlvbiAoc2lnbmFsOiBTaWduYWwsIGU6IFByZXNzRXZlbnQpIHtcbiAgICBjb25zdCByZXNwb25kZXJJRCA9IHRoaXMuc3RhdGUudG91Y2hhYmxlLnJlc3BvbmRlcklEO1xuICAgIGNvbnN0IGN1clN0YXRlID0gdGhpcy5zdGF0ZS50b3VjaGFibGUudG91Y2hTdGF0ZTtcbiAgICBjb25zdCBuZXh0U3RhdGUgPSBUcmFuc2l0aW9uc1tjdXJTdGF0ZV0gJiYgVHJhbnNpdGlvbnNbY3VyU3RhdGVdW3NpZ25hbF07XG4gICAgaWYgKCFyZXNwb25kZXJJRCAmJiBzaWduYWwgPT09IFNpZ25hbHMuUkVTUE9OREVSX1JFTEVBU0UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFuZXh0U3RhdGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1VucmVjb2duaXplZCBzaWduYWwgYCcgK1xuICAgICAgICAgIHNpZ25hbCArXG4gICAgICAgICAgJ2Agb3Igc3RhdGUgYCcgK1xuICAgICAgICAgIGN1clN0YXRlICtcbiAgICAgICAgICAnYCBmb3IgVG91Y2hhYmxlIHJlc3BvbmRlciBgJyArXG4gICAgICAgICAgdHlwZW9mIHRoaXMuc3RhdGUudG91Y2hhYmxlLnJlc3BvbmRlcklEID09PVxuICAgICAgICAnbnVtYmVyJ1xuICAgICAgICAgID8gdGhpcy5zdGF0ZS50b3VjaGFibGUucmVzcG9uZGVySURcbiAgICAgICAgICA6ICdob3N0IGNvbXBvbmVudCcgKyAnYCcsXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAobmV4dFN0YXRlID09PSBTdGF0ZXMuRVJST1IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RvdWNoYWJsZSBjYW5ub3QgdHJhbnNpdGlvbiBmcm9tIGAnICtcbiAgICAgICAgICBjdXJTdGF0ZSArXG4gICAgICAgICAgJ2AgdG8gYCcgK1xuICAgICAgICAgIHNpZ25hbCArXG4gICAgICAgICAgJ2AgZm9yIHJlc3BvbmRlciBgJyArXG4gICAgICAgICAgdHlwZW9mIHRoaXMuc3RhdGUudG91Y2hhYmxlLnJlc3BvbmRlcklEID09PVxuICAgICAgICAnbnVtYmVyJ1xuICAgICAgICAgID8gdGhpcy5zdGF0ZS50b3VjaGFibGUucmVzcG9uZGVySURcbiAgICAgICAgICA6ICc8PGhvc3QgY29tcG9uZW50Pj4nICsgJ2AnLFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGN1clN0YXRlICE9PSBuZXh0U3RhdGUpIHtcbiAgICAgIHRoaXMuX3BlcmZvcm1TaWRlRWZmZWN0c0ZvclRyYW5zaXRpb24oY3VyU3RhdGUsIG5leHRTdGF0ZSwgc2lnbmFsLCBlKTtcbiAgICAgIHRoaXMuc3RhdGUudG91Y2hhYmxlLnRvdWNoU3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgfVxuICB9LFxuXG4gIC8qICRGbG93Rml4TWVbbWlzc2luZy10aGlzLWFubm90XSBUaGUgJ3RoaXMnIHR5cGUgYW5ub3RhdGlvbihzKSByZXF1aXJlZCBieVxuICAgKiBGbG93J3MgTFRJIHVwZGF0ZSBjb3VsZCBub3QgYmUgYWRkZWQgdmlhIGNvZGVtb2QgKi9cbiAgX2NhbmNlbExvbmdQcmVzc0RlbGF5VGltZW91dDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMubG9uZ1ByZXNzRGVsYXlUaW1lb3V0ICYmIGNsZWFyVGltZW91dCh0aGlzLmxvbmdQcmVzc0RlbGF5VGltZW91dCk7XG4gICAgdGhpcy5sb25nUHJlc3NEZWxheVRpbWVvdXQgPSBudWxsO1xuICB9LFxuXG4gIF9pc0hpZ2hsaWdodDogZnVuY3Rpb24gKHN0YXRlOiBTdGF0ZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICBzdGF0ZSA9PT0gU3RhdGVzLlJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfSU4gfHxcbiAgICAgIHN0YXRlID09PSBTdGF0ZXMuUkVTUE9OREVSX0FDVElWRV9MT05HX1BSRVNTX0lOXG4gICAgKTtcbiAgfSxcblxuICAvKiAkRmxvd0ZpeE1lW21pc3NpbmctdGhpcy1hbm5vdF0gVGhlICd0aGlzJyB0eXBlIGFubm90YXRpb24ocykgcmVxdWlyZWQgYnlcbiAgICogRmxvdydzIExUSSB1cGRhdGUgY291bGQgbm90IGJlIGFkZGVkIHZpYSBjb2RlbW9kICovXG4gIF9zYXZlUHJlc3NJbkxvY2F0aW9uOiBmdW5jdGlvbiAoZTogUHJlc3NFdmVudCkge1xuICAgIGNvbnN0IHRvdWNoID0gZXh0cmFjdFNpbmdsZVRvdWNoKGUubmF0aXZlRXZlbnQpO1xuICAgIGNvbnN0IHBhZ2VYID0gdG91Y2ggJiYgdG91Y2gucGFnZVg7XG4gICAgY29uc3QgcGFnZVkgPSB0b3VjaCAmJiB0b3VjaC5wYWdlWTtcbiAgICBjb25zdCBsb2NhdGlvblggPSB0b3VjaCAmJiB0b3VjaC5sb2NhdGlvblg7XG4gICAgY29uc3QgbG9jYXRpb25ZID0gdG91Y2ggJiYgdG91Y2gubG9jYXRpb25ZO1xuICAgIHRoaXMucHJlc3NJbkxvY2F0aW9uID0ge3BhZ2VYLCBwYWdlWSwgbG9jYXRpb25YLCBsb2NhdGlvbll9O1xuICB9LFxuXG4gIF9nZXREaXN0YW5jZUJldHdlZW5Qb2ludHM6IGZ1bmN0aW9uIChcbiAgICBhWDogbnVtYmVyLFxuICAgIGFZOiBudW1iZXIsXG4gICAgYlg6IG51bWJlcixcbiAgICBiWTogbnVtYmVyLFxuICApOiBudW1iZXIge1xuICAgIGNvbnN0IGRlbHRhWCA9IGFYIC0gYlg7XG4gICAgY29uc3QgZGVsdGFZID0gYVkgLSBiWTtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KGRlbHRhWCAqIGRlbHRhWCArIGRlbHRhWSAqIGRlbHRhWSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFdpbGwgcGVyZm9ybSBhIHRyYW5zaXRpb24gYmV0d2VlbiB0b3VjaGFibGUgc3RhdGVzLCBhbmQgaWRlbnRpZnkgYW55XG4gICAqIGhpZ2hsaWdodGluZyBvciB1bmhpZ2hsaWdodGluZyB0aGF0IG11c3QgYmUgcGVyZm9ybWVkIGZvciB0aGlzIHBhcnRpY3VsYXJcbiAgICogdHJhbnNpdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtTdGF0ZXN9IGN1clN0YXRlIEN1cnJlbnQgVG91Y2hhYmxlIHN0YXRlLlxuICAgKiBAcGFyYW0ge1N0YXRlc30gbmV4dFN0YXRlIE5leHQgVG91Y2hhYmxlIHN0YXRlLlxuICAgKiBAcGFyYW0ge1NpZ25hbH0gc2lnbmFsIFNpZ25hbCB0aGF0IHRyaWdnZXJlZCB0aGUgdHJhbnNpdGlvbi5cbiAgICogQHBhcmFtIHtFdmVudH0gZSBOYXRpdmUgZXZlbnQuXG4gICAqIEBzaWRlZWZmZWN0c1xuICAgKi9cbiAgLyogJEZsb3dGaXhNZVttaXNzaW5nLXRoaXMtYW5ub3RdIFRoZSAndGhpcycgdHlwZSBhbm5vdGF0aW9uKHMpIHJlcXVpcmVkIGJ5XG4gICAqIEZsb3cncyBMVEkgdXBkYXRlIGNvdWxkIG5vdCBiZSBhZGRlZCB2aWEgY29kZW1vZCAqL1xuICBfcGVyZm9ybVNpZGVFZmZlY3RzRm9yVHJhbnNpdGlvbjogZnVuY3Rpb24gKFxuICAgIGN1clN0YXRlOiBTdGF0ZSxcbiAgICBuZXh0U3RhdGU6IFN0YXRlLFxuICAgIHNpZ25hbDogU2lnbmFsLFxuICAgIGU6IFByZXNzRXZlbnQsXG4gICkge1xuICAgIGNvbnN0IGN1cklzSGlnaGxpZ2h0ID0gdGhpcy5faXNIaWdobGlnaHQoY3VyU3RhdGUpO1xuICAgIGNvbnN0IG5ld0lzSGlnaGxpZ2h0ID0gdGhpcy5faXNIaWdobGlnaHQobmV4dFN0YXRlKTtcblxuICAgIGNvbnN0IGlzRmluYWxTaWduYWwgPVxuICAgICAgc2lnbmFsID09PSBTaWduYWxzLlJFU1BPTkRFUl9URVJNSU5BVEVEIHx8XG4gICAgICBzaWduYWwgPT09IFNpZ25hbHMuUkVTUE9OREVSX1JFTEVBU0U7XG5cbiAgICBpZiAoaXNGaW5hbFNpZ25hbCkge1xuICAgICAgdGhpcy5fY2FuY2VsTG9uZ1ByZXNzRGVsYXlUaW1lb3V0KCk7XG4gICAgfVxuXG4gICAgY29uc3QgaXNJbml0aWFsVHJhbnNpdGlvbiA9XG4gICAgICBjdXJTdGF0ZSA9PT0gU3RhdGVzLk5PVF9SRVNQT05ERVIgJiZcbiAgICAgIG5leHRTdGF0ZSA9PT0gU3RhdGVzLlJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19JTjtcblxuICAgIGNvbnN0IGlzQWN0aXZlVHJhbnNpdGlvbiA9ICFJc0FjdGl2ZVtjdXJTdGF0ZV0gJiYgSXNBY3RpdmVbbmV4dFN0YXRlXTtcbiAgICBpZiAoaXNJbml0aWFsVHJhbnNpdGlvbiB8fCBpc0FjdGl2ZVRyYW5zaXRpb24pIHtcbiAgICAgIHRoaXMuX3JlbWVhc3VyZU1ldHJpY3NPbkFjdGl2YXRpb24oKTtcbiAgICB9XG5cbiAgICBpZiAoSXNQcmVzc2luZ0luW2N1clN0YXRlXSAmJiBzaWduYWwgPT09IFNpZ25hbHMuTE9OR19QUkVTU19ERVRFQ1RFRCkge1xuICAgICAgdGhpcy50b3VjaGFibGVIYW5kbGVMb25nUHJlc3MgJiYgdGhpcy50b3VjaGFibGVIYW5kbGVMb25nUHJlc3MoZSk7XG4gICAgfVxuXG4gICAgaWYgKG5ld0lzSGlnaGxpZ2h0ICYmICFjdXJJc0hpZ2hsaWdodCkge1xuICAgICAgdGhpcy5fc3RhcnRIaWdobGlnaHQoZSk7XG4gICAgfSBlbHNlIGlmICghbmV3SXNIaWdobGlnaHQgJiYgY3VySXNIaWdobGlnaHQpIHtcbiAgICAgIHRoaXMuX2VuZEhpZ2hsaWdodChlKTtcbiAgICB9XG5cbiAgICBpZiAoSXNQcmVzc2luZ0luW2N1clN0YXRlXSAmJiBzaWduYWwgPT09IFNpZ25hbHMuUkVTUE9OREVSX1JFTEVBU0UpIHtcbiAgICAgIGNvbnN0IGhhc0xvbmdQcmVzc0hhbmRsZXIgPSAhIXRoaXMucHJvcHMub25Mb25nUHJlc3M7XG4gICAgICBjb25zdCBwcmVzc0lzTG9uZ0J1dFN0aWxsQ2FsbE9uUHJlc3MgPVxuICAgICAgICBJc0xvbmdQcmVzc2luZ0luW2N1clN0YXRlXSAmJiAvLyBXZSAqYXJlKiBsb25nIHByZXNzaW5nLi4gLy8gQnV0IGVpdGhlciBoYXMgbm8gbG9uZyBoYW5kbGVyXG4gICAgICAgICghaGFzTG9uZ1ByZXNzSGFuZGxlciB8fCAhdGhpcy50b3VjaGFibGVMb25nUHJlc3NDYW5jZWxzUHJlc3MoKSk7IC8vIG9yIHdlJ3JlIHRvbGQgdG8gaWdub3JlIGl0LlxuXG4gICAgICBjb25zdCBzaG91bGRJbnZva2VQcmVzcyA9XG4gICAgICAgICFJc0xvbmdQcmVzc2luZ0luW2N1clN0YXRlXSB8fCBwcmVzc0lzTG9uZ0J1dFN0aWxsQ2FsbE9uUHJlc3M7XG4gICAgICBpZiAoc2hvdWxkSW52b2tlUHJlc3MgJiYgdGhpcy50b3VjaGFibGVIYW5kbGVQcmVzcykge1xuICAgICAgICBpZiAoIW5ld0lzSGlnaGxpZ2h0ICYmICFjdXJJc0hpZ2hsaWdodCkge1xuICAgICAgICAgIC8vIHdlIG5ldmVyIGhpZ2hsaWdodGVkIGJlY2F1c2Ugb2YgZGVsYXksIGJ1dCB3ZSBzaG91bGQgaGlnaGxpZ2h0IG5vd1xuICAgICAgICAgIHRoaXMuX3N0YXJ0SGlnaGxpZ2h0KGUpO1xuICAgICAgICAgIHRoaXMuX2VuZEhpZ2hsaWdodChlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJyAmJiAhdGhpcy5wcm9wcy50b3VjaFNvdW5kRGlzYWJsZWQpIHtcbiAgICAgICAgICBTb3VuZE1hbmFnZXIucGxheVRvdWNoU291bmQoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRvdWNoYWJsZUhhbmRsZVByZXNzKGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudG91Y2hhYmxlRGVsYXlUaW1lb3V0ICYmIGNsZWFyVGltZW91dCh0aGlzLnRvdWNoYWJsZURlbGF5VGltZW91dCk7XG4gICAgdGhpcy50b3VjaGFibGVEZWxheVRpbWVvdXQgPSBudWxsO1xuICB9LFxuXG4gIC8qICRGbG93Rml4TWVbbWlzc2luZy10aGlzLWFubm90XSBUaGUgJ3RoaXMnIHR5cGUgYW5ub3RhdGlvbihzKSByZXF1aXJlZCBieVxuICAgKiBGbG93J3MgTFRJIHVwZGF0ZSBjb3VsZCBub3QgYmUgYWRkZWQgdmlhIGNvZGVtb2QgKi9cbiAgX3N0YXJ0SGlnaGxpZ2h0OiBmdW5jdGlvbiAoZTogUHJlc3NFdmVudCkge1xuICAgIHRoaXMuX3NhdmVQcmVzc0luTG9jYXRpb24oZSk7XG4gICAgdGhpcy50b3VjaGFibGVIYW5kbGVBY3RpdmVQcmVzc0luICYmIHRoaXMudG91Y2hhYmxlSGFuZGxlQWN0aXZlUHJlc3NJbihlKTtcbiAgfSxcblxuICAvKiAkRmxvd0ZpeE1lW21pc3NpbmctdGhpcy1hbm5vdF0gVGhlICd0aGlzJyB0eXBlIGFubm90YXRpb24ocykgcmVxdWlyZWQgYnlcbiAgICogRmxvdydzIExUSSB1cGRhdGUgY291bGQgbm90IGJlIGFkZGVkIHZpYSBjb2RlbW9kICovXG4gIF9lbmRIaWdobGlnaHQ6IGZ1bmN0aW9uIChlOiBQcmVzc0V2ZW50KSB7XG4gICAgaWYgKHRoaXMudG91Y2hhYmxlSGFuZGxlQWN0aXZlUHJlc3NPdXQpIHtcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy50b3VjaGFibGVHZXRQcmVzc091dERlbGF5TVMgJiZcbiAgICAgICAgdGhpcy50b3VjaGFibGVHZXRQcmVzc091dERlbGF5TVMoKVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMucHJlc3NPdXREZWxheVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLnRvdWNoYWJsZUhhbmRsZUFjdGl2ZVByZXNzT3V0KGUpO1xuICAgICAgICB9LCB0aGlzLnRvdWNoYWJsZUdldFByZXNzT3V0RGVsYXlNUygpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudG91Y2hhYmxlSGFuZGxlQWN0aXZlUHJlc3NPdXQoZSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHdpdGhvdXREZWZhdWx0Rm9jdXNBbmRCbHVyOiAoe306IHsuLi59KSxcbn07XG5cbi8qKlxuICogUHJvdmlkZSBhbiBvcHRpb25hbCB2ZXJzaW9uIG9mIHRoZSBtaXhpbiB3aGVyZSBgdG91Y2hhYmxlSGFuZGxlRm9jdXNgIGFuZFxuICogYHRvdWNoYWJsZUhhbmRsZUJsdXJgIGNhbiBiZSBvdmVycmlkZGVuLiBUaGlzIGFsbG93cyBhcHByb3ByaWF0ZSBkZWZhdWx0cyB0b1xuICogYmUgc2V0IG9uIFRWIHBsYXRmb3Jtcywgd2l0aG91dCBicmVha2luZyBleGlzdGluZyBpbXBsZW1lbnRhdGlvbnMgb2ZcbiAqIGBUb3VjaGFibGVgLlxuICovXG5jb25zdCB7XG4gIHRvdWNoYWJsZUhhbmRsZUZvY3VzLFxuICB0b3VjaGFibGVIYW5kbGVCbHVyLFxuICAuLi5Ub3VjaGFibGVNaXhpbldpdGhvdXREZWZhdWx0Rm9jdXNBbmRCbHVyXG59ID0gVG91Y2hhYmxlTWl4aW47XG5Ub3VjaGFibGVNaXhpbi53aXRob3V0RGVmYXVsdEZvY3VzQW5kQmx1ciA9XG4gIFRvdWNoYWJsZU1peGluV2l0aG91dERlZmF1bHRGb2N1c0FuZEJsdXI7XG5cbmNvbnN0IFRvdWNoYWJsZTogVG91Y2hhYmxlVHlwZSA9IHtcbiAgTWl4aW46IFRvdWNoYWJsZU1peGluLFxuICAvKipcbiAgICogUmVuZGVycyBhIGRlYnVnZ2luZyBvdmVybGF5IHRvIHZpc3VhbGl6ZSB0b3VjaCB0YXJnZXQgd2l0aCBoaXRTbG9wIChtaWdodCBub3Qgd29yayBvbiBBbmRyb2lkKS5cbiAgICovXG4gIHJlbmRlckRlYnVnVmlldzogKHtcbiAgICBjb2xvcixcbiAgICBoaXRTbG9wLFxuICB9OiB7XG4gICAgY29sb3I6IENvbG9yVmFsdWUsXG4gICAgaGl0U2xvcDogRWRnZUluc2V0c1Byb3AsXG4gICAgLi4uXG4gIH0pOiBudWxsIHwgUmVhY3QuTm9kZSA9PiB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIHJldHVybiA8UHJlc3NhYmlsaXR5RGVidWdWaWV3IGNvbG9yPXtjb2xvcn0gaGl0U2xvcD17aGl0U2xvcH0gLz47XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUb3VjaGFibGU7XG4iXSwibWFwcGluZ3MiOiI7O0FBZUEsSUFBQUEsa0JBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLFNBQUEsR0FBQUQsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFJLGFBQUEsR0FBQUYsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFLLG1CQUFBLEdBQUFILHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBTSxTQUFBLEdBQUFKLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBTyxLQUFBLEdBQUFDLHVCQUFBLENBQUFSLE9BQUE7QUFBK0IsSUFBQVMsV0FBQSxHQUFBVCxPQUFBO0FBQUEsU0FBQVUseUJBQUFDLFdBQUEsZUFBQUMsT0FBQSxrQ0FBQUMsaUJBQUEsT0FBQUQsT0FBQSxRQUFBRSxnQkFBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxXQUFBLFdBQUFBLFdBQUEsR0FBQUcsZ0JBQUEsR0FBQUQsaUJBQUEsS0FBQUYsV0FBQTtBQUFBLFNBQUFILHdCQUFBTyxHQUFBLEVBQUFKLFdBQUEsU0FBQUEsV0FBQSxJQUFBSSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxXQUFBRCxHQUFBLFFBQUFBLEdBQUEsb0JBQUFBLEdBQUEsd0JBQUFBLEdBQUEsNEJBQUFFLE9BQUEsRUFBQUYsR0FBQSxVQUFBRyxLQUFBLEdBQUFSLHdCQUFBLENBQUFDLFdBQUEsT0FBQU8sS0FBQSxJQUFBQSxLQUFBLENBQUFD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