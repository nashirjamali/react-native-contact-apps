a205d3e702ea5943fcfb5d38accd538f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ContactItem = _interopRequireDefault(require("../ContactItem"));
var _jsxRuntime = require("react/jsx-runtime");
describe('ContactItem', function () {
  var contact = {
    firstName: 'John',
    lastName: 'Doe',
    photo: 'https://example.com/avatar.png',
    age: 2,
    id: '111'
  };
  test('renders correctly with contact data', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContactItem.default, {
        contact: contact
      })),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    _reactNative.screen.debug();
    var avatar = getByTestId('avatar-image');
    var name = getByText('John Doe');
    expect(avatar.props.firstName).toBe('John');
    expect(avatar.props.lastName).toBe('Doe');
    expect(avatar.props.photo).toBe('https://example.com/avatar.png');
    expect(name).toBeTruthy();
  });
  test('calls onPress when pressed', function () {
    var onPressMock = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContactItem.default, {
        contact: contact,
        onPress: onPressMock
      })),
      getByTestId = _render2.getByTestId;
    var touchable = getByTestId('contact-item-touchable');
    _reactNative.fireEvent.press(touchable);
    expect(onPressMock).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Db250YWN0SXRlbSIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJjb250YWN0IiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJwaG90byIsImFnZSIsImlkIiwidGVzdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJkZWZhdWx0IiwiZ2V0QnlUZXh0IiwiZ2V0QnlUZXN0SWQiLCJzY3JlZW4iLCJkZWJ1ZyIsImF2YXRhciIsIm5hbWUiLCJleHBlY3QiLCJwcm9wcyIsInRvQmUiLCJ0b0JlVHJ1dGh5Iiwib25QcmVzc01vY2siLCJqZXN0IiwiZm4iLCJfcmVuZGVyMiIsIm9uUHJlc3MiLCJ0b3VjaGFibGUiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWQiXSwic291cmNlcyI6WyJDb250YWN0SXRlbS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtyZW5kZXIsIGZpcmVFdmVudCwgc2NyZWVufSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgQ29udGFjdEl0ZW0gZnJvbSAnLi4vQ29udGFjdEl0ZW0nO1xuXG5kZXNjcmliZSgnQ29udGFjdEl0ZW0nLCAoKSA9PiB7XG4gIGNvbnN0IGNvbnRhY3QgPSB7XG4gICAgZmlyc3ROYW1lOiAnSm9obicsXG4gICAgbGFzdE5hbWU6ICdEb2UnLFxuICAgIHBob3RvOiAnaHR0cHM6Ly9leGFtcGxlLmNvbS9hdmF0YXIucG5nJyxcbiAgICBhZ2U6IDIsXG4gICAgaWQ6ICcxMTEnLFxuICB9O1xuXG4gIHRlc3QoJ3JlbmRlcnMgY29ycmVjdGx5IHdpdGggY29udGFjdCBkYXRhJywgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeVRleHQsIGdldEJ5VGVzdElkfSA9IHJlbmRlcig8Q29udGFjdEl0ZW0gY29udGFjdD17Y29udGFjdH0gLz4pO1xuICAgIHNjcmVlbi5kZWJ1ZygpO1xuICAgIGNvbnN0IGF2YXRhciA9IGdldEJ5VGVzdElkKCdhdmF0YXItaW1hZ2UnKTtcbiAgICBjb25zdCBuYW1lID0gZ2V0QnlUZXh0KCdKb2huIERvZScpO1xuXG4gICAgZXhwZWN0KGF2YXRhci5wcm9wcy5maXJzdE5hbWUpLnRvQmUoJ0pvaG4nKTtcbiAgICBleHBlY3QoYXZhdGFyLnByb3BzLmxhc3ROYW1lKS50b0JlKCdEb2UnKTtcbiAgICBleHBlY3QoYXZhdGFyLnByb3BzLnBob3RvKS50b0JlKCdodHRwczovL2V4YW1wbGUuY29tL2F2YXRhci5wbmcnKTtcbiAgICBleHBlY3QobmFtZSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICB0ZXN0KCdjYWxscyBvblByZXNzIHdoZW4gcHJlc3NlZCcsICgpID0+IHtcbiAgICBjb25zdCBvblByZXNzTW9jayA9IGplc3QuZm4oKTtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKFxuICAgICAgPENvbnRhY3RJdGVtIGNvbnRhY3Q9e2NvbnRhY3R9IG9uUHJlc3M9e29uUHJlc3NNb2NrfSAvPixcbiAgICApO1xuXG4gICAgY29uc3QgdG91Y2hhYmxlID0gZ2V0QnlUZXN0SWQoJ2NvbnRhY3QtaXRlbS10b3VjaGFibGUnKTtcbiAgICBmaXJlRXZlbnQucHJlc3ModG91Y2hhYmxlKTtcblxuICAgIGV4cGVjdChvblByZXNzTW9jaykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsWUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQXlDLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUV6Q0ksUUFBUSxDQUFDLGFBQWEsRUFBRSxZQUFNO0VBQzVCLElBQU1DLE9BQU8sR0FBRztJQUNkQyxTQUFTLEVBQUUsTUFBTTtJQUNqQkMsUUFBUSxFQUFFLEtBQUs7SUFDZkMsS0FBSyxFQUFFLGdDQUFnQztJQUN2Q0MsR0FBRyxFQUFFLENBQUM7SUFDTkMsRUFBRSxFQUFFO0VBQ04sQ0FBQztFQUVEQyxJQUFJLENBQUMscUNBQXFDLEVBQUUsWUFBTTtJQUNoRCxJQUFBQyxPQUFBLEdBQWlDLElBQUFDLG1CQUFNLEVBQUMsSUFBQVYsV0FBQSxDQUFBVyxHQUFBLEVBQUNaLFlBQUEsQ0FBQWEsT0FBVztRQUFDVixPQUFPLEVBQUVBO01BQVEsQ0FBRSxDQUFDLENBQUM7TUFBbkVXLFNBQVMsR0FBQUosT0FBQSxDQUFUSSxTQUFTO01BQUVDLFdBQVcsR0FBQUwsT0FBQSxDQUFYSyxXQUFXO0lBQzdCQyxtQkFBTSxDQUFDQyxLQUFLLENBQUMsQ0FBQztJQUNkLElBQU1DLE1BQU0sR0FBR0gsV0FBVyxDQUFDLGNBQWMsQ0FBQztJQUMxQyxJQUFNSSxJQUFJLEdBQUdMLFNBQVMsQ0FBQyxVQUFVLENBQUM7SUFFbENNLE1BQU0sQ0FBQ0YsTUFBTSxDQUFDRyxLQUFLLENBQUNqQixTQUFTLENBQUMsQ0FBQ2tCLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDM0NGLE1BQU0sQ0FBQ0YsTUFBTSxDQUFDRyxLQUFLLENBQUNoQixRQUFRLENBQUMsQ0FBQ2lCLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDekNGLE1BQU0sQ0FBQ0YsTUFBTSxDQUFDRyxLQUFLLENBQUNmLEtBQUssQ0FBQyxDQUFDZ0IsSUFBSSxDQUFDLGdDQUFnQyxDQUFDO0lBQ2pFRixNQUFNLENBQUNELElBQUksQ0FBQyxDQUFDSSxVQUFVLENBQUMsQ0FBQztFQUMzQixDQUFDLENBQUM7RUFFRmQsSUFBSSxDQUFDLDRCQUE0QixFQUFFLFlBQU07SUFDdkMsSUFBTWUsV0FBVyxHQUFHQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLElBQUFDLFFBQUEsR0FBc0IsSUFBQWhCLG1CQUFNLEVBQzFCLElBQUFWLFdBQUEsQ0FBQVcsR0FBQSxFQUFDWixZQUFBLENBQUFhLE9BQVc7UUFBQ1YsT0FBTyxFQUFFQSxPQUFRO1FBQUN5QixPQUFPLEVBQUVKO01BQVksQ0FBRSxDQUN4RCxDQUFDO01BRk1ULFdBQVcsR0FBQVksUUFBQSxDQUFYWixXQUFXO0lBSWxCLElBQU1jLFNBQVMsR0FBR2QsV0FBVyxDQUFDLHdCQUF3QixDQUFDO0lBQ3ZEZSxzQkFBUyxDQUFDQyxLQUFLLENBQUNGLFNBQVMsQ0FBQztJQUUxQlQsTUFBTSxDQUFDSSxXQUFXLENBQUMsQ0FBQ1EsZ0JBQWdCLENBQUMsQ0FBQztFQUN4QyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==