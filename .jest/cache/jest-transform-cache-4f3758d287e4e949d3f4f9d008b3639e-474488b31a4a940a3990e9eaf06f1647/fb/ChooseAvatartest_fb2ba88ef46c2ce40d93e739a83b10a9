6e530b8bfaa87a0d5e34edab2d7cf975
_getJestObj().mock('../../apis/contact', function () {
  return {
    postContact: jest.fn(),
    putContact: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ChooseAvatar = _interopRequireDefault(require("../ChooseAvatar"));
var _contact = require("../../apis/contact");
var _testUtils = require("../../utils/test-utils");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var createTestProps = function createTestProps(props) {
  return Object.assign({
    navigation: Object.assign({
      navigate: jest.fn()
    }, props)
  }, props);
};
describe('ChooseAvatar', function () {
  test('navigates to List screen after successful contact creation', (0, _asyncToGenerator2.default)(function* () {
    var props = createTestProps({});
    var _renderWithProviders = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_ChooseAvatar.default, Object.assign({
        route: {
          key: 'ChooseAvatar',
          name: 'ChooseAvatar',
          params: {
            isEdit: false
          }
        }
      }, props))),
      getByPlaceholderText = _renderWithProviders.getByPlaceholderText,
      getByLabelText = _renderWithProviders.getByLabelText;
    _reactNative.fireEvent.press(getByLabelText('button-save'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_contact.postContact).toHaveBeenCalledTimes(1);
      expect(props.navigation.navigate).toHaveBeenCalledWith('List');
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJwb3N0Q29udGFjdCIsImplc3QiLCJmbiIsInB1dENvbnRhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9DaG9vc2VBdmF0YXIiLCJfY29udGFjdCIsIl90ZXN0VXRpbHMiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwiY3JlYXRlVGVzdFByb3BzIiwicHJvcHMiLCJPYmplY3QiLCJhc3NpZ24iLCJuYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJkZXNjcmliZSIsInRlc3QiLCJkZWZhdWx0IiwiX3JlbmRlcldpdGhQcm92aWRlcnMiLCJyZW5kZXJXaXRoUHJvdmlkZXJzIiwianN4Iiwicm91dGUiLCJrZXkiLCJuYW1lIiwicGFyYW1zIiwiaXNFZGl0IiwiZ2V0QnlQbGFjZWhvbGRlclRleHQiLCJnZXRCeUxhYmVsVGV4dCIsImZpcmVFdmVudCIsInByZXNzIiwid2FpdEZvciIsImV4cGVjdCIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIl0sInNvdXJjZXMiOlsiQ2hvb3NlQXZhdGFyLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3JlbmRlciwgZmlyZUV2ZW50LCB3YWl0Rm9yfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQge1Byb3ZpZGVyfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgQ2hvb3NlQXZhdGFyIGZyb20gJy4uL0Nob29zZUF2YXRhcic7XG5pbXBvcnQge3Bvc3RDb250YWN0LCBwdXRDb250YWN0fSBmcm9tICcuLi8uLi9hcGlzL2NvbnRhY3QnO1xuaW1wb3J0IHtTdGFja05hdmlnYXRpb25Qcm9wfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9zdGFjayc7XG5pbXBvcnQge1Jvb3RTdGFja1BhcmFtTGlzdH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHtyZW5kZXJXaXRoUHJvdmlkZXJzfSBmcm9tICcuLi8uLi91dGlscy90ZXN0LXV0aWxzJztcblxuamVzdC5tb2NrKCcuLi8uLi9hcGlzL2NvbnRhY3QnLCAoKSA9PiAoe1xuICBwb3N0Q29udGFjdDogamVzdC5mbigpLFxuICBwdXRDb250YWN0OiBqZXN0LmZuKCksXG59KSk7XG5cbnR5cGUgTmF2aWdhdGlvblByb3BzID0gU3RhY2tOYXZpZ2F0aW9uUHJvcDxSb290U3RhY2tQYXJhbUxpc3QsICdDaG9vc2VBdmF0YXInPjtcblxuY29uc3QgY3JlYXRlVGVzdFByb3BzID0gKHByb3BzOiBQYXJ0aWFsPE5hdmlnYXRpb25Qcm9wcz4pID0+ICh7XG4gIG5hdmlnYXRpb246IHtcbiAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxuICAgIC4uLnByb3BzLFxuICB9IGFzIE5hdmlnYXRpb25Qcm9wcyxcbiAgLi4ucHJvcHMsXG59KTtcblxuZGVzY3JpYmUoJ0Nob29zZUF2YXRhcicsICgpID0+IHtcbiAgdGVzdCgnbmF2aWdhdGVzIHRvIExpc3Qgc2NyZWVuIGFmdGVyIHN1Y2Nlc3NmdWwgY29udGFjdCBjcmVhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBwcm9wcyA9IGNyZWF0ZVRlc3RQcm9wcyh7fSk7XG4gICAgY29uc3Qge2dldEJ5UGxhY2Vob2xkZXJUZXh0LCBnZXRCeUxhYmVsVGV4dH0gPSByZW5kZXJXaXRoUHJvdmlkZXJzKFxuICAgICAgPENob29zZUF2YXRhclxuICAgICAgICByb3V0ZT17e1xuICAgICAgICAgIGtleTogJ0Nob29zZUF2YXRhcicsXG4gICAgICAgICAgbmFtZTogJ0Nob29zZUF2YXRhcicsXG4gICAgICAgICAgcGFyYW1zOiB7aXNFZGl0OiBmYWxzZX0sXG4gICAgICAgIH19XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgIC8+LFxuICAgICk7XG5cbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlMYWJlbFRleHQoJ2J1dHRvbi1zYXZlJykpO1xuXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3QocG9zdENvbnRhY3QpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICAgIGV4cGVjdChwcm9wcy5uYXZpZ2F0aW9uLm5hdmlnYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnTGlzdCcpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyAgIHRlc3QoJ25hdmlnYXRlcyB0byBMaXN0IHNjcmVlbiBhZnRlciBzdWNjZXNzZnVsIGNvbnRhY3QgdXBkYXRlJywgYXN5bmMgKCkgPT4ge1xuICAvLyAgICAgY29uc3QgbmF2aWdhdGlvbk1vY2sgPSB7cmVwbGFjZTogamVzdC5mbigpfTtcbiAgLy8gICAgIGNvbnN0IHJvdXRlID0ge3BhcmFtczoge2lzRWRpdDogdHJ1ZX19O1xuICAvLyAgICAgY29uc3Qge2dldEJ5VGV4dH0gPSByZW5kZXIoXG4gIC8vICAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAvLyAgICAgICAgIDxDaG9vc2VBdmF0YXIgbmF2aWdhdGlvbj17bmF2aWdhdGlvbk1vY2t9IHJvdXRlPXtyb3V0ZX0gLz5cbiAgLy8gICAgICAgPC9Qcm92aWRlcj4sXG4gIC8vICAgICApO1xuXG4gIC8vICAgICBjb25zdCB1cGRhdGVCdXR0b24gPSBnZXRCeVRleHQoJ1VwZGF0ZScpO1xuXG4gIC8vICAgICBmaXJlRXZlbnQucHJlc3ModXBkYXRlQnV0dG9uKTtcblxuICAvLyAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gIC8vICAgICAgIGV4cGVjdChwdXRDb250YWN0KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIC8vICAgICAgIGV4cGVjdChuYXZpZ2F0aW9uTW9jay5yZXBsYWNlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnTGlzdCcpO1xuICAvLyAgICAgfSk7XG4gIC8vICAgfSk7XG5cbiAgLy8gICB0ZXN0KCdkaXNwbGF5cyBlcnJvciBtZXNzYWdlIHdoZW4gY29udGFjdCBjcmVhdGlvbiBmYWlscycsIGFzeW5jICgpID0+IHtcbiAgLy8gICAgIGNvbnN0IG5hdmlnYXRpb25Nb2NrID0ge3JlcGxhY2U6IGplc3QuZm4oKX07XG4gIC8vICAgICBjb25zdCByb3V0ZSA9IHtwYXJhbXM6IHtpc0VkaXQ6IGZhbHNlfX07XG4gIC8vICAgICBjb25zdCB7Z2V0QnlUZXh0fSA9IHJlbmRlcihcbiAgLy8gICAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gIC8vICAgICAgICAgPENob29zZUF2YXRhciBuYXZpZ2F0aW9uPXtuYXZpZ2F0aW9uTW9ja30gcm91dGU9e3JvdXRlfSAvPlxuICAvLyAgICAgICA8L1Byb3ZpZGVyPixcbiAgLy8gICAgICk7XG5cbiAgLy8gICAgIGNvbnN0IHNhdmVCdXR0b24gPSBnZXRCeVRleHQoJ1NhdmUnKTtcblxuICAvLyAgICAgcG9zdENvbnRhY3QubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignRmFpbGVkIHRvIGNyZWF0ZSBjb250YWN0JykpO1xuXG4gIC8vICAgICBmaXJlRXZlbnQucHJlc3Moc2F2ZUJ1dHRvbik7XG5cbiAgLy8gICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAvLyAgICAgICBleHBlY3QocG9zdENvbnRhY3QpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgLy8gICAgICAgZXhwZWN0KG5hdmlnYXRpb25Nb2NrLnJlcGxhY2UpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIC8vICAgICAgIGV4cGVjdChnZXRCeVRleHQoJ0Vycm9yJykpLnRvQmVUcnV0aHkoKTtcbiAgLy8gICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnRmFpbGVkIHRvIGNyZWF0ZSBjb250YWN0JykpLnRvQmVUcnV0aHkoKTtcbiAgLy8gICAgIH0pO1xuICAvLyAgIH0pO1xuXG4gIC8vICAgdGVzdCgnZGlzcGxheXMgZXJyb3IgbWVzc2FnZSB3aGVuIGNvbnRhY3QgdXBkYXRlIGZhaWxzJywgYXN5bmMgKCkgPT4ge1xuICAvLyAgICAgY29uc3QgbmF2aWdhdGlvbk1vY2sgPSB7cmVwbGFjZTogamVzdC5mbigpfTtcbiAgLy8gICAgIGNvbnN0IHJvdXRlID0ge3BhcmFtczoge2lzRWRpdDogdHJ1ZX19O1xuICAvLyAgICAgY29uc3Qge2dldEJ5VGV4dH0gPSByZW5kZXIoXG4gIC8vICAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAvLyAgICAgICAgIDxDaG9vc2VBdmF0YXIgbmF2aWdhdGlvbj17bmF2aWdhdGlvbk1vY2t9IHJvdXRlPXtyb3V0ZX0gLz5cbiAgLy8gICAgICAgPC9Qcm92aWRlcj4sXG4gIC8vICAgICApO1xuXG4gIC8vICAgICBjb25zdCB1cGRhdGVCdXR0b24gPSBnZXRCeVRleHQoJ1VwZGF0ZScpO1xuXG4gIC8vICAgICBwdXRDb250YWN0Lm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ0ZhaWxlZCB0byB1cGRhdGUgY29udGFjdCcpKTtcblxuICAvLyAgICAgZmlyZUV2ZW50LnByZXNzKHVwZGF0ZUJ1dHRvbik7XG5cbiAgLy8gICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAvLyAgICAgICBleHBlY3QocHV0Q29udGFjdCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAvLyAgICAgICBleHBlY3QobmF2aWdhdGlvbk1vY2sucmVwbGFjZSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgLy8gICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnRXJyb3InKSkudG9CZVRydXRoeSgpO1xuICAvLyAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCdGYWlsZWQgdG8gdXBkYXRlIGNvbnRhY3QnKSkudG9CZVRydXRoeSgpO1xuICAvLyAgICAgfSk7XG4gIC8vICAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBU0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLG9CQUFvQixFQUFFO0VBQUEsT0FBTztJQUNyQ0MsV0FBVyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCQyxVQUFVLEVBQUVGLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0VBQ3RCLENBQUM7QUFBQSxDQUFDLENBQUM7QUFBQyxJQUFBRSxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsa0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQVpKLElBQUFFLE1BQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLFlBQUEsR0FBQUgsT0FBQTtBQUVBLElBQUFJLGFBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFLLFFBQUEsR0FBQUwsT0FBQTtBQUdBLElBQUFNLFVBQUEsR0FBQU4sT0FBQTtBQUEyRCxJQUFBTyxXQUFBLEdBQUFQLE9BQUE7QUFBQSxTQUFBUCxZQUFBO0VBQUEsSUFBQWUsUUFBQSxHQUFBUixPQUFBO0lBQUFKLElBQUEsR0FBQVksUUFBQSxDQUFBWixJQUFBO0VBQUFILFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFHLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQVMzRCxJQUFNYSxlQUFlLEdBQUcsU0FBbEJBLGVBQWVBLENBQUlDLEtBQStCO0VBQUEsT0FBQUMsTUFBQSxDQUFBQyxNQUFBO0lBQ3REQyxVQUFVLEVBQUFGLE1BQUEsQ0FBQUMsTUFBQTtNQUNSRSxRQUFRLEVBQUVsQixJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUFDLEdBQ2hCYSxLQUFLO0VBQ1UsR0FDakJBLEtBQUs7QUFBQSxDQUNSO0FBRUZLLFFBQVEsQ0FBQyxjQUFjLEVBQUUsWUFBTTtFQUM3QkMsSUFBSSxDQUFDLDREQUE0RCxNQUFBZixrQkFBQSxDQUFBZ0IsT0FBQSxFQUFFLGFBQVk7SUFDN0UsSUFBTVAsS0FBSyxHQUFHRCxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakMsSUFBQVMsb0JBQUEsR0FBK0MsSUFBQUMsOEJBQW1CLEVBQ2hFLElBQUFaLFdBQUEsQ0FBQWEsR0FBQSxFQUFDaEIsYUFBQSxDQUFBYSxPQUFZLEVBQUFOLE1BQUEsQ0FBQUMsTUFBQTtRQUNYUyxLQUFLLEVBQUU7VUFDTEMsR0FBRyxFQUFFLGNBQWM7VUFDbkJDLElBQUksRUFBRSxjQUFjO1VBQ3BCQyxNQUFNLEVBQUU7WUFBQ0MsTUFBTSxFQUFFO1VBQUs7UUFDeEI7TUFBRSxHQUNFZixLQUFLLENBQ1YsQ0FDSCxDQUFDO01BVE1nQixvQkFBb0IsR0FBQVIsb0JBQUEsQ0FBcEJRLG9CQUFvQjtNQUFFQyxjQUFjLEdBQUFULG9CQUFBLENBQWRTLGNBQWM7SUFXM0NDLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0YsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRTlDLE1BQU0sSUFBQUcsb0JBQU8sRUFBQyxZQUFNO01BQ2xCQyxNQUFNLENBQUNwQyxvQkFBVyxDQUFDLENBQUNxQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7TUFDNUNELE1BQU0sQ0FBQ3JCLEtBQUssQ0FBQ0csVUFBVSxDQUFDQyxRQUFRLENBQUMsQ0FBQ21CLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztJQUNoRSxDQUFDLENBQUM7RUFDSixDQUFDLEVBQUM7QUFrRUosQ0FBQyxDQUFDIn0=