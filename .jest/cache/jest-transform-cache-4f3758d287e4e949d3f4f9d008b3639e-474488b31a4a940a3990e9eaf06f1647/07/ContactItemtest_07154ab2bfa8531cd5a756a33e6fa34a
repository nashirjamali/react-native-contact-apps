4f624758319cf16a082a6abea25b6b89
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ContactItem = _interopRequireDefault(require("../ContactItem"));
var _jsxRuntime = require("react/jsx-runtime");
describe('ContactItem', function () {
  var contact = {
    firstName: 'John',
    lastName: 'Doe',
    photo: 'https://example.com/avatar.png',
    age: 2,
    id: '111'
  };
  test('renders correctly with contact data', (0, _asyncToGenerator2.default)(function* () {
    jest.spyOn(global, 'fetch').mockResolvedValueOnce(Promise.resolve({
      ok: true,
      status: 200
    }));
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContactItem.default, {
        contact: contact
      })),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    _reactNative.screen.debug();
    yield (0, _reactNative.waitFor)(function () {
      var avatar = getByTestId('user-avatar-text');
      var name = getByText('John Doe');
      expect(avatar.props.children.props.children).toBe('JD');
      expect(name).toBeTruthy();
    });
  }));
  test('calls onPress when pressed', function () {
    var onPressMock = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContactItem.default, {
        contact: contact,
        onPress: onPressMock
      })),
      getByTestId = _render2.getByTestId;
    var touchable = getByTestId('user-avatar-text');
    _reactNative.fireEvent.press(touchable);
    expect(onPressMock).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Db250YWN0SXRlbSIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJjb250YWN0IiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJwaG90byIsImFnZSIsImlkIiwidGVzdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJqZXN0Iiwic3B5T24iLCJnbG9iYWwiLCJtb2NrUmVzb2x2ZWRWYWx1ZU9uY2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsIm9rIiwic3RhdHVzIiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsImdldEJ5VGV4dCIsImdldEJ5VGVzdElkIiwic2NyZWVuIiwiZGVidWciLCJ3YWl0Rm9yIiwiYXZhdGFyIiwibmFtZSIsImV4cGVjdCIsInByb3BzIiwiY2hpbGRyZW4iLCJ0b0JlIiwidG9CZVRydXRoeSIsIm9uUHJlc3NNb2NrIiwiZm4iLCJfcmVuZGVyMiIsIm9uUHJlc3MiLCJ0b3VjaGFibGUiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWQiXSwic291cmNlcyI6WyJDb250YWN0SXRlbS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgcmVuZGVyLFxuICBmaXJlRXZlbnQsXG4gIHdhaXRGb3IsXG4gIHNjcmVlbixcbn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IENvbnRhY3RJdGVtIGZyb20gJy4uL0NvbnRhY3RJdGVtJztcblxuZGVzY3JpYmUoJ0NvbnRhY3RJdGVtJywgKCkgPT4ge1xuICBjb25zdCBjb250YWN0ID0ge1xuICAgIGZpcnN0TmFtZTogJ0pvaG4nLFxuICAgIGxhc3ROYW1lOiAnRG9lJyxcbiAgICBwaG90bzogJ2h0dHBzOi8vZXhhbXBsZS5jb20vYXZhdGFyLnBuZycsXG4gICAgYWdlOiAyLFxuICAgIGlkOiAnMTExJyxcbiAgfTtcblxuICB0ZXN0KCdyZW5kZXJzIGNvcnJlY3RseSB3aXRoIGNvbnRhY3QgZGF0YScsIGFzeW5jICgpID0+IHtcbiAgICBqZXN0XG4gICAgICAuc3B5T24oZ2xvYmFsLCAnZmV0Y2gnKVxuICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZShcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHtvazogdHJ1ZSwgc3RhdHVzOiAyMDB9IGFzIFJlc3BvbnNlKSxcbiAgICAgICk7XG5cbiAgICBjb25zdCB7Z2V0QnlUZXh0LCBnZXRCeVRlc3RJZH0gPSByZW5kZXIoPENvbnRhY3RJdGVtIGNvbnRhY3Q9e2NvbnRhY3R9IC8+KTtcblxuICAgIHNjcmVlbi5kZWJ1ZygpO1xuXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBjb25zdCBhdmF0YXIgPSBnZXRCeVRlc3RJZCgndXNlci1hdmF0YXItdGV4dCcpO1xuICAgICAgY29uc3QgbmFtZSA9IGdldEJ5VGV4dCgnSm9obiBEb2UnKTtcblxuICAgICAgZXhwZWN0KGF2YXRhci5wcm9wcy5jaGlsZHJlbi5wcm9wcy5jaGlsZHJlbikudG9CZSgnSkQnKTtcbiAgICAgIGV4cGVjdChuYW1lKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2NhbGxzIG9uUHJlc3Mgd2hlbiBwcmVzc2VkJywgKCkgPT4ge1xuICAgIGNvbnN0IG9uUHJlc3NNb2NrID0gamVzdC5mbigpO1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoXG4gICAgICA8Q29udGFjdEl0ZW0gY29udGFjdD17Y29udGFjdH0gb25QcmVzcz17b25QcmVzc01vY2t9IC8+LFxuICAgICk7XG5cbiAgICBjb25zdCB0b3VjaGFibGUgPSBnZXRCeVRlc3RJZCgndXNlci1hdmF0YXItdGV4dCcpO1xuICAgIGZpcmVFdmVudC5wcmVzcyh0b3VjaGFibGUpO1xuXG4gICAgZXhwZWN0KG9uUHJlc3NNb2NrKS50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