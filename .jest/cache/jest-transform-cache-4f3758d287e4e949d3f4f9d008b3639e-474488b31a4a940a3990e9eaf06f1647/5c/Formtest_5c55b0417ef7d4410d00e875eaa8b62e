ad0eff5f7fb078695b5adcf1778c3fe3
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useIsFocused: jest.fn()
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Form = _interopRequireDefault(require("../Form"));
var _testUtils = require("../../utils/test-utils");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var createTestProps = function createTestProps(props) {
  return Object.assign({
    navigation: Object.assign({
      navigate: jest.fn()
    }, props)
  }, props);
};
describe('Form', function () {
  test('renders correctly and enables next button when form is complete', (0, _asyncToGenerator2.default)(function* () {
    var props = createTestProps({});
    var _renderWithProviders = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_Form.default, Object.assign({
        route: {
          key: 'Form',
          name: 'Form',
          params: {
            isEdit: false
          }
        }
      }, props))),
      getByPlaceholderText = _renderWithProviders.getByPlaceholderText,
      getByText = _renderWithProviders.getByText;
    var firstNameInput = getByPlaceholderText('First Name');
    var lastNameInput = getByPlaceholderText('Last Name');
    var ageInput = getByPlaceholderText('Age');
    var nextButton = getByText('Next');
    _reactNative.screen.debug();
    yield (0, _reactNative.waitFor)(function () {
      _reactNative.fireEvent.changeText(firstNameInput, 'John');
      _reactNative.fireEvent.changeText(lastNameInput, 'Doe');
      _reactNative.fireEvent.changeText(ageInput, '30');
    });
    expect(firstNameInput.props.value).toBe('John');
    expect(lastNameInput.props.value).toBe('Doe');
    expect(ageInput.props.value).toBe('30');
    expect(nextButton.props.disabled).toBe(false);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsInVzZUlzRm9jdXNlZCIsImZuIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfRm9ybSIsIl90ZXN0VXRpbHMiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwiY3JlYXRlVGVzdFByb3BzIiwicHJvcHMiLCJuYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJkZXNjcmliZSIsInRlc3QiLCJkZWZhdWx0IiwiX3JlbmRlcldpdGhQcm92aWRlcnMiLCJyZW5kZXJXaXRoUHJvdmlkZXJzIiwianN4Iiwicm91dGUiLCJrZXkiLCJuYW1lIiwicGFyYW1zIiwiaXNFZGl0IiwiZ2V0QnlQbGFjZWhvbGRlclRleHQiLCJnZXRCeVRleHQiLCJmaXJzdE5hbWVJbnB1dCIsImxhc3ROYW1lSW5wdXQiLCJhZ2VJbnB1dCIsIm5leHRCdXR0b24iLCJzY3JlZW4iLCJkZWJ1ZyIsIndhaXRGb3IiLCJmaXJlRXZlbnQiLCJjaGFuZ2VUZXh0IiwiZXhwZWN0IiwidmFsdWUiLCJ0b0JlIiwiZGlzYWJsZWQiXSwic291cmNlcyI6WyJGb3JtLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICByZW5kZXIsXG4gIGZpcmVFdmVudCxcbiAgc2NyZWVuLFxuICB3YWl0Rm9yLFxufSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQge1Byb3ZpZGVyfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgRm9ybSBmcm9tICcuLi9Gb3JtJztcbmltcG9ydCB7cmVuZGVyV2l0aFByb3ZpZGVyc30gZnJvbSAnLi4vLi4vdXRpbHMvdGVzdC11dGlscyc7XG5pbXBvcnQge1N0YWNrTmF2aWdhdGlvblByb3B9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL3N0YWNrJztcbmltcG9ydCB7Um9vdFN0YWNrUGFyYW1MaXN0fSBmcm9tICcuLi8uLi90eXBlcyc7XG5cbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4gKHtcbiAgLi4uamVzdC5yZXF1aXJlQWN0dWFsKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnKSxcbiAgdXNlSXNGb2N1c2VkOiBqZXN0LmZuKCksXG59KSk7XG5cbnR5cGUgTmF2aWdhdGlvblByb3BzID0gU3RhY2tOYXZpZ2F0aW9uUHJvcDxSb290U3RhY2tQYXJhbUxpc3QsICdGb3JtJz47XG5cbmNvbnN0IGNyZWF0ZVRlc3RQcm9wcyA9IChwcm9wczogUGFydGlhbDxOYXZpZ2F0aW9uUHJvcHM+KSA9PiAoe1xuICBuYXZpZ2F0aW9uOiB7XG4gICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcbiAgICAuLi5wcm9wcyxcbiAgfSBhcyBOYXZpZ2F0aW9uUHJvcHMsXG4gIC4uLnByb3BzLFxufSk7XG5cbmRlc2NyaWJlKCdGb3JtJywgKCkgPT4ge1xuICB0ZXN0KCdyZW5kZXJzIGNvcnJlY3RseSBhbmQgZW5hYmxlcyBuZXh0IGJ1dHRvbiB3aGVuIGZvcm0gaXMgY29tcGxldGUnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcHJvcHMgPSBjcmVhdGVUZXN0UHJvcHMoe30pO1xuICAgIGNvbnN0IHtnZXRCeVBsYWNlaG9sZGVyVGV4dCwgZ2V0QnlUZXh0fSA9IHJlbmRlcldpdGhQcm92aWRlcnMoXG4gICAgICA8Rm9ybVxuICAgICAgICByb3V0ZT17e2tleTogJ0Zvcm0nLCBuYW1lOiAnRm9ybScsIHBhcmFtczoge2lzRWRpdDogZmFsc2V9fX1cbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgLz4sXG4gICAgKTtcblxuICAgIGNvbnN0IGZpcnN0TmFtZUlucHV0ID0gZ2V0QnlQbGFjZWhvbGRlclRleHQoJ0ZpcnN0IE5hbWUnKTtcbiAgICBjb25zdCBsYXN0TmFtZUlucHV0ID0gZ2V0QnlQbGFjZWhvbGRlclRleHQoJ0xhc3QgTmFtZScpO1xuICAgIGNvbnN0IGFnZUlucHV0ID0gZ2V0QnlQbGFjZWhvbGRlclRleHQoJ0FnZScpO1xuICAgIGNvbnN0IG5leHRCdXR0b24gPSBnZXRCeVRleHQoJ05leHQnKTtcbiAgICBzY3JlZW4uZGVidWcoKTtcbiAgICBcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGZpcnN0TmFtZUlucHV0LCAnSm9obicpO1xuICAgICAgZmlyZUV2ZW50LmNoYW5nZVRleHQobGFzdE5hbWVJbnB1dCwgJ0RvZScpO1xuICAgICAgZmlyZUV2ZW50LmNoYW5nZVRleHQoYWdlSW5wdXQsICczMCcpO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KGZpcnN0TmFtZUlucHV0LnByb3BzLnZhbHVlKS50b0JlKCdKb2huJyk7XG4gICAgZXhwZWN0KGxhc3ROYW1lSW5wdXQucHJvcHMudmFsdWUpLnRvQmUoJ0RvZScpO1xuICAgIGV4cGVjdChhZ2VJbnB1dC5wcm9wcy52YWx1ZSkudG9CZSgnMzAnKTtcbiAgICBleHBlY3QobmV4dEJ1dHRvbi5wcm9wcy5kaXNhYmxlZCkudG9CZShmYWxzZSk7XG4gIH0pO1xuXG4gIC8vICAgdGVzdCgnbmF2aWdhdGVzIHRvIENob29zZUF2YXRhciBzY3JlZW4gd2hlbiBOZXh0IGJ1dHRvbiBpcyBjbGlja2VkJywgKCkgPT4ge1xuICAvLyAgICAgY29uc3QgbmF2aWdhdGlvbk1vY2sgPSB7XG4gIC8vICAgICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXG4gIC8vICAgICB9O1xuXG4gIC8vICAgICBjb25zdCB7Z2V0QnlQbGFjZWhvbGRlclRleHQsIGdldEJ5VGV4dCwgZ2V0QnlUZXN0SWR9ID0gcmVuZGVyKFxuICAvLyAgICAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbiAgLy8gICAgICAgICA8Rm9ybSByb3V0ZT17e3BhcmFtczoge2lzRWRpdDogZmFsc2V9fX0gbmF2aWdhdGlvbj17bmF2aWdhdGlvbk1vY2t9IC8+XG4gIC8vICAgICAgIDwvUHJvdmlkZXI+LFxuICAvLyAgICAgKTtcblxuICAvLyAgICAgY29uc3QgZmlyc3ROYW1lSW5wdXQgPSBnZXRCeVBsYWNlaG9sZGVyVGV4dCgnRmlyc3QgTmFtZScpO1xuICAvLyAgICAgY29uc3QgbGFzdE5hbWVJbnB1dCA9IGdldEJ5UGxhY2Vob2xkZXJUZXh0KCdMYXN0IE5hbWUnKTtcbiAgLy8gICAgIGNvbnN0IGFnZUlucHV0ID0gZ2V0QnlQbGFjZWhvbGRlclRleHQoJ0FnZScpO1xuICAvLyAgICAgY29uc3QgbmV4dEJ1dHRvbiA9IGdldEJ5VGV4dCgnTmV4dCcpO1xuXG4gIC8vICAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChmaXJzdE5hbWVJbnB1dCwgJ0pvaG4nKTtcbiAgLy8gICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGxhc3ROYW1lSW5wdXQsICdEb2UnKTtcbiAgLy8gICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGFnZUlucHV0LCAnMzAnKTtcbiAgLy8gICAgIGZpcmVFdmVudC5wcmVzcyhuZXh0QnV0dG9uKTtcblxuICAvLyAgICAgZXhwZWN0KG5hdmlnYXRpb25Nb2NrLm5hdmlnYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnQ2hvb3NlQXZhdGFyJywge1xuICAvLyAgICAgICBpc0VkaXQ6IGZhbHNlLFxuICAvLyAgICAgfSk7XG4gIC8vICAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBYUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDBCQUEwQixFQUFFO0VBQUEsT0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ2pDQyxJQUFJLENBQUNDLGFBQWEsQ0FBQywwQkFBMEIsQ0FBQztJQUNqREMsWUFBWSxFQUFFRixJQUFJLENBQUNHLEVBQUUsQ0FBQztFQUFDO0FBQUEsQ0FDdkIsQ0FBQztBQUFDLElBQUFDLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxrQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFB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