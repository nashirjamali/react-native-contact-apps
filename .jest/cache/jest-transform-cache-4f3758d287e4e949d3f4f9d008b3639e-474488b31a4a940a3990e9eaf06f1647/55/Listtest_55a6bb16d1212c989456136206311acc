2086224f2caea78c0fea1e061a7d8d9d
_getJestObj().mock('../../apis/contact', function () {
  return {
    getContacts: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _List = _interopRequireDefault(require("../List"));
var _contact = require("../../apis/contact");
var _testUtils = require("../../utils/test-utils");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var createTestProps = function createTestProps(props) {
  return Object.assign({
    navigation: Object.assign({
      navigate: jest.fn()
    }, props)
  }, props);
};
describe('List', function () {
  test('renders correctly and fetches contacts', (0, _asyncToGenerator2.default)(function* () {
    var mockContacts = [{
      id: '111',
      firstName: 'John',
      lastName: 'Doe',
      age: 20,
      photo: ''
    }, {
      id: '222',
      firstName: 'Jane',
      lastName: 'Smith',
      age: 20,
      photo: ''
    }];
    var mockedGetContacts = _contact.getContacts;
    mockedGetContacts.mockResolvedValueOnce({
      data: {
        data: mockContacts
      },
      status: 200
    });
    var props = createTestProps({});
    var _renderWithProviders = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_List.default, Object.assign({
        route: {
          key: 'List',
          name: 'List'
        }
      }, props))),
      getByText = _renderWithProviders.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('Contact')).toBeTruthy();
      expect(getByText('John Doe')).toBeTruthy();
      expect(getByText('Jane Smith')).toBeTruthy();
    });
    expect(_contact.getContacts).toHaveBeenCalledTimes(1);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJnZXRDb250YWN0cyIsImplc3QiLCJmbiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX0xpc3QiLCJfY29udGFjdCIsIl90ZXN0VXRpbHMiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwiY3JlYXRlVGVzdFByb3BzIiwicHJvcHMiLCJPYmplY3QiLCJhc3NpZ24iLCJuYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJkZXNjcmliZSIsInRlc3QiLCJkZWZhdWx0IiwibW9ja0NvbnRhY3RzIiwiaWQiLCJmaXJzdE5hbWUiLCJsYXN0TmFtZSIsImFnZSIsInBob3RvIiwibW9ja2VkR2V0Q29udGFjdHMiLCJtb2NrUmVzb2x2ZWRWYWx1ZU9uY2UiLCJkYXRhIiwic3RhdHVzIiwiX3JlbmRlcldpdGhQcm92aWRlcnMiLCJyZW5kZXJXaXRoUHJvdmlkZXJzIiwianN4Iiwicm91dGUiLCJrZXkiLCJuYW1lIiwiZ2V0QnlUZXh0Iiwid2FpdEZvciIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiXSwic291cmNlcyI6WyJMaXN0LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3JlbmRlciwgd2FpdEZvcn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IExpc3QgZnJvbSAnLi4vTGlzdCc7XG5pbXBvcnQge2dldENvbnRhY3RzfSBmcm9tICcuLi8uLi9hcGlzL2NvbnRhY3QnO1xuaW1wb3J0IHtBeGlvc1Jlc3BvbnNlfSBmcm9tICdheGlvcyc7XG5pbXBvcnQge1N0YWNrTmF2aWdhdGlvblByb3B9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL3N0YWNrJztcbmltcG9ydCB7Um9vdFN0YWNrUGFyYW1MaXN0fSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQge3JlbmRlcldpdGhQcm92aWRlcnN9IGZyb20gJy4uLy4uL3V0aWxzL3Rlc3QtdXRpbHMnO1xuXG5qZXN0Lm1vY2soJy4uLy4uL2FwaXMvY29udGFjdCcsICgpID0+ICh7XG4gIGdldENvbnRhY3RzOiBqZXN0LmZuKCksXG59KSk7XG5cbnR5cGUgTmF2aWdhdGlvblByb3BzID0gU3RhY2tOYXZpZ2F0aW9uUHJvcDxSb290U3RhY2tQYXJhbUxpc3QsICdMaXN0Jz47XG5cbmNvbnN0IGNyZWF0ZVRlc3RQcm9wcyA9IChwcm9wczogUGFydGlhbDxOYXZpZ2F0aW9uUHJvcHM+KSA9PiAoe1xuICBuYXZpZ2F0aW9uOiB7XG4gICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcbiAgICAuLi5wcm9wcyxcbiAgfSBhcyBOYXZpZ2F0aW9uUHJvcHMsXG4gIC4uLnByb3BzLFxufSk7XG5cbmRlc2NyaWJlKCdMaXN0JywgKCkgPT4ge1xuICB0ZXN0KCdyZW5kZXJzIGNvcnJlY3RseSBhbmQgZmV0Y2hlcyBjb250YWN0cycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2NrQ29udGFjdHMgPSBbXG4gICAgICB7aWQ6ICcxMTEnLCBmaXJzdE5hbWU6ICdKb2huJywgbGFzdE5hbWU6ICdEb2UnLCBhZ2U6IDIwLCBwaG90bzogJyd9LFxuICAgICAge2lkOiAnMjIyJywgZmlyc3ROYW1lOiAnSmFuZScsIGxhc3ROYW1lOiAnU21pdGgnLCBhZ2U6IDIwLCBwaG90bzogJyd9LFxuICAgIF07XG4gICAgY29uc3QgbW9ja2VkR2V0Q29udGFjdHMgPSBnZXRDb250YWN0cyBhcyBqZXN0Lk1vY2tlZEZ1bmN0aW9uPFxuICAgICAgdHlwZW9mIGdldENvbnRhY3RzXG4gICAgPjtcbiAgICBtb2NrZWRHZXRDb250YWN0cy5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgZGF0YToge2RhdGE6IG1vY2tDb250YWN0c30sXG4gICAgICBzdGF0dXM6IDIwMCxcbiAgICB9IGFzIEF4aW9zUmVzcG9uc2UpO1xuXG4gICAgY29uc3QgcHJvcHMgPSBjcmVhdGVUZXN0UHJvcHMoe30pO1xuICAgIGNvbnN0IHtnZXRCeVRleHR9ID0gcmVuZGVyV2l0aFByb3ZpZGVycyhcbiAgICAgIDxMaXN0IHJvdXRlPXt7a2V5OiAnTGlzdCcsIG5hbWU6ICdMaXN0J319IHsuLi5wcm9wc30gLz4sXG4gICAgKTtcblxuICAgIC8vIFdhaXQgZm9yIGNvbnRhY3RzIHRvIGJlIGZldGNoZWQgYW5kIHJlbmRlcmVkXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCdDb250YWN0JykpLnRvQmVUcnV0aHkoKTtcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoJ0pvaG4gRG9lJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoJ0phbmUgU21pdGgnKSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuXG4gICAgLy8gVmVyaWZ5IHRoYXQgZ2V0Q29udGFjdHMgaXMgY2FsbGVkXG4gICAgZXhwZWN0KGdldENvbnRhY3RzKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuXG4gIC8vICAgdGVzdCgnZGlzcGxheXMgZXJyb3IgbWVzc2FnZSB3aGVuIGZldGNoaW5nIGNvbnRhY3RzIGZhaWxzJywgYXN5bmMgKCkgPT4ge1xuICAvLyAgICAgZ2V0Q29udGFjdHMubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgLy8gICAgICAgZGF0YTogbnVsbCxcbiAgLy8gICAgICAgc3RhdHVzOiA1MDAsXG4gIC8vICAgICB9KTtcblxuICAvLyAgICAgY29uc3Qge2dldEJ5VGV4dH0gPSByZW5kZXIoPExpc3QgLz4pO1xuXG4gIC8vICAgICAvLyBMb2FkaW5nIHN0YXRlIGlzIGRpc3BsYXllZCBpbml0aWFsbHlcbiAgLy8gICAgIGV4cGVjdChnZXRCeVRleHQoJ0xvYWRpbmcuLi4nKSkudG9CZVRydXRoeSgpO1xuXG4gIC8vICAgICAvLyBXYWl0IGZvciBlcnJvciBtZXNzYWdlIHRvIGJlIGRpc3BsYXllZFxuICAvLyAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gIC8vICAgICAgIGV4cGVjdChnZXRCeVRleHQoJ0Vycm9yJykpLnRvQmVUcnV0aHkoKTtcbiAgLy8gICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnc29tZXRoaW5nIHdlbnQgd3JvbmcnKSkudG9CZVRydXRoeSgpO1xuICAvLyAgICAgfSk7XG5cbiAgLy8gICAgIC8vIFZlcmlmeSB0aGF0IGdldENvbnRhY3RzIGlzIGNhbGxlZFxuICAvLyAgICAgZXhwZWN0KGdldENvbnRhY3RzKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIC8vICAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBU0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLG9CQUFvQixFQUFFO0VBQUEsT0FBTztJQUNyQ0MsV0FBVyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQztFQUN2QixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBQUMsSUFBQUMsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGtCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFYSixJQUFBRSxNQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxZQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxLQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSyxRQUFBLEdBQUFMLE9BQUE7QUFJQSxJQUFBTSxVQUFBLEdBQUFOLE9BQUE7QUFBMkQsSUFBQU8sV0FBQSxHQUFBUCxPQUFBO0FBQUEsU0FBQU4sWUFBQTtFQUFBLElBQUFjLFFBQUEsR0FBQVIsT0FBQTtJQUFBSCxJQUFBLEdBQUFXLFFBQUEsQ0FBQVgsSUFBQTtFQUFBSCxXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBRyxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFRM0QsSUFBTVksZUFBZSxHQUFHLFNBQWxCQSxlQUFlQSxDQUFJQyxLQUErQjtFQUFBLE9BQUFDLE1BQUEsQ0FBQUMsTUFBQTtJQUN0REMsVUFBVSxFQUFBRixNQUFBLENBQUFDLE1BQUE7TUFDUkUsUUFBUSxFQUFFakIsSUFBSSxDQUFDQyxFQUFFLENBQUM7SUFBQyxHQUNoQlksS0FBSztFQUNVLEdBQ2pCQSxLQUFLO0FBQUEsQ0FDUjtBQUVGSyxRQUFRLENBQUMsTUFBTSxFQUFFLFlBQU07RUFDckJDLElBQUksQ0FBQyx3Q0FBd0MsTUFBQWYsa0JBQUEsQ0FBQWdCLE9BQUEsRUFBRSxhQUFZO0lBQ3pELElBQU1DLFlBQVksR0FBRyxDQUNuQjtNQUFDQyxFQUFFLEVBQUUsS0FBSztNQUFFQyxTQUFTLEVBQUUsTUFBTTtNQUFFQyxRQUFRLEVBQUUsS0FBSztNQUFFQyxHQUFHLEVBQUUsRUFBRTtNQUFFQyxLQUFLLEVBQUU7SUFBRSxDQUFDLEVBQ25FO01BQUNKLEVBQUUsRUFBRSxLQUFLO01BQUVDLFNBQVMsRUFBRSxNQUFNO01BQUVDLFFBQVEsRUFBRSxPQUFPO01BQUVDLEdBQUcsRUFBRSxFQUFFO01BQUVDLEtBQUssRUFBRTtJQUFFLENBQUMsQ0FDdEU7SUFDRCxJQUFNQyxpQkFBaUIsR0FBRzVCLG9CQUV6QjtJQUNENEIsaUJBQWlCLENBQUNDLHFCQUFxQixDQUFDO01BQ3RDQyxJQUFJLEVBQUU7UUFBQ0EsSUFBSSxFQUFFUjtNQUFZLENBQUM7TUFDMUJTLE1BQU0sRUFBRTtJQUNWLENBQWtCLENBQUM7SUFFbkIsSUFBTWpCLEtBQUssR0FBR0QsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pDLElBQUFtQixvQkFBQSxHQUFvQixJQUFBQyw4QkFBbUIsRUFDckMsSUFBQXRCLFdBQUEsQ0FBQXVCLEdBQUEsRUFBQzFCLEtBQUEsQ0FBQWEsT0FBSSxFQUFBTixNQUFBLENBQUFDLE1BQUE7UUFBQ21CLEtBQUssRUFBRTtVQUFDQyxHQUFHLEVBQUUsTUFBTTtVQUFFQyxJQUFJLEVBQUU7UUFBTTtNQUFFLEdBQUt2QixLQUFLLENBQUcsQ0FDeEQsQ0FBQztNQUZNd0IsU0FBUyxHQUFBTixvQkFBQSxDQUFUTSxTQUFTO0lBS2hCLE1BQU0sSUFBQUMsb0JBQU8sRUFBQyxZQUFNO01BQ2xCQyxNQUFNLENBQUNGLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDRyxVQUFVLENBQUMsQ0FBQztNQUN6Q0QsTUFBTSxDQUFDRixTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQ0csVUFBVSxDQUFDLENBQUM7TUFDMUNELE1BQU0sQ0FBQ0YsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUNHLFVBQVUsQ0FBQyxDQUFDO0lBQzlDLENBQUMsQ0FBQztJQUdGRCxNQUFNLENBQUN4QyxvQkFBVyxDQUFDLENBQUMwQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7RUFDOUMsQ0FBQyxFQUFDO0FBc0JKLENBQUMsQ0FBQyJ9