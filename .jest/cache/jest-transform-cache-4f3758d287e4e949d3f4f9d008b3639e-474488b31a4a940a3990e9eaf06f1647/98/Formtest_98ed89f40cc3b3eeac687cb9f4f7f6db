bc3e93d791d5f5e8899aeb4df93fb735
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useIsFocused: jest.fn()
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Form = _interopRequireDefault(require("../Form"));
var _testUtils = require("../../utils/test-utils");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var createTestProps = function createTestProps(props) {
  return Object.assign({
    navigation: Object.assign({
      navigate: jest.fn()
    }, props)
  }, props);
};
describe('Form', function () {
  test('renders correctly and enables next button when form is complete', function () {
    var props = createTestProps({});
    var _renderWithProviders = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_Form.default, Object.assign({
        route: {
          key: 'Form',
          name: 'Form',
          params: {
            isEdit: false
          }
        }
      }, props))),
      getByPlaceholderText = _renderWithProviders.getByPlaceholderText,
      getByLabelText = _renderWithProviders.getByLabelText;
    var firstNameInput = getByPlaceholderText('First Name');
    var lastNameInput = getByPlaceholderText('Last Name');
    var ageInput = getByPlaceholderText('Age');
    var nextButton = getByLabelText('button-next');
    _reactNative.fireEvent.changeText(firstNameInput, 'John');
    _reactNative.fireEvent.changeText(lastNameInput, 'Doe');
    _reactNative.fireEvent.changeText(ageInput, '30');
    expect(firstNameInput.props.value).toBe('John');
    expect(lastNameInput.props.value).toBe('Doe');
    expect(ageInput.props.value).toBe('30');
    expect(nextButton.props.accessibilityState.disabled).toBe(false);
  });
  test('navigates to ChooseAvatar screen when Next button is clicked', (0, _asyncToGenerator2.default)(function* () {
    var props = createTestProps({});
    var _renderWithProviders2 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_Form.default, Object.assign({
        route: {
          key: 'Form',
          name: 'Form',
          params: {
            isEdit: false
          }
        }
      }, props))),
      getByPlaceholderText = _renderWithProviders2.getByPlaceholderText,
      getByLabelText = _renderWithProviders2.getByLabelText;
    var firstNameInput = getByPlaceholderText('First Name');
    var lastNameInput = getByPlaceholderText('Last Name');
    var ageInput = getByPlaceholderText('Age');
    var nextButton = getByLabelText('button-next');
    _reactNative.fireEvent.changeText(firstNameInput, 'John');
    _reactNative.fireEvent.changeText(lastNameInput, 'Doe');
    _reactNative.fireEvent.changeText(ageInput, '30');
    _reactNative.fireEvent.press(nextButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(props.navigation.navigate).toHaveBeenCalledWith('ChooseAvatar', {
        isEdit: false
      });
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsInVzZUlzRm9jdXNlZCIsImZuIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfRm9ybSIsIl90ZXN0VXRpbHMiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwiY3JlYXRlVGVzdFByb3BzIiwicHJvcHMiLCJuYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJkZXNjcmliZSIsInRlc3QiLCJfcmVuZGVyV2l0aFByb3ZpZGVycyIsInJlbmRlcldpdGhQcm92aWRlcnMiLCJqc3giLCJkZWZhdWx0Iiwicm91dGUiLCJrZXkiLCJuYW1lIiwicGFyYW1zIiwiaXNFZGl0IiwiZ2V0QnlQbGFjZWhvbGRlclRleHQiLCJnZXRCeUxhYmVsVGV4dCIsImZpcnN0TmFtZUlucHV0IiwibGFzdE5hbWVJbnB1dCIsImFnZUlucHV0IiwibmV4dEJ1dHRvbiIsImZpcmVFdmVudCIsImNoYW5nZVRleHQiLCJleHBlY3QiLCJ2YWx1ZSIsInRvQmUiLCJhY2Nlc3NpYmlsaXR5U3RhdGUiLCJkaXNhYmxlZCIsIl9yZW5kZXJXaXRoUHJvdmlkZXJzMiIsInByZXNzIiwid2FpdEZvciIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIl0sInNvdXJjZXMiOlsiRm9ybS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgcmVuZGVyLFxuICBmaXJlRXZlbnQsXG4gIHNjcmVlbixcbiAgd2FpdEZvcixcbn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHtQcm92aWRlcn0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IEZvcm0gZnJvbSAnLi4vRm9ybSc7XG5pbXBvcnQge3JlbmRlcldpdGhQcm92aWRlcnN9IGZyb20gJy4uLy4uL3V0aWxzL3Rlc3QtdXRpbHMnO1xuaW1wb3J0IHtTdGFja05hdmlnYXRpb25Qcm9wfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9zdGFjayc7XG5pbXBvcnQge1Jvb3RTdGFja1BhcmFtTGlzdH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+ICh7XG4gIC4uLmplc3QucmVxdWlyZUFjdHVhbCgnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJyksXG4gIHVzZUlzRm9jdXNlZDogamVzdC5mbigpLFxufSkpO1xuXG50eXBlIE5hdmlnYXRpb25Qcm9wcyA9IFN0YWNrTmF2aWdhdGlvblByb3A8Um9vdFN0YWNrUGFyYW1MaXN0LCAnRm9ybSc+O1xuXG5jb25zdCBjcmVhdGVUZXN0UHJvcHMgPSAocHJvcHM6IFBhcnRpYWw8TmF2aWdhdGlvblByb3BzPikgPT4gKHtcbiAgbmF2aWdhdGlvbjoge1xuICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXG4gICAgLi4ucHJvcHMsXG4gIH0gYXMgTmF2aWdhdGlvblByb3BzLFxuICAuLi5wcm9wcyxcbn0pO1xuXG5kZXNjcmliZSgnRm9ybScsICgpID0+IHtcbiAgdGVzdCgncmVuZGVycyBjb3JyZWN0bHkgYW5kIGVuYWJsZXMgbmV4dCBidXR0b24gd2hlbiBmb3JtIGlzIGNvbXBsZXRlJywgKCkgPT4ge1xuICAgIGNvbnN0IHByb3BzID0gY3JlYXRlVGVzdFByb3BzKHt9KTtcbiAgICBjb25zdCB7Z2V0QnlQbGFjZWhvbGRlclRleHQsIGdldEJ5TGFiZWxUZXh0fSA9IHJlbmRlcldpdGhQcm92aWRlcnMoXG4gICAgICA8Rm9ybVxuICAgICAgICByb3V0ZT17e2tleTogJ0Zvcm0nLCBuYW1lOiAnRm9ybScsIHBhcmFtczoge2lzRWRpdDogZmFsc2V9fX1cbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgLz4sXG4gICAgKTtcblxuICAgIGNvbnN0IGZpcnN0TmFtZUlucHV0ID0gZ2V0QnlQbGFjZWhvbGRlclRleHQoJ0ZpcnN0IE5hbWUnKTtcbiAgICBjb25zdCBsYXN0TmFtZUlucHV0ID0gZ2V0QnlQbGFjZWhvbGRlclRleHQoJ0xhc3QgTmFtZScpO1xuICAgIGNvbnN0IGFnZUlucHV0ID0gZ2V0QnlQbGFjZWhvbGRlclRleHQoJ0FnZScpO1xuICAgIGNvbnN0IG5leHRCdXR0b24gPSBnZXRCeUxhYmVsVGV4dCgnYnV0dG9uLW5leHQnKTtcblxuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGZpcnN0TmFtZUlucHV0LCAnSm9obicpO1xuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGxhc3ROYW1lSW5wdXQsICdEb2UnKTtcbiAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChhZ2VJbnB1dCwgJzMwJyk7XG5cbiAgICBleHBlY3QoZmlyc3ROYW1lSW5wdXQucHJvcHMudmFsdWUpLnRvQmUoJ0pvaG4nKTtcbiAgICBleHBlY3QobGFzdE5hbWVJbnB1dC5wcm9wcy52YWx1ZSkudG9CZSgnRG9lJyk7XG4gICAgZXhwZWN0KGFnZUlucHV0LnByb3BzLnZhbHVlKS50b0JlKCczMCcpO1xuICAgIGV4cGVjdChuZXh0QnV0dG9uLnByb3BzLmFjY2Vzc2liaWxpdHlTdGF0ZS5kaXNhYmxlZCkudG9CZShmYWxzZSk7XG4gIH0pO1xuXG4gIHRlc3QoJ25hdmlnYXRlcyB0byBDaG9vc2VBdmF0YXIgc2NyZWVuIHdoZW4gTmV4dCBidXR0b24gaXMgY2xpY2tlZCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBwcm9wcyA9IGNyZWF0ZVRlc3RQcm9wcyh7fSk7XG5cbiAgICBjb25zdCB7Z2V0QnlQbGFjZWhvbGRlclRleHQsIGdldEJ5TGFiZWxUZXh0fSA9IHJlbmRlcldpdGhQcm92aWRlcnMoXG4gICAgICA8Rm9ybVxuICAgICAgICByb3V0ZT17e2tleTogJ0Zvcm0nLCBuYW1lOiAnRm9ybScsIHBhcmFtczoge2lzRWRpdDogZmFsc2V9fX1cbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgLz4sXG4gICAgKTtcblxuICAgIGNvbnN0IGZpcnN0TmFtZUlucHV0ID0gZ2V0QnlQbGFjZWhvbGRlclRleHQoJ0ZpcnN0IE5hbWUnKTtcbiAgICBjb25zdCBsYXN0TmFtZUlucHV0ID0gZ2V0QnlQbGFjZWhvbGRlclRleHQoJ0xhc3QgTmFtZScpO1xuICAgIGNvbnN0IGFnZUlucHV0ID0gZ2V0QnlQbGFjZWhvbGRlclRleHQoJ0FnZScpO1xuICAgIGNvbnN0IG5leHRCdXR0b24gPSBnZXRCeUxhYmVsVGV4dCgnYnV0dG9uLW5leHQnKTtcblxuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGZpcnN0TmFtZUlucHV0LCAnSm9obicpO1xuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGxhc3ROYW1lSW5wdXQsICdEb2UnKTtcbiAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChhZ2VJbnB1dCwgJzMwJyk7XG4gICAgZmlyZUV2ZW50LnByZXNzKG5leHRCdXR0b24pO1xuXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3QocHJvcHMubmF2aWdhdGlvbi5uYXZpZ2F0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ0Nob29zZUF2YXRhcicsIHtcbiAgICAgICAgaXNFZGl0OiBmYWxzZSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFhQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMEJBQTBCLEVBQUU7RUFBQSxPQUFBQyxNQUFBLENBQUFDLE1BQUEsS0FDakNDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLDBCQUEwQixDQUFDO0lBQ2pEQyxZQUFZLEVBQUVGLElBQUksQ0FBQ0csRUFBRSxDQUFDO0VBQUM7QUFBQSxDQUN2QixDQUFDO0FBQUMsSUFBQUMsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGtCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFoQkosSUFBQUUsTUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsWUFB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