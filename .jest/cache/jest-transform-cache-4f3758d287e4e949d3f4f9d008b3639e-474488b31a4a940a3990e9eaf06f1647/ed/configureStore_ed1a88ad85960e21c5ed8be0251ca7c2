e9db7e508b346ce2062ea0901c1ec956
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _redux = require("redux");
var _reducers = require("./reducers");
var _reduxThunk = _interopRequireDefault(require("redux-thunk"));
function cov_11xkb6f75v() {
  var path = "D:\\riset\\ReactNative\\ContactApps\\src\\redux\\configureStore.ts";
  var hash = "04c48ac76a01e43e985a5d5cbc3f5c1dc387066f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\riset\\ReactNative\\ContactApps\\src\\redux\\configureStore.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 20
        },
        end: {
          line: 5,
          column: 50
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "04c48ac76a01e43e985a5d5cbc3f5c1dc387066f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_11xkb6f75v = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_11xkb6f75v();
var rootReducer = (cov_11xkb6f75v().s[0]++, (0, _redux.combineReducers)({
  formReducer: _reducers.formReducer
}));
var _default = (0, _redux.createStore)(rootReducer, (0, _redux.applyMiddleware)(_reduxThunk.default));
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVkdXgiLCJyZXF1aXJlIiwiX3JlZHVjZXJzIiwiX3JlZHV4VGh1bmsiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiY292XzExeGtiNmY3NXYiLCJwYXRoIiwiaGFzaCIsImdsb2JhbCIsIkZ1bmN0aW9uIiwiZ2N2IiwiY292ZXJhZ2VEYXRhIiwic3RhdGVtZW50TWFwIiwic3RhcnQiLCJsaW5lIiwiY29sdW1uIiwiZW5kIiwiZm5NYXAiLCJicmFuY2hNYXAiLCJzIiwiZiIsImIiLCJfY292ZXJhZ2VTY2hlbWEiLCJjb3ZlcmFnZSIsImFjdHVhbENvdmVyYWdlIiwicm9vdFJlZHVjZXIiLCJjb21iaW5lUmVkdWNlcnMiLCJmb3JtUmVkdWNlciIsIl9kZWZhdWx0IiwiY3JlYXRlU3RvcmUiLCJhcHBseU1pZGRsZXdhcmUiLCJ0aHVuayIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiY29uZmlndXJlU3RvcmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjcmVhdGVTdG9yZSwgY29tYmluZVJlZHVjZXJzLCBhcHBseU1pZGRsZXdhcmV9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB7Zm9ybVJlZHVjZXJ9IGZyb20gJy4vcmVkdWNlcnMnO1xuaW1wb3J0IHRodW5rIGZyb20gJ3JlZHV4LXRodW5rJztcblxuY29uc3Qgcm9vdFJlZHVjZXIgPSBjb21iaW5lUmVkdWNlcnMoe2Zvcm1SZWR1Y2VyfSk7XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN0b3JlKHJvb3RSZWR1Y2VyLCBhcHBseU1pZGRsZXdhcmUodGh1bmspKTtcblxuZXhwb3J0IHR5cGUgU3RhdGUgPSBSZXR1cm5UeXBlPHR5cGVvZiByb290UmVkdWNlcj47XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsU0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsV0FBQSxHQUFBQyxzQkFBQSxDQUFBSCxPQUFBO0FBQWdDLFNBQUFJLGVBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLE1BQUEsT0FBQUMsUUFBQTtFQUFBLElBQUFDLEdBQUE7RUFBQSxJQUFBQyxZQUFBO0lBQUFMLElBQUE7SUFBQU0sWUFBQTtNQUFBO1FBQUFDLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO0lBQUE7SUFBQUUsS0FBQTtJQUFBQyxTQUFBO0lBQUFDLENBQUE7TUFBQTtJQUFBO0lBQUFDLENBQUE7SUFBQUMsQ0FBQTtJQUFBQyxlQUFBO0lBQUFmLElBQUE7RUFBQTtFQUFBLElBQUFnQixRQUFBLEdBQUFmLE1BQUEsQ0FBQUUsR0FBQSxNQUFBRixNQUFBLENBQUFFLEdBQUE7RUFBQSxLQUFBYSxRQUFBLENBQUFqQixJQUFBLEtBQUFpQixRQUFBLENBQUFqQixJQUFBLEVBQUFDLElBQUEsS0FBQUEsSUFBQTtJQUFBZ0IsUUFBQSxDQUFBakIsSUFBQSxJQUFBSyxZQUFBO0VBQUE7RUFBQSxJQUFBYSxjQUFBLEdBQUFELFFBQUEsQ0FBQWpCLElBQUE7RUFBQTtJQUFBRCxjQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBbUIsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQW5CLGNBQUE7QUFFaEMsSUFBTW9CLFdBQVcsSUFBQXBCLGNBQUEsR0FBQWMsQ0FBQSxPQUFHLElBQUFPLHNCQUFlLEVBQUM7RUFBQ0MsV0FBVyxFQUFYQTtBQUFXLENBQUMsQ0FBQztBQUFDLElBQUFDLFFBQUEsR0FFcEMsSUFBQUMsa0JBQVcsRUFBQ0osV0FBVyxFQUFFLElBQUFLLHNCQUFlLEVBQUNDLG1CQUFLLENBQUMsQ0FBQztBQUFBQyxPQUFBLENBQUFDLE9BQUEsR0FBQUwsUUFBQSJ9