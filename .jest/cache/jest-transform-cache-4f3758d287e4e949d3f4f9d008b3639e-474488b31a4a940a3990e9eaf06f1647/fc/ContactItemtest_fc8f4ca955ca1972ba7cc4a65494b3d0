393e391b2e8f2397ebc2d4e729f88771
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ContactItem = _interopRequireDefault(require("../ContactItem"));
var _jsxRuntime = require("react/jsx-runtime");
describe('ContactItem', function () {
  var contact = {
    firstName: 'John',
    lastName: 'Doe',
    photo: 'https://example.com/avatar.png',
    age: 2,
    id: '111'
  };
  afterEach(function () {
    jest.clearAllMocks();
  });
  test('renders correctly with contact data', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContactItem.default, {
        contact: contact
      })),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    var avatar = getByTestId('user-avatar-text');
    var name = getByText('John Doe');
    console.log(avatar.props);
    expect(avatar.props.firstName).toBe('John');
    expect(avatar.props.lastName).toBe('Doe');
    expect(avatar.props.photo).toBe('https://example.com/avatar.png');
    expect(name).toBeTruthy();
  });
  test('calls onPress when pressed', function () {
    var onPressMock = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContactItem.default, {
        contact: contact,
        onPress: onPressMock
      })),
      getByTestId = _render2.getByTestId;
    var touchable = getByTestId('user-avatar-text');
    _reactNative.fireEvent.press(touchable);
    expect(onPressMock).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Db250YWN0SXRlbSIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJjb250YWN0IiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJwaG90byIsImFnZSIsImlkIiwiYWZ0ZXJFYWNoIiwiamVzdCIsImNsZWFyQWxsTW9ja3MiLCJ0ZXN0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsImRlZmF1bHQiLCJnZXRCeVRleHQiLCJnZXRCeVRlc3RJZCIsImF2YXRhciIsIm5hbWUiLCJjb25zb2xlIiwibG9nIiwicHJvcHMiLCJleHBlY3QiLCJ0b0JlIiwidG9CZVRydXRoeSIsIm9uUHJlc3NNb2NrIiwiZm4iLCJfcmVuZGVyMiIsIm9uUHJlc3MiLCJ0b3VjaGFibGUiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWQiXSwic291cmNlcyI6WyJDb250YWN0SXRlbS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtyZW5kZXIsIGZpcmVFdmVudH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IENvbnRhY3RJdGVtIGZyb20gJy4uL0NvbnRhY3RJdGVtJztcblxuZGVzY3JpYmUoJ0NvbnRhY3RJdGVtJywgKCkgPT4ge1xuICBjb25zdCBjb250YWN0ID0ge1xuICAgIGZpcnN0TmFtZTogJ0pvaG4nLFxuICAgIGxhc3ROYW1lOiAnRG9lJyxcbiAgICBwaG90bzogJ2h0dHBzOi8vZXhhbXBsZS5jb20vYXZhdGFyLnBuZycsXG4gICAgYWdlOiAyLFxuICAgIGlkOiAnMTExJyxcbiAgfTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICB9KTtcblxuICB0ZXN0KCdyZW5kZXJzIGNvcnJlY3RseSB3aXRoIGNvbnRhY3QgZGF0YScsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXh0LCBnZXRCeVRlc3RJZH0gPSByZW5kZXIoPENvbnRhY3RJdGVtIGNvbnRhY3Q9e2NvbnRhY3R9IC8+KTtcblxuICAgIGNvbnN0IGF2YXRhciA9IGdldEJ5VGVzdElkKCd1c2VyLWF2YXRhci10ZXh0Jyk7XG4gICAgY29uc3QgbmFtZSA9IGdldEJ5VGV4dCgnSm9obiBEb2UnKTtcbiAgICBjb25zb2xlLmxvZyhhdmF0YXIucHJvcHMpO1xuXG4gICAgZXhwZWN0KGF2YXRhci5wcm9wcy5maXJzdE5hbWUpLnRvQmUoJ0pvaG4nKTtcbiAgICBleHBlY3QoYXZhdGFyLnByb3BzLmxhc3ROYW1lKS50b0JlKCdEb2UnKTtcbiAgICBleHBlY3QoYXZhdGFyLnByb3BzLnBob3RvKS50b0JlKCdodHRwczovL2V4YW1wbGUuY29tL2F2YXRhci5wbmcnKTtcbiAgICBleHBlY3QobmFtZSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICB0ZXN0KCdjYWxscyBvblByZXNzIHdoZW4gcHJlc3NlZCcsICgpID0+IHtcbiAgICBjb25zdCBvblByZXNzTW9jayA9IGplc3QuZm4oKTtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKFxuICAgICAgPENvbnRhY3RJdGVtIGNvbnRhY3Q9e2NvbnRhY3R9IG9uUHJlc3M9e29uUHJlc3NNb2NrfSAvPixcbiAgICApO1xuXG4gICAgY29uc3QgdG91Y2hhYmxlID0gZ2V0QnlUZXN0SWQoJ3VzZXItYXZhdGFyLXRleHQnKTtcbiAgICBmaXJlRXZlbnQucHJlc3ModG91Y2hhYmxlKTtcblxuICAgIGV4cGVjdChvblByZXNzTW9jaykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsWUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQXlDLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUV6Q0ksUUFBUSxDQUFDLGFBQWEsRUFBRSxZQUFNO0VBQzVCLElBQU1DLE9BQU8sR0FBRztJQUNkQyxTQUFTLEVBQUUsTUFBTTtJQUNqQkMsUUFBUSxFQUFFLEtBQUs7SUFDZkMsS0FBSyxFQUFFLGdDQUFnQztJQUN2Q0MsR0FBRyxFQUFFLENBQUM7SUFDTkMsRUFBRSxFQUFFO0VBQ04sQ0FBQztFQUVEQyxTQUFTLENBQUMsWUFBTTtJQUNkQyxJQUFJLENBQUNDLGFBQWEsQ0FBQyxDQUFDO0VBQ3RCLENBQUMsQ0FBQztFQUVGQyxJQUFJLENBQUMscUNBQXFDLEVBQUUsWUFBTTtJQUNoRCxJQUFBQyxPQUFBLEdBQWlDLElBQUFDLG1CQUFNLEVBQUMsSUFBQWIsV0FBQSxDQUFBYyxHQUFBLEVBQUNmLFlBQUEsQ0FBQWdCLE9BQVc7UUFBQ2IsT0FBTyxFQUFFQTtNQUFRLENBQUUsQ0FBQyxDQUFDO01BQW5FYyxTQUFTLEdBQUFKLE9BQUEsQ0FBVEksU0FBUztNQUFFQyxXQUFXLEdBQUFMLE9BQUEsQ0FBWEssV0FBVztJQUU3QixJQUFNQyxNQUFNLEdBQUdELFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQztJQUM5QyxJQUFNRSxJQUFJLEdBQUdILFNBQVMsQ0FBQyxVQUFVLENBQUM7SUFDbENJLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDSCxNQUFNLENBQUNJLEtBQUssQ0FBQztJQUV6QkMsTUFBTSxDQUFDTCxNQUFNLENBQUNJLEtBQUssQ0FBQ25CLFNBQVMsQ0FBQyxDQUFDcUIsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUMzQ0QsTUFBTSxDQUFDTCxNQUFNLENBQUNJLEtBQUssQ0FBQ2xCLFFBQVEsQ0FBQyxDQUFDb0IsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN6Q0QsTUFBTSxDQUFDTCxNQUFNLENBQUNJLEtBQUssQ0FBQ2pCLEtBQUssQ0FBQyxDQUFDbUIsSUFBSSxDQUFDLGdDQUFnQyxDQUFDO0lBQ2pFRCxNQUFNLENBQUNKLElBQUksQ0FBQyxDQUFDTSxVQUFVLENBQUMsQ0FBQztFQUMzQixDQUFDLENBQUM7RUFFRmQsSUFBSSxDQUFDLDRCQUE0QixFQUFFLFlBQU07SUFDdkMsSUFBTWUsV0FBVyxHQUFHakIsSUFBSSxDQUFDa0IsRUFBRSxDQUFDLENBQUM7SUFDN0IsSUFBQUMsUUFBQSxHQUFzQixJQUFBZixtQkFBTSxFQUMxQixJQUFBYixXQUFBLENBQUFjLEdBQUEsRUFBQ2YsWUFBQSxDQUFBZ0IsT0FBVztRQUFDYixPQUFPLEVBQUVBLE9BQVE7UUFBQzJCLE9BQU8sRUFBRUg7TUFBWSxDQUFFLENBQ3hELENBQUM7TUFGTVQsV0FBVyxHQUFBVyxRQUFBLENBQVhYLFdBQVc7SUFJbEIsSUFBTWEsU0FBUyxHQUFHYixXQUFXLENBQUMsa0JBQWtCLENBQUM7SUFDakRjLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0YsU0FBUyxDQUFDO0lBRTFCUCxNQUFNLENBQUNHLFdBQVcsQ0FBQyxDQUFDTyxnQkFBZ0IsQ0FBQyxDQUFDO0VBQ3hDLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyJ9