4c9e60bddb4d129fe8ea7ff6c7518e41
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ContactItem = _interopRequireDefault(require("../ContactItem"));
var _jsxRuntime = require("react/jsx-runtime");
describe('ContactItem', function () {
  var contact = {
    firstName: 'John',
    lastName: 'Doe',
    photo: 'https://example.com/avatar.png',
    age: 2,
    id: '111'
  };
  afterEach(function () {
    jest.clearAllMocks();
  });
  test('renders correctly with contact data', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContactItem.default, {
        contact: contact
      })),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    var avatar = getByTestId('avatar-image');
    var name = getByText('John Doe');
    expect(avatar.props.firstName).toBe('John');
    expect(avatar.props.lastName).toBe('Doe');
    expect(avatar.props.photo).toBe('https://example.com/avatar.png');
    expect(name).toBeTruthy();
  });
  test('calls onPress when pressed', function () {
    var onPressMock = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContactItem.default, {
        contact: contact,
        onPress: onPressMock
      })),
      getByTestId = _render2.getByTestId;
    var touchable = getByTestId('contact-item-touchable');
    _reactNative.fireEvent.press(touchable);
    expect(onPressMock).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Db250YWN0SXRlbSIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJjb250YWN0IiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJwaG90byIsImFnZSIsImlkIiwiYWZ0ZXJFYWNoIiwiamVzdCIsImNsZWFyQWxsTW9ja3MiLCJ0ZXN0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsImRlZmF1bHQiLCJnZXRCeVRleHQiLCJnZXRCeVRlc3RJZCIsImF2YXRhciIsIm5hbWUiLCJleHBlY3QiLCJwcm9wcyIsInRvQmUiLCJ0b0JlVHJ1dGh5Iiwib25QcmVzc01vY2siLCJmbiIsIl9yZW5kZXIyIiwib25QcmVzcyIsInRvdWNoYWJsZSIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZCJdLCJzb3VyY2VzIjpbIkNvbnRhY3RJdGVtLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3JlbmRlciwgZmlyZUV2ZW50LCBzY3JlZW59IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCBDb250YWN0SXRlbSBmcm9tICcuLi9Db250YWN0SXRlbSc7XG5cbmRlc2NyaWJlKCdDb250YWN0SXRlbScsICgpID0+IHtcbiAgY29uc3QgY29udGFjdCA9IHtcbiAgICBmaXJzdE5hbWU6ICdKb2huJyxcbiAgICBsYXN0TmFtZTogJ0RvZScsXG4gICAgcGhvdG86ICdodHRwczovL2V4YW1wbGUuY29tL2F2YXRhci5wbmcnLFxuICAgIGFnZTogMixcbiAgICBpZDogJzExMScsXG4gIH07XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgdGVzdCgncmVuZGVycyBjb3JyZWN0bHkgd2l0aCBjb250YWN0IGRhdGEnLCAoKSA9PiB7XG4gICAgY29uc3Qge2dldEJ5VGV4dCwgZ2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxDb250YWN0SXRlbSBjb250YWN0PXtjb250YWN0fSAvPik7XG5cbiAgICBjb25zdCBhdmF0YXIgPSBnZXRCeVRlc3RJZCgnYXZhdGFyLWltYWdlJyk7XG4gICAgY29uc3QgbmFtZSA9IGdldEJ5VGV4dCgnSm9obiBEb2UnKTtcblxuICAgIGV4cGVjdChhdmF0YXIucHJvcHMuZmlyc3ROYW1lKS50b0JlKCdKb2huJyk7XG4gICAgZXhwZWN0KGF2YXRhci5wcm9wcy5sYXN0TmFtZSkudG9CZSgnRG9lJyk7XG4gICAgZXhwZWN0KGF2YXRhci5wcm9wcy5waG90bykudG9CZSgnaHR0cHM6Ly9leGFtcGxlLmNvbS9hdmF0YXIucG5nJyk7XG4gICAgZXhwZWN0KG5hbWUpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgdGVzdCgnY2FsbHMgb25QcmVzcyB3aGVuIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgY29uc3Qgb25QcmVzc01vY2sgPSBqZXN0LmZuKCk7XG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcihcbiAgICAgIDxDb250YWN0SXRlbSBjb250YWN0PXtjb250YWN0fSBvblByZXNzPXtvblByZXNzTW9ja30gLz4sXG4gICAgKTtcblxuICAgIGNvbnN0IHRvdWNoYWJsZSA9IGdldEJ5VGVzdElkKCdjb250YWN0LWl0ZW0tdG91Y2hhYmxlJyk7XG4gICAgZmlyZUV2ZW50LnByZXNzKHRvdWNoYWJsZSk7XG5cbiAgICBleHBlY3Qob25QcmVzc01vY2spLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUF5QyxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFFekNJLFFBQVEsQ0FBQyxhQUFhLEVBQUUsWUFBTTtFQUM1QixJQUFNQyxPQUFPLEdBQUc7SUFDZEMsU0FBUyxFQUFFLE1BQU07SUFDakJDLFFBQVEsRUFBRSxLQUFLO0lBQ2ZDLEtBQUssRUFBRSxnQ0FBZ0M7SUFDdkNDLEdBQUcsRUFBRSxDQUFDO0lBQ05DLEVBQUUsRUFBRTtFQUNOLENBQUM7RUFFREMsU0FBUyxDQUFDLFlBQU07SUFDZEMsSUFBSSxDQUFDQyxhQUFhLENBQUMsQ0FBQztFQUN0QixDQUFDLENBQUM7RUFFRkMsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLFlBQU07SUFDaEQsSUFBQUMsT0FBQSxHQUFpQyxJQUFBQyxtQkFBTSxFQUFDLElBQUFiLFdBQUEsQ0FBQWMsR0FBQSxFQUFDZixZQUFBLENBQUFnQixPQUFXO1FBQUNiLE9BQU8sRUFBRUE7TUFBUSxDQUFFLENBQUMsQ0FBQztNQUFuRWMsU0FBUyxHQUFBSixPQUFBLENBQVRJLFNBQVM7TUFBRUMsV0FBVyxHQUFBTCxPQUFBLENBQVhLLFdBQVc7SUFFN0IsSUFBTUMsTUFBTSxHQUFHRCxXQUFXLENBQUMsY0FBYyxDQUFDO0lBQzFDLElBQU1FLElBQUksR0FBR0gsU0FBUyxDQUFDLFVBQVUsQ0FBQztJQUVsQ0ksTUFBTSxDQUFDRixNQUFNLENBQUNHLEtBQUssQ0FBQ2xCLFNBQVMsQ0FBQyxDQUFDbUIsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUMzQ0YsTUFBTSxDQUFDRixNQUFNLENBQUNHLEtBQUssQ0FBQ2pCLFFBQVEsQ0FBQyxDQUFDa0IsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN6Q0YsTUFBTSxDQUFDRixNQUFNLENBQUNHLEtBQUssQ0FBQ2hCLEtBQUssQ0FBQyxDQUFDaUIsSUFBSSxDQUFDLGdDQUFnQyxDQUFDO0lBQ2pFRixNQUFNLENBQUNELElBQUksQ0FBQyxDQUFDSSxVQUFVLENBQUMsQ0FBQztFQUMzQixDQUFDLENBQUM7RUFFRlosSUFBSSxDQUFDLDRCQUE0QixFQUFFLFlBQU07SUFDdkMsSUFBTWEsV0FBVyxHQUFHZixJQUFJLENBQUNnQixFQUFFLENBQUMsQ0FBQztJQUM3QixJQUFBQyxRQUFBLEdBQXNCLElBQUFiLG1CQUFNLEVBQzFCLElBQUFiLFdBQUEsQ0FBQWMsR0FBQSxFQUFDZixZQUFBLENBQUFnQixPQUFXO1FBQUNiLE9BQU8sRUFBRUEsT0FBUTtRQUFDeUIsT0FBTyxFQUFFSDtNQUFZLENBQUUsQ0FDeEQsQ0FBQztNQUZNUCxXQUFXLEdBQUFTLFFBQUEsQ0FBWFQsV0FBVztJQUlsQixJQUFNVyxTQUFTLEdBQUdYLFdBQVcsQ0FBQyx3QkFBd0IsQ0FBQztJQUN2RFksc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDRixTQUFTLENBQUM7SUFFMUJSLE1BQU0sQ0FBQ0ksV0FBVyxDQUFDLENBQUNPLGdCQUFnQixDQUFDLENBQUM7RUFDeEMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=