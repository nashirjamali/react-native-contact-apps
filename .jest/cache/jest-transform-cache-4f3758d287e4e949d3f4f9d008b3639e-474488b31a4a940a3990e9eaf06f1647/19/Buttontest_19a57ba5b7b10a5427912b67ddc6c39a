5f5c36c3fb56ff9cfd31c2a166585f24
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Button = _interopRequireDefault(require("../Button"));
var _jsxRuntime = require("react/jsx-runtime");
describe('Button', function () {
  test('renders correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        "aria-label": "button"
      })),
      getByLabelText = _render.getByLabelText;
    var button = getByLabelText('button');
    expect(button).toBeTruthy();
  });
  test('executes onPress callback when pressed', function () {
    var onPressMock = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        "aria-label": "button",
        onPress: onPressMock
      })),
      getByLabelText = _render2.getByLabelText;
    var button = getByLabelText('button');
    _reactNative.fireEvent.press(button);
    expect(onPressMock).toHaveBeenCalledTimes(1);
  });
  test('applies disabled style when disabled prop is true', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        "aria-label": "button",
        disabled: true
      })),
      getByLabelText = _render3.getByLabelText;
    var button = getByLabelText('button');
    console.log(button.props.style);
    expect(button.props.style.backgroundColor).toEqual('#3f3f46');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9CdXR0b24iLCJfanN4UnVudGltZSIsImRlc2NyaWJlIiwidGVzdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJkZWZhdWx0IiwiZ2V0QnlMYWJlbFRleHQiLCJidXR0b24iLCJleHBlY3QiLCJ0b0JlVHJ1dGh5Iiwib25QcmVzc01vY2siLCJqZXN0IiwiZm4iLCJfcmVuZGVyMiIsIm9uUHJlc3MiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsIl9yZW5kZXIzIiwiZGlzYWJsZWQiLCJjb25zb2xlIiwibG9nIiwicHJvcHMiLCJzdHlsZSIsImJhY2tncm91bmRDb2xvciIsInRvRXF1YWwiXSwic291cmNlcyI6WyJCdXR0b24udGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7cmVuZGVyLCBmaXJlRXZlbnQsIHNjcmVlbn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi9CdXR0b24nO1xuXG5pbXBvcnQgcmVuZGVyZXIgZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcic7XG5cbmRlc2NyaWJlKCdCdXR0b24nLCAoKSA9PiB7XG4gIHRlc3QoJ3JlbmRlcnMgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeUxhYmVsVGV4dH0gPSByZW5kZXIoPEJ1dHRvbiBhcmlhLWxhYmVsPVwiYnV0dG9uXCIgLz4pO1xuICAgIGNvbnN0IGJ1dHRvbiA9IGdldEJ5TGFiZWxUZXh0KCdidXR0b24nKTtcbiAgICBleHBlY3QoYnV0dG9uKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIHRlc3QoJ2V4ZWN1dGVzIG9uUHJlc3MgY2FsbGJhY2sgd2hlbiBwcmVzc2VkJywgKCkgPT4ge1xuICAgIGNvbnN0IG9uUHJlc3NNb2NrID0gamVzdC5mbigpO1xuICAgIGNvbnN0IHtnZXRCeUxhYmVsVGV4dH0gPSByZW5kZXIoXG4gICAgICA8QnV0dG9uIGFyaWEtbGFiZWw9XCJidXR0b25cIiBvblByZXNzPXtvblByZXNzTW9ja30gLz4sXG4gICAgKTtcbiAgICBjb25zdCBidXR0b24gPSBnZXRCeUxhYmVsVGV4dCgnYnV0dG9uJyk7XG4gICAgZmlyZUV2ZW50LnByZXNzKGJ1dHRvbik7XG4gICAgZXhwZWN0KG9uUHJlc3NNb2NrKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2FwcGxpZXMgZGlzYWJsZWQgc3R5bGUgd2hlbiBkaXNhYmxlZCBwcm9wIGlzIHRydWUnLCAoKSA9PiB7XG4gICAgY29uc3Qge2dldEJ5TGFiZWxUZXh0fSA9IHJlbmRlcig8QnV0dG9uIGFyaWEtbGFiZWw9XCJidXR0b25cIiBkaXNhYmxlZCAvPik7XG4gICAgY29uc3QgYnV0dG9uID0gZ2V0QnlMYWJlbFRleHQoJ2J1dHRvbicpO1xuICAgIGNvbnNvbGUubG9nKGJ1dHRvbi5wcm9wcy5zdHlsZSk7XG5cbiAgICBleHBlY3QoYnV0dG9uLnByb3BzLnN0eWxlLmJhY2tncm91bmRDb2xvcikudG9FcXVhbCgnIzNmM2Y0NicpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQStCLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUkvQkksUUFBUSxDQUFDLFFBQVEsRUFBRSxZQUFNO0VBQ3ZCQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsWUFBTTtJQUM5QixJQUFBQyxPQUFBLEdBQXlCLElBQUFDLG1CQUFNLEVBQUMsSUFBQUosV0FBQSxDQUFBSyxHQUFBLEVBQUNOLE9BQUEsQ0FBQU8sT0FBTTtRQUFDLGNBQVc7TUFBUSxDQUFFLENBQUMsQ0FBQztNQUF4REMsY0FBYyxHQUFBSixPQUFBLENBQWRJLGNBQWM7SUFDckIsSUFBTUMsTUFBTSxHQUFHRCxjQUFjLENBQUMsUUFBUSxDQUFDO0lBQ3ZDRSxNQUFNLENBQUNELE1BQU0sQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztFQUM3QixDQUFDLENBQUM7RUFFRlIsSUFBSSxDQUFDLHdDQUF3QyxFQUFFLFlBQU07SUFDbkQsSUFBTVMsV0FBVyxHQUFHQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLElBQUFDLFFBQUEsR0FBeUIsSUFBQVYsbUJBQU0sRUFDN0IsSUFBQUosV0FBQSxDQUFBSyxHQUFBLEVBQUNOLE9BQUEsQ0FBQU8sT0FBTTtRQUFDLGNBQVcsUUFBUTtRQUFDUyxPQUFPLEVBQUVKO01BQVksQ0FBRSxDQUNyRCxDQUFDO01BRk1KLGNBQWMsR0FBQU8sUUFBQSxDQUFkUCxjQUFjO0lBR3JCLElBQU1DLE1BQU0sR0FBR0QsY0FBYyxDQUFDLFFBQVEsQ0FBQztJQUN2Q1Msc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDVCxNQUFNLENBQUM7SUFDdkJDLE1BQU0sQ0FBQ0UsV0FBVyxDQUFDLENBQUNPLHFCQUFxQixDQUFDLENBQUMsQ0FBQztFQUM5QyxDQUFDLENBQUM7RUFFRmhCLElBQUksQ0FBQyxtREFBbUQsRUFBRSxZQUFNO0lBQzlELElBQUFpQixRQUFBLEdBQXlCLElBQUFmLG1CQUFNLEVBQUMsSUFBQUosV0FBQSxDQUFBSyxHQUFBLEVBQUNOLE9BQUEsQ0FBQU8sT0FBTTtRQUFDLGNBQVcsUUFBUTtRQUFDYyxRQUFRO01BQUEsQ0FBRSxDQUFDLENBQUM7TUFBakViLGNBQWMsR0FBQVksUUFBQSxDQUFkWixjQUFjO0lBQ3JCLElBQU1DLE1BQU0sR0FBR0QsY0FBYyxDQUFDLFFBQVEsQ0FBQztJQUN2Q2MsT0FBTyxDQUFDQyxHQUFHLENBQUNkLE1BQU0sQ0FBQ2UsS0FBSyxDQUFDQyxLQUFLLENBQUM7SUFFL0JmLE1BQU0sQ0FBQ0QsTUFBTSxDQUFDZSxLQUFLLENBQUNDLEtBQUssQ0FBQ0MsZUFBZSxDQUFDLENBQUNDLE9BQU8sQ0FBQyxTQUFTLENBQUM7RUFDL0QsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=