67d50eb50dece1cb41fbe1110443c5b8
_getJestObj().mock('../../apis/contact', function () {
  return {
    getContacts: jest.fn()
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useIsFocused: jest.fn()
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _List = _interopRequireDefault(require("../List"));
var _contact = require("../../apis/contact");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var createTestProps = function createTestProps(props) {
  return Object.assign({
    navigation: Object.assign({
      navigate: jest.fn()
    }, props)
  }, props);
};
describe('List', function () {
  test('renders correctly and fetches contacts', (0, _asyncToGenerator2.default)(function* () {
    var mockContacts = [{
      id: '111',
      firstName: 'John',
      lastName: 'Doe',
      age: 20,
      photo: ''
    }, {
      id: '222',
      firstName: 'Jane',
      lastName: 'Smith',
      age: 20,
      photo: ''
    }];
    var mockedGetContacts = _contact.getContacts;
    mockedGetContacts.mockResolvedValueOnce({
      data: {
        data: mockContacts
      },
      status: 200
    });
    var props = createTestProps({});
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_List.default, Object.assign({
        route: {
          key: 'List',
          name: 'List'
        }
      }, props))),
      getByText = _render.getByText;
    _reactNative.screen.debug();
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('Contact')).toBeTruthy();
      expect(getByText('John Doe')).toBeTruthy();
      expect(getByText('Jane Smith')).toBeTruthy();
    });
    expect(_contact.getContacts).toHaveBeenCalledTimes(1);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJnZXRDb250YWN0cyIsImplc3QiLCJmbiIsIk9iamVjdCIsImFzc2lnbiIsInJlcXVpcmVBY3R1YWwiLCJ1c2VJc0ZvY3VzZWQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9MaXN0IiwiX2NvbnRhY3QiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwiY3JlYXRlVGVzdFByb3BzIiwicHJvcHMiLCJuYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJkZXNjcmliZSIsInRlc3QiLCJkZWZhdWx0IiwibW9ja0NvbnRhY3RzIiwiaWQiLCJmaXJzdE5hbWUiLCJsYXN0TmFtZSIsImFnZSIsInBob3RvIiwibW9ja2VkR2V0Q29udGFjdHMiLCJtb2NrUmVzb2x2ZWRWYWx1ZU9uY2UiLCJkYXRhIiwic3RhdHVzIiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsInJvdXRlIiwia2V5IiwibmFtZSIsImdldEJ5VGV4dCIsInNjcmVlbiIsImRlYnVnIiwid2FpdEZvciIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiXSwic291cmNlcyI6WyJMaXN0LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3JlbmRlciwgc2NyZWVuLCB3YWl0Rm9yfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgTGlzdCBmcm9tICcuLi9MaXN0JztcbmltcG9ydCB7Z2V0Q29udGFjdHN9IGZyb20gJy4uLy4uL2FwaXMvY29udGFjdCc7XG5pbXBvcnQge0F4aW9zUmVzcG9uc2V9IGZyb20gJ2F4aW9zJztcbmltcG9ydCB7U3RhY2tOYXZpZ2F0aW9uUHJvcH0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vc3RhY2snO1xuaW1wb3J0IHtSb290U3RhY2tQYXJhbUxpc3R9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCB7cmVuZGVyV2l0aFByb3ZpZGVyc30gZnJvbSAnLi4vLi4vdXRpbHMvdGVzdC11dGlscyc7XG5cbmplc3QubW9jaygnLi4vLi4vYXBpcy9jb250YWN0JywgKCkgPT4gKHtcbiAgZ2V0Q29udGFjdHM6IGplc3QuZm4oKSxcbn0pKTtcblxuamVzdC5tb2NrKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnLCAoKSA9PiAoe1xuICAuLi5qZXN0LnJlcXVpcmVBY3R1YWwoJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScpLFxuICB1c2VJc0ZvY3VzZWQ6IGplc3QuZm4oKSxcbn0pKTtcblxudHlwZSBOYXZpZ2F0aW9uUHJvcHMgPSBTdGFja05hdmlnYXRpb25Qcm9wPFJvb3RTdGFja1BhcmFtTGlzdCwgJ0xpc3QnPjtcblxuY29uc3QgY3JlYXRlVGVzdFByb3BzID0gKHByb3BzOiBQYXJ0aWFsPE5hdmlnYXRpb25Qcm9wcz4pID0+ICh7XG4gIG5hdmlnYXRpb246IHtcbiAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxuICAgIC4uLnByb3BzLFxuICB9IGFzIE5hdmlnYXRpb25Qcm9wcyxcbiAgLi4ucHJvcHMsXG59KTtcblxuZGVzY3JpYmUoJ0xpc3QnLCAoKSA9PiB7XG4gIHRlc3QoJ3JlbmRlcnMgY29ycmVjdGx5IGFuZCBmZXRjaGVzIGNvbnRhY3RzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tDb250YWN0cyA9IFtcbiAgICAgIHtpZDogJzExMScsIGZpcnN0TmFtZTogJ0pvaG4nLCBsYXN0TmFtZTogJ0RvZScsIGFnZTogMjAsIHBob3RvOiAnJ30sXG4gICAgICB7aWQ6ICcyMjInLCBmaXJzdE5hbWU6ICdKYW5lJywgbGFzdE5hbWU6ICdTbWl0aCcsIGFnZTogMjAsIHBob3RvOiAnJ30sXG4gICAgXTtcbiAgICBjb25zdCBtb2NrZWRHZXRDb250YWN0cyA9IGdldENvbnRhY3RzIGFzIGplc3QuTW9ja2VkRnVuY3Rpb248XG4gICAgICB0eXBlb2YgZ2V0Q29udGFjdHNcbiAgICA+O1xuICAgIG1vY2tlZEdldENvbnRhY3RzLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICBkYXRhOiB7ZGF0YTogbW9ja0NvbnRhY3RzfSxcbiAgICAgIHN0YXR1czogMjAwLFxuICAgIH0gYXMgQXhpb3NSZXNwb25zZSk7XG5cbiAgICBjb25zdCBwcm9wcyA9IGNyZWF0ZVRlc3RQcm9wcyh7fSk7XG4gICAgY29uc3Qge2dldEJ5VGV4dH0gPSByZW5kZXIoXG4gICAgICA8TGlzdCByb3V0ZT17e2tleTogJ0xpc3QnLCBuYW1lOiAnTGlzdCd9fSB7Li4ucHJvcHN9IC8+LFxuICAgICk7XG5cbiAgICBzY3JlZW4uZGVidWcoKTtcblxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnQ29udGFjdCcpKS50b0JlVHJ1dGh5KCk7XG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCdKb2huIERvZScpKS50b0JlVHJ1dGh5KCk7XG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCdKYW5lIFNtaXRoJykpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcblxuICAgIC8vIFZlcmlmeSB0aGF0IGdldENvbnRhY3RzIGlzIGNhbGxlZFxuICAgIGV4cGVjdChnZXRDb250YWN0cykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICB9KTtcblxuICAvLyAgIHRlc3QoJ2Rpc3BsYXlzIGVycm9yIG1lc3NhZ2Ugd2hlbiBmZXRjaGluZyBjb250YWN0cyBmYWlscycsIGFzeW5jICgpID0+IHtcbiAgLy8gICAgIGdldENvbnRhY3RzLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gIC8vICAgICAgIGRhdGE6IG51bGwsXG4gIC8vICAgICAgIHN0YXR1czogNTAwLFxuICAvLyAgICAgfSk7XG5cbiAgLy8gICAgIGNvbnN0IHtnZXRCeVRleHR9ID0gcmVuZGVyKDxMaXN0IC8+KTtcblxuICAvLyAgICAgLy8gTG9hZGluZyBzdGF0ZSBpcyBkaXNwbGF5ZWQgaW5pdGlhbGx5XG4gIC8vICAgICBleHBlY3QoZ2V0QnlUZXh0KCdMb2FkaW5nLi4uJykpLnRvQmVUcnV0aHkoKTtcblxuICAvLyAgICAgLy8gV2FpdCBmb3IgZXJyb3IgbWVzc2FnZSB0byBiZSBkaXNwbGF5ZWRcbiAgLy8gICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAvLyAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCdFcnJvcicpKS50b0JlVHJ1dGh5KCk7XG4gIC8vICAgICAgIGV4cGVjdChnZXRCeVRleHQoJ3NvbWV0aGluZyB3ZW50IHdyb25nJykpLnRvQmVUcnV0aHkoKTtcbiAgLy8gICAgIH0pO1xuXG4gIC8vICAgICAvLyBWZXJpZnkgdGhhdCBnZXRDb250YWN0cyBpcyBjYWxsZWRcbiAgLy8gICAgIGV4cGVjdChnZXRDb250YWN0cykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAvLyAgIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQVNBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtFQUFBLE9BQU87SUFDckNDLFdBQVcsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDdkIsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUVISixXQUFBLEdBQUtDLElBQUksQ0FBQywwQkFBMEIsRUFBRTtFQUFBLE9BQUFJLE1BQUEsQ0FBQUMsTUFBQSxLQUNqQ0gsSUFBSSxDQUFDSSxhQUFhLENBQUMsMEJBQTBCLENBQUM7SUFDakRDLFlBQVksRUFBRUwsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFBQztBQUFBLENBQ3ZCLENBQUM7QUFBQyxJQUFBSyxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsa0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQWhCSixJQUFBRSxNQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxZQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxLQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSyxRQUFBLEdBQUFMLE9BQUE7QUFBK0MsSUFBQU0sV0FBQSxHQUFBTixPQUFBO0FBQUEsU0FBQVYsWUFBQTtFQUFBLElBQUFpQixRQUFBLEdBQUFQLE9BQUE7SUFBQVAsSUFBQSxHQUFBYyxRQUFBLENBQUFkLElBQUE7RUFBQUgsV0FBQSxZQUFBQSxZQUFBO0lBQUEsT0FBQUcsSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBaUIvQyxJQUFNZSxlQUFlLEdBQUcsU0FBbEJBLGVBQWVBLENBQUlDLEtBQStCO0VBQUEsT0FBQWQsTUFBQSxDQUFBQyxNQUFBO0lBQ3REYyxVQUFVLEVBQUFmLE1BQUEsQ0FBQUMsTUFBQTtNQUNSZSxRQUFRLEVBQUVsQixJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUFDLEdBQ2hCZSxLQUFLO0VBQ1UsR0FDakJBLEtBQUs7QUFBQSxDQUNSO0FBRUZHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsWUFBTTtFQUNyQkMsSUFBSSxDQUFDLHdDQUF3QyxNQUFBWixrQkFBQSxDQUFBYSxPQUFBLEVBQUUsYUFBWTtJQUN6RCxJQUFNQyxZQUFZLEdBQUcsQ0FDbkI7TUFBQ0MsRUFBRSxFQUFFLEtBQUs7TUFBRUMsU0FBUyxFQUFFLE1BQU07TUFBRUMsUUFBUSxFQUFFLEtBQUs7TUFBRUMsR0FBRyxFQUFFLEVBQUU7TUFBRUMsS0FBSyxFQUFFO0lBQUUsQ0FBQyxFQUNuRTtNQUFDSixFQUFFLEVBQUUsS0FBSztNQUFFQyxTQUFTLEVBQUUsTUFBTTtNQUFFQyxRQUFRLEVBQUUsT0FBTztNQUFFQyxHQUFHLEVBQUUsRUFBRTtNQUFFQyxLQUFLLEVBQUU7SUFBRSxDQUFDLENBQ3RFO0lBQ0QsSUFBTUMsaUJBQWlCLEdBQUc3QixvQkFFekI7SUFDRDZCLGlCQUFpQixDQUFDQyxxQkFBcUIsQ0FBQztNQUN0Q0MsSUFBSSxFQUFFO1FBQUNBLElBQUksRUFBRVI7TUFBWSxDQUFDO01BQzFCUyxNQUFNLEVBQUU7SUFDVixDQUFrQixDQUFDO0lBRW5CLElBQU1mLEtBQUssR0FBR0QsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pDLElBQUFpQixPQUFBLEdBQW9CLElBQUFDLG1CQUFNLEVBQ3hCLElBQUFwQixXQUFBLENBQUFxQixHQUFBLEVBQUN2QixLQUFBLENBQUFVLE9BQUksRUFBQW5CLE1BQUEsQ0FBQUMsTUFBQTtRQUFDZ0MsS0FBSyxFQUFFO1VBQUNDLEdBQUcsRUFBRSxNQUFNO1VBQUVDLElBQUksRUFBRTtRQUFNO01BQUUsR0FBS3JCLEtBQUssQ0FBRyxDQUN4RCxDQUFDO01BRk1zQixTQUFTLEdBQUFOLE9BQUEsQ0FBVE0sU0FBUztJQUloQkMsbUJBQU0sQ0FBQ0MsS0FBSyxDQUFDLENBQUM7SUFFZCxNQUFNLElBQUFDLG9CQUFPLEVBQUMsWUFBTTtNQUNsQkMsTUFBTSxDQUFDSixTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQ0ssVUFBVSxDQUFDLENBQUM7TUFDekNELE1BQU0sQ0FBQ0osU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUNLLFVBQVUsQ0FBQyxDQUFDO01BQzFDRCxNQUFNLENBQUNKLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDSyxVQUFVLENBQUMsQ0FBQztJQUM5QyxDQUFDLENBQUM7SUFHRkQsTUFBTSxDQUFDM0Msb0JBQVcsQ0FBQyxDQUFDNkMscUJBQXFCLENBQUMsQ0FBQyxDQUFDO0VBQzlDLENBQUMsRUFBQztBQXNCSixDQUFDLENBQUMifQ==