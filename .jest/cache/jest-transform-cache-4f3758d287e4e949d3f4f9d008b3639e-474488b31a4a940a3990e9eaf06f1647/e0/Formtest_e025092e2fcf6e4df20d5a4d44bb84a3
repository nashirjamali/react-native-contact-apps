c922d97ef62be86f60e88b10ac1d48d3
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useIsFocused: jest.fn()
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Form = _interopRequireDefault(require("../Form"));
var _testUtils = require("../../utils/test-utils");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var createTestProps = function createTestProps(props) {
  return Object.assign({
    navigation: Object.assign({
      navigate: jest.fn()
    }, props)
  }, props);
};
describe('Form', function () {
  test('renders correctly and enables next button when form is complete', function () {
    var props = createTestProps({});
    var _renderWithProviders = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_Form.default, Object.assign({
        route: {
          key: 'Form',
          name: 'Form',
          params: {
            isEdit: false
          }
        }
      }, props))),
      getByPlaceholderText = _renderWithProviders.getByPlaceholderText,
      getByLabelText = _renderWithProviders.getByLabelText;
    var firstNameInput = getByPlaceholderText('First Name');
    var lastNameInput = getByPlaceholderText('Last Name');
    var ageInput = getByPlaceholderText('Age');
    var nextButton = getByLabelText('button-next');
    _reactNative.fireEvent.changeText(firstNameInput, 'John');
    _reactNative.fireEvent.changeText(lastNameInput, 'Doe');
    _reactNative.fireEvent.changeText(ageInput, '30');
    expect(firstNameInput.props.value).toBe('John');
    expect(lastNameInput.props.value).toBe('Doe');
    expect(ageInput.props.value).toBe('30');
    expect(nextButton.props.accessibilityState.disabled).toBe(false);
  });
  test('navigates to ChooseAvatar screen when Next button is clicked', (0, _asyncToGenerator2.default)(function* () {
    var props = createTestProps({});
    var _renderWithProviders2 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_Form.default, Object.assign({
        route: {
          key: 'Form',
          name: 'Form',
          params: {
            isEdit: false
          }
        }
      }, props))),
      getByPlaceholderText = _renderWithProviders2.getByPlaceholderText,
      getByLabelText = _renderWithProviders2.getByLabelText;
    yield (0, _reactNative.waitFor)(function () {
      var firstNameInput = getByPlaceholderText('First Name');
      var lastNameInput = getByPlaceholderText('Last Name');
      var ageInput = getByPlaceholderText('Age');
      var nextButton = getByLabelText('button-next');
      _reactNative.fireEvent.changeText(firstNameInput, 'John');
      _reactNative.fireEvent.changeText(lastNameInput, 'Doe');
      _reactNative.fireEvent.changeText(ageInput, '30');
      _reactNative.fireEvent.press(nextButton);
      expect(props.navigation.navigate).toHaveBeenCalledWith('ChooseAvatar', {
        isEdit: false
      });
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,