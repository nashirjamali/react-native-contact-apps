b069f8bbca96e700502bd02b38b2979a
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useIsFocused: jest.fn()
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _configureStore = _interopRequireDefault(require("../redux/configureStore"));
var _Form = _interopRequireDefault(require("../Form"));
var _testUtils = require("../../utils/test-utils");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var store = (0, _configureStore.default)();
var createTestProps = function createTestProps(props) {
  return Object.assign({
    navigation: Object.assign({
      navigate: jest.fn()
    }, props)
  }, props);
};
describe('Form', function () {
  test('renders correctly and enables next button when form is complete', function () {
    var props = createTestProps({});
    var _renderWithProviders = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_Form.default, Object.assign({
        route: {
          key: 'Form',
          name: 'Form',
          params: {
            isEdit: false
          }
        }
      }, props))),
      getByPlaceholderText = _renderWithProviders.getByPlaceholderText,
      getByText = _renderWithProviders.getByText;
    var firstNameInput = getByPlaceholderText('First Name');
    var lastNameInput = getByPlaceholderText('Last Name');
    var ageInput = getByPlaceholderText('Age');
    var nextButton = getByText('Next');
    _reactNative.fireEvent.changeText(firstNameInput, 'John');
    _reactNative.fireEvent.changeText(lastNameInput, 'Doe');
    _reactNative.fireEvent.changeText(ageInput, '30');
    expect(firstNameInput.props.value).toBe('John');
    expect(lastNameInput.props.value).toBe('Doe');
    expect(ageInput.props.value).toBe('30');
    expect(nextButton.props.disabled).toBe(false);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsInVzZUlzRm9jdXNlZCIsImZuIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfY29uZmlndXJlU3RvcmUiLCJfRm9ybSIsIl90ZXN0VXRpbHMiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwic3RvcmUiLCJjb25maWd1cmVTdG9yZSIsImNyZWF0ZVRlc3RQcm9wcyIsInByb3BzIiwibmF2aWdhdGlvbiIsIm5hdmlnYXRlIiwiZGVzY3JpYmUiLCJ0ZXN0IiwiX3JlbmRlcldpdGhQcm92aWRlcnMiLCJyZW5kZXJXaXRoUHJvdmlkZXJzIiwianN4IiwiZGVmYXVsdCIsInJvdXRlIiwia2V5IiwibmFtZSIsInBhcmFtcyIsImlzRWRpdCIsImdldEJ5UGxhY2Vob2xkZXJUZXh0IiwiZ2V0QnlUZXh0IiwiZmlyc3ROYW1lSW5wdXQiLCJsYXN0TmFtZUlucHV0IiwiYWdlSW5wdXQiLCJuZXh0QnV0dG9uIiwiZmlyZUV2ZW50IiwiY2hhbmdlVGV4dCIsImV4cGVjdCIsInZhbHVlIiwidG9CZSIsImRpc2FibGVkIl0sInNvdXJjZXMiOlsiRm9ybS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtyZW5kZXIsIGZpcmVFdmVudH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHtQcm92aWRlcn0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IGNvbmZpZ3VyZVN0b3JlIGZyb20gJy4uL3JlZHV4L2NvbmZpZ3VyZVN0b3JlJztcbmltcG9ydCBGb3JtIGZyb20gJy4uL0Zvcm0nO1xuaW1wb3J0IHtyZW5kZXJXaXRoUHJvdmlkZXJzfSBmcm9tICcuLi8uLi91dGlscy90ZXN0LXV0aWxzJztcbmltcG9ydCB7U3RhY2tOYXZpZ2F0aW9uUHJvcH0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vc3RhY2snO1xuaW1wb3J0IHtSb290U3RhY2tQYXJhbUxpc3R9IGZyb20gJy4uLy4uL3R5cGVzJztcblxuY29uc3Qgc3RvcmUgPSBjb25maWd1cmVTdG9yZSgpO1xuXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+ICh7XG4gIC4uLmplc3QucmVxdWlyZUFjdHVhbCgnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJyksXG4gIHVzZUlzRm9jdXNlZDogamVzdC5mbigpLFxufSkpO1xuXG50eXBlIE5hdmlnYXRpb25Qcm9wcyA9IFN0YWNrTmF2aWdhdGlvblByb3A8Um9vdFN0YWNrUGFyYW1MaXN0LCAnRm9ybSc+O1xuXG5jb25zdCBjcmVhdGVUZXN0UHJvcHMgPSAocHJvcHM6IFBhcnRpYWw8TmF2aWdhdGlvblByb3BzPikgPT4gKHtcbiAgbmF2aWdhdGlvbjoge1xuICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXG4gICAgLi4ucHJvcHMsXG4gIH0gYXMgTmF2aWdhdGlvblByb3BzLFxuICAuLi5wcm9wcyxcbn0pO1xuXG5kZXNjcmliZSgnRm9ybScsICgpID0+IHtcbiAgdGVzdCgncmVuZGVycyBjb3JyZWN0bHkgYW5kIGVuYWJsZXMgbmV4dCBidXR0b24gd2hlbiBmb3JtIGlzIGNvbXBsZXRlJywgKCkgPT4ge1xuICAgIGNvbnN0IHByb3BzID0gY3JlYXRlVGVzdFByb3BzKHt9KTtcbiAgICBjb25zdCB7Z2V0QnlQbGFjZWhvbGRlclRleHQsIGdldEJ5VGV4dH0gPSByZW5kZXJXaXRoUHJvdmlkZXJzKFxuICAgICAgPEZvcm1cbiAgICAgICAgcm91dGU9e3trZXk6ICdGb3JtJywgbmFtZTogJ0Zvcm0nLCBwYXJhbXM6IHtpc0VkaXQ6IGZhbHNlfX19XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgIC8+LFxuICAgICk7XG5cbiAgICBjb25zdCBmaXJzdE5hbWVJbnB1dCA9IGdldEJ5UGxhY2Vob2xkZXJUZXh0KCdGaXJzdCBOYW1lJyk7XG4gICAgY29uc3QgbGFzdE5hbWVJbnB1dCA9IGdldEJ5UGxhY2Vob2xkZXJUZXh0KCdMYXN0IE5hbWUnKTtcbiAgICBjb25zdCBhZ2VJbnB1dCA9IGdldEJ5UGxhY2Vob2xkZXJUZXh0KCdBZ2UnKTtcbiAgICBjb25zdCBuZXh0QnV0dG9uID0gZ2V0QnlUZXh0KCdOZXh0Jyk7XG5cbiAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChmaXJzdE5hbWVJbnB1dCwgJ0pvaG4nKTtcbiAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChsYXN0TmFtZUlucHV0LCAnRG9lJyk7XG4gICAgZmlyZUV2ZW50LmNoYW5nZVRleHQoYWdlSW5wdXQsICczMCcpO1xuXG4gICAgZXhwZWN0KGZpcnN0TmFtZUlucHV0LnByb3BzLnZhbHVlKS50b0JlKCdKb2huJyk7XG4gICAgZXhwZWN0KGxhc3ROYW1lSW5wdXQucHJvcHMudmFsdWUpLnRvQmUoJ0RvZScpO1xuICAgIGV4cGVjdChhZ2VJbnB1dC5wcm9wcy52YWx1ZSkudG9CZSgnMzAnKTtcbiAgICBleHBlY3QobmV4dEJ1dHRvbi5wcm9wcy5kaXNhYmxlZCkudG9CZShmYWxzZSk7XG4gIH0pO1xuXG4gIC8vICAgdGVzdCgnbmF2aWdhdGVzIHRvIENob29zZUF2YXRhciBzY3JlZW4gd2hlbiBOZXh0IGJ1dHRvbiBpcyBjbGlja2VkJywgKCkgPT4ge1xuICAvLyAgICAgY29uc3QgbmF2aWdhdGlvbk1vY2sgPSB7XG4gIC8vICAgICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXG4gIC8vICAgICB9O1xuXG4gIC8vICAgICBjb25zdCB7Z2V0QnlQbGFjZWhvbGRlclRleHQsIGdldEJ5VGV4dCwgZ2V0QnlUZXN0SWR9ID0gcmVuZGVyKFxuICAvLyAgICAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbiAgLy8gICAgICAgICA8Rm9ybSByb3V0ZT17e3BhcmFtczoge2lzRWRpdDogZmFsc2V9fX0gbmF2aWdhdGlvbj17bmF2aWdhdGlvbk1vY2t9IC8+XG4gIC8vICAgICAgIDwvUHJvdmlkZXI+LFxuICAvLyAgICAgKTtcblxuICAvLyAgICAgY29uc3QgZmlyc3ROYW1lSW5wdXQgPSBnZXRCeVBsYWNlaG9sZGVyVGV4dCgnRmlyc3QgTmFtZScpO1xuICAvLyAgICAgY29uc3QgbGFzdE5hbWVJbnB1dCA9IGdldEJ5UGxhY2Vob2xkZXJUZXh0KCdMYXN0IE5hbWUnKTtcbiAgLy8gICAgIGNvbnN0IGFnZUlucHV0ID0gZ2V0QnlQbGFjZWhvbGRlclRleHQoJ0FnZScpO1xuICAvLyAgICAgY29uc3QgbmV4dEJ1dHRvbiA9IGdldEJ5VGV4dCgnTmV4dCcpO1xuXG4gIC8vICAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChmaXJzdE5hbWVJbnB1dCwgJ0pvaG4nKTtcbiAgLy8gICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGxhc3ROYW1lSW5wdXQsICdEb2UnKTtcbiAgLy8gICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGFnZUlucHV0LCAnMzAnKTtcbiAgLy8gICAgIGZpcmVFdmVudC5wcmVzcyhuZXh0QnV0dG9uKTtcblxuICAvLyAgICAgZXhwZWN0KG5hdmlnYXRpb25Nb2NrLm5hdmlnYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnQ2hvb3NlQXZhdGFyJywge1xuICAvLyAgICAgICBpc0VkaXQ6IGZhbHNlLFxuICAvLyAgICAgfSk7XG4gIC8vICAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBV0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDBCQUEwQixFQUFFO0VBQUEsT0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ2pDQyxJQUFJLENBQUNDLGFBQWEsQ0FBQywwQkFBMEIsQ0FBQztJQUNqREMsWUFBWSxFQUFFRixJQUFJLENBQUNHLEVBQUUsQ0FBQztFQUFDO0FBQUEsQ0FDdkIsQ0FBQztBQUFDLElBQUFDLHNCQUFBLEdBQUFDLE9BQUE7QUFkSixJQUFBQyxNQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxZQUFBLEdBQUFG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