1b5a2b4b655fb4921101282347e4de2e
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useIsFocused: jest.fn()
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Form = _interopRequireDefault(require("../Form"));
var _testUtils = require("../../utils/test-utils");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var createTestProps = function createTestProps(props) {
  return Object.assign({
    navigation: Object.assign({
      navigate: jest.fn()
    }, props)
  }, props);
};
describe('Form', function () {
  test('renders correctly and enables next button when form is complete', (0, _asyncToGenerator2.default)(function* () {
    var props = createTestProps({});
    var _renderWithProviders = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_Form.default, Object.assign({
        route: {
          key: 'Form',
          name: 'Form',
          params: {
            isEdit: false
          }
        }
      }, props))),
      getByPlaceholderText = _renderWithProviders.getByPlaceholderText,
      getByText = _renderWithProviders.getByText,
      getByLabelText = _renderWithProviders.getByLabelText;
    var firstNameInput = getByPlaceholderText('First Name');
    var lastNameInput = getByPlaceholderText('Last Name');
    var ageInput = getByPlaceholderText('Age');
    var nextButton = getByLabelText('button-next');
    _reactNative.fireEvent.changeText(firstNameInput, 'John');
    _reactNative.fireEvent.changeText(lastNameInput, 'Doe');
    _reactNative.fireEvent.changeText(ageInput, '30');
    console.log(nextButton.props);
    expect(firstNameInput.props.value).toBe('John');
    expect(lastNameInput.props.value).toBe('Doe');
    expect(ageInput.props.value).toBe('30');
    expect(nextButton.props.accessibilityState.disabled).toBe(false);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsInVzZUlzRm9jdXNlZCIsImZuIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfRm9ybSIsIl90ZXN0VXRpbHMiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwiY3JlYXRlVGVzdFByb3BzIiwicHJvcHMiLCJuYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJkZXNjcmliZSIsInRlc3QiLCJkZWZhdWx0IiwiX3JlbmRlcldpdGhQcm92aWRlcnMiLCJyZW5kZXJXaXRoUHJvdmlkZXJzIiwianN4Iiwicm91dGUiLCJrZXkiLCJuYW1lIiwicGFyYW1zIiwiaXNFZGl0IiwiZ2V0QnlQbGFjZWhvbGRlclRleHQiLCJnZXRCeVRleHQiLCJnZXRCeUxhYmVsVGV4dCIsImZpcnN0TmFtZUlucHV0IiwibGFzdE5hbWVJbnB1dCIsImFnZUlucHV0IiwibmV4dEJ1dHRvbiIsImZpcmVFdmVudCIsImNoYW5nZVRleHQiLCJjb25zb2xlIiwibG9nIiwiZXhwZWN0IiwidmFsdWUiLCJ0b0JlIiwiYWNjZXNzaWJpbGl0eVN0YXRlIiwiZGlzYWJsZWQiXSwic291cmNlcyI6WyJGb3JtLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICByZW5kZXIsXG4gIGZpcmVFdmVudCxcbiAgc2NyZWVuLFxuICB3YWl0Rm9yLFxufSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQge1Byb3ZpZGVyfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgRm9ybSBmcm9tICcuLi9Gb3JtJztcbmltcG9ydCB7cmVuZGVyV2l0aFByb3ZpZGVyc30gZnJvbSAnLi4vLi4vdXRpbHMvdGVzdC11dGlscyc7XG5pbXBvcnQge1N0YWNrTmF2aWdhdGlvblByb3B9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL3N0YWNrJztcbmltcG9ydCB7Um9vdFN0YWNrUGFyYW1MaXN0fSBmcm9tICcuLi8uLi90eXBlcyc7XG5cbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4gKHtcbiAgLi4uamVzdC5yZXF1aXJlQWN0dWFsKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnKSxcbiAgdXNlSXNGb2N1c2VkOiBqZXN0LmZuKCksXG59KSk7XG5cbnR5cGUgTmF2aWdhdGlvblByb3BzID0gU3RhY2tOYXZpZ2F0aW9uUHJvcDxSb290U3RhY2tQYXJhbUxpc3QsICdGb3JtJz47XG5cbmNvbnN0IGNyZWF0ZVRlc3RQcm9wcyA9IChwcm9wczogUGFydGlhbDxOYXZpZ2F0aW9uUHJvcHM+KSA9PiAoe1xuICBuYXZpZ2F0aW9uOiB7XG4gICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcbiAgICAuLi5wcm9wcyxcbiAgfSBhcyBOYXZpZ2F0aW9uUHJvcHMsXG4gIC4uLnByb3BzLFxufSk7XG5cbmRlc2NyaWJlKCdGb3JtJywgKCkgPT4ge1xuICB0ZXN0KCdyZW5kZXJzIGNvcnJlY3RseSBhbmQgZW5hYmxlcyBuZXh0IGJ1dHRvbiB3aGVuIGZvcm0gaXMgY29tcGxldGUnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcHJvcHMgPSBjcmVhdGVUZXN0UHJvcHMoe30pO1xuICAgIGNvbnN0IHtnZXRCeVBsYWNlaG9sZGVyVGV4dCwgZ2V0QnlUZXh0LCBnZXRCeUxhYmVsVGV4dH0gPVxuICAgICAgcmVuZGVyV2l0aFByb3ZpZGVycyhcbiAgICAgICAgPEZvcm1cbiAgICAgICAgICByb3V0ZT17e2tleTogJ0Zvcm0nLCBuYW1lOiAnRm9ybScsIHBhcmFtczoge2lzRWRpdDogZmFsc2V9fX1cbiAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgIC8+LFxuICAgICAgKTtcblxuICAgIGNvbnN0IGZpcnN0TmFtZUlucHV0ID0gZ2V0QnlQbGFjZWhvbGRlclRleHQoJ0ZpcnN0IE5hbWUnKTtcbiAgICBjb25zdCBsYXN0TmFtZUlucHV0ID0gZ2V0QnlQbGFjZWhvbGRlclRleHQoJ0xhc3QgTmFtZScpO1xuICAgIGNvbnN0IGFnZUlucHV0ID0gZ2V0QnlQbGFjZWhvbGRlclRleHQoJ0FnZScpO1xuICAgIGNvbnN0IG5leHRCdXR0b24gPSBnZXRCeUxhYmVsVGV4dCgnYnV0dG9uLW5leHQnKTtcblxuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGZpcnN0TmFtZUlucHV0LCAnSm9obicpO1xuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGxhc3ROYW1lSW5wdXQsICdEb2UnKTtcbiAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChhZ2VJbnB1dCwgJzMwJyk7XG5cbiAgICBjb25zb2xlLmxvZyhuZXh0QnV0dG9uLnByb3BzKTtcblxuICAgIGV4cGVjdChmaXJzdE5hbWVJbnB1dC5wcm9wcy52YWx1ZSkudG9CZSgnSm9obicpO1xuICAgIGV4cGVjdChsYXN0TmFtZUlucHV0LnByb3BzLnZhbHVlKS50b0JlKCdEb2UnKTtcbiAgICBleHBlY3QoYWdlSW5wdXQucHJvcHMudmFsdWUpLnRvQmUoJzMwJyk7XG4gICAgZXhwZWN0KG5leHRCdXR0b24ucHJvcHMuYWNjZXNzaWJpbGl0eVN0YXRlLmRpc2FibGVkKS50b0JlKGZhbHNlKTtcbiAgfSk7XG5cbiAgLy8gICB0ZXN0KCduYXZpZ2F0ZXMgdG8gQ2hvb3NlQXZhdGFyIHNjcmVlbiB3aGVuIE5leHQgYnV0dG9uIGlzIGNsaWNrZWQnLCAoKSA9PiB7XG4gIC8vICAgICBjb25zdCBuYXZpZ2F0aW9uTW9jayA9IHtcbiAgLy8gICAgICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcbiAgLy8gICAgIH07XG5cbiAgLy8gICAgIGNvbnN0IHtnZXRCeVBsYWNlaG9sZGVyVGV4dCwgZ2V0QnlUZXh0LCBnZXRCeVRlc3RJZH0gPSByZW5kZXIoXG4gIC8vICAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAvLyAgICAgICAgIDxGb3JtIHJvdXRlPXt7cGFyYW1zOiB7aXNFZGl0OiBmYWxzZX19fSBuYXZpZ2F0aW9uPXtuYXZpZ2F0aW9uTW9ja30gLz5cbiAgLy8gICAgICAgPC9Qcm92aWRlcj4sXG4gIC8vICAgICApO1xuXG4gIC8vICAgICBjb25zdCBmaXJzdE5hbWVJbnB1dCA9IGdldEJ5UGxhY2Vob2xkZXJUZXh0KCdGaXJzdCBOYW1lJyk7XG4gIC8vICAgICBjb25zdCBsYXN0TmFtZUlucHV0ID0gZ2V0QnlQbGFjZWhvbGRlclRleHQoJ0xhc3QgTmFtZScpO1xuICAvLyAgICAgY29uc3QgYWdlSW5wdXQgPSBnZXRCeVBsYWNlaG9sZGVyVGV4dCgnQWdlJyk7XG4gIC8vICAgICBjb25zdCBuZXh0QnV0dG9uID0gZ2V0QnlUZXh0KCdOZXh0Jyk7XG5cbiAgLy8gICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGZpcnN0TmFtZUlucHV0LCAnSm9obicpO1xuICAvLyAgICAgZmlyZUV2ZW50LmNoYW5nZVRleHQobGFzdE5hbWVJbnB1dCwgJ0RvZScpO1xuICAvLyAgICAgZmlyZUV2ZW50LmNoYW5nZVRleHQoYWdlSW5wdXQsICczMCcpO1xuICAvLyAgICAgZmlyZUV2ZW50LnByZXNzKG5leHRCdXR0b24pO1xuXG4gIC8vICAgICBleHBlY3QobmF2aWdhdGlvbk1vY2submF2aWdhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdDaG9vc2VBdmF0YXInLCB7XG4gIC8vICAgICAgIGlzRWRpdDogZmFsc2UsXG4gIC8vICAgICB9KTtcbiAgLy8gICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFhQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMEJBQTBCLEVBQUU7RUFBQSxPQUFBQyxNQUFBLENBQUFDLE1BQUEsS0FDakNDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLDBCQUEwQixDQUFDO0lBQ2pEQyxZQUFZLEVBQUVGLElBQUksQ0FBQ0csRUFBRSxDQUFDO0VBQUM7QUFBQSxDQUN2QixDQUFDO0FBQUMs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