463f2b4888244b5b3a8da59b6d68a85b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = UserAvatar;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _Typography = _interopRequireDefault(require("./Typography"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function UserAvatar(_ref) {
  var photo = _ref.photo,
    firstName = _ref.firstName,
    lastName = _ref.lastName,
    size = _ref.size;
  var _useState = (0, _react.useState)(true),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    notFound = _useState2[0],
    setNotFound = _useState2[1];
  var initials = (firstName.charAt(0) + lastName.charAt(0)).toUpperCase();
  (0, _react.useEffect)(function () {
    function fetchImageURL() {
      return _fetchImageURL.apply(this, arguments);
    }
    function _fetchImageURL() {
      _fetchImageURL = (0, _asyncToGenerator2.default)(function* () {
        var response = yield fetch(photo);
        if (response.status === 200) {
          setNotFound(false);
        }
      });
      return _fetchImageURL.apply(this, arguments);
    }
    fetchImageURL();
  }, [photo]);
  if (!notFound) {
    return (0, _jsxRuntime.jsx)(_reactNative.Image, {
      testID: "user-avatar-img",
      source: {
        uri: photo
      },
      style: styles(size).container
    });
  }
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    testID: "user-avatar-text",
    style: [styles(size).container, styles(size).gradient],
    children: (0, _jsxRuntime.jsx)(_Typography.default, {
      variant: "subHeading",
      children: initials
    })
  });
}
var styles = function styles(size) {
  return _reactNative.StyleSheet.create({
    container: {
      height: size || 50,
      width: size || 50,
      borderRadius: 9999
    },
    gradient: {
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: '#737373'
    }
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfVHlwb2dyYXBoeSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfanN4UnVudGltZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJVc2VyQXZhdGFyIiwiX3JlZiIsInBob3RvIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJzaXplIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwibm90Rm91bmQiLCJzZXROb3RGb3VuZCIsImluaXRpYWxzIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJ1c2VFZmZlY3QiLCJmZXRjaEltYWdlVVJMIiwiX2ZldGNoSW1hZ2VVUkwiLCJhcHBseSIsImFyZ3VtZW50cyIsIl9hc3luY1RvR2VuZXJhdG9yMiIsInJlc3BvbnNlIiwiZmV0Y2giLCJzdGF0dXMiLCJqc3giLCJJbWFnZSIsInRlc3RJRCIsInNvdXJjZSIsInVyaSIsInN0eWxlIiwic3R5bGVzIiwiY29udGFpbmVyIiwiVmlldyIsImdyYWRpZW50IiwiY2hpbGRyZW4iLCJ2YXJpYW50IiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImhlaWdodCIsIndpZHRoIiwiYm9yZGVyUmFkaXVzIiwiZGlzcGxheSIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsImJhY2tncm91bmRDb2xvciJdLCJzb3VyY2VzIjpbIlVzZXJBdmF0YXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwge3VzZUVmZmVjdCwgdXNlU3RhdGV9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7SW1hZ2UsIFN0eWxlU2hlZXQsIFZpZXd9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICcuL1R5cG9ncmFwaHknO1xuXG50eXBlIFVzZXJBdmF0YXJQcm9wcyA9IHtcbiAgcGhvdG86IHN0cmluZztcbiAgZmlyc3ROYW1lOiBzdHJpbmc7XG4gIGxhc3ROYW1lOiBzdHJpbmc7XG4gIHNpemU/OiBudW1iZXI7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBVc2VyQXZhdGFyKHtcbiAgcGhvdG8sXG4gIGZpcnN0TmFtZSxcbiAgbGFzdE5hbWUsXG4gIHNpemUsXG59OiBVc2VyQXZhdGFyUHJvcHMpIHtcbiAgY29uc3QgW25vdEZvdW5kLCBzZXROb3RGb3VuZF0gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgY29uc3QgaW5pdGlhbHMgPSAoZmlyc3ROYW1lLmNoYXJBdCgwKSArIGxhc3ROYW1lLmNoYXJBdCgwKSkudG9VcHBlckNhc2UoKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGFzeW5jIGZ1bmN0aW9uIGZldGNoSW1hZ2VVUkwoKSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHBob3RvKTtcbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICBzZXROb3RGb3VuZChmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZmV0Y2hJbWFnZVVSTCgpO1xuICB9LCBbcGhvdG9dKTtcblxuICBpZiAoIW5vdEZvdW5kKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxJbWFnZVxuICAgICAgICB0ZXN0SUQ9XCJ1c2VyLWF2YXRhci1pbWdcIlxuICAgICAgICBzb3VyY2U9e3t1cmk6IHBob3RvfX1cbiAgICAgICAgc3R5bGU9e3N0eWxlcyhzaXplKS5jb250YWluZXJ9XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxWaWV3XG4gICAgICB0ZXN0SUQ9XCJ1c2VyLWF2YXRhci10ZXh0XCJcbiAgICAgIHN0eWxlPXtbc3R5bGVzKHNpemUpLmNvbnRhaW5lciwgc3R5bGVzKHNpemUpLmdyYWRpZW50XX0+XG4gICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwic3ViSGVhZGluZ1wiPntpbml0aWFsc308L1R5cG9ncmFwaHk+XG4gICAgPC9WaWV3PlxuICApO1xufVxuXG5jb25zdCBzdHlsZXMgPSAoc2l6ZTogbnVtYmVyIHwgdW5kZWZpbmVkKSA9PiB7XG4gIHJldHVybiBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAgY29udGFpbmVyOiB7XG4gICAgICBoZWlnaHQ6IHNpemUgfHwgNTAsXG4gICAgICB3aWR0aDogc2l6ZSB8fCA1MCxcbiAgICAgIGJvcmRlclJhZGl1czogOTk5OSxcbiAgICB9LFxuICAgIGdyYWRpZW50OiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJyM3MzczNzMnLFxuICAgIH0sXG4gIH0pO1xufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFdBQUEsR0FBQUMsc0JBQUEsQ0FBQUgsT0FBQTtBQUFzQyxJQUFBSSxXQUFBLEdBQUFKLE9BQUE7QUFBQSxTQUFBSyx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLFdBQUEsV0FBQUEsV0FB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