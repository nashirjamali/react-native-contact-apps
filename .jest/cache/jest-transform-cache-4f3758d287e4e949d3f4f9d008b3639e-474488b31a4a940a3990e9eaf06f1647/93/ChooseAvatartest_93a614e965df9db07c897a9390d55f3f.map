{"version":3,"names":["_getJestObj","mock","postContact","jest","fn","Promise","resolve","status","putContact","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_ChooseAvatar","_contact","_testUtils","_jsxRuntime","_require","createTestProps","props","Object","assign","navigation","navigate","replace","describe","test","default","_renderWithProviders","renderWithProviders","jsx","route","key","name","params","isEdit","getByPlaceholderText","getByLabelText","getAllByTestId","fireEvent","press","expect","accessibilityState","disabled","toBe","waitFor","toHaveBeenCalledTimes","toHaveBeenCalledWith"],"sources":["ChooseAvatar.test.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  render,\n  fireEvent,\n  waitFor,\n  screen,\n} from '@testing-library/react-native';\nimport {Provider} from 'react-redux';\nimport ChooseAvatar from '../ChooseAvatar';\nimport {postContact, putContact} from '../../apis/contact';\nimport {StackNavigationProp} from '@react-navigation/stack';\nimport {RootStackParamList} from '../../types';\nimport {renderWithProviders} from '../../utils/test-utils';\n\njest.mock('../../apis/contact', () => ({\n  postContact: jest.fn(() =>\n    Promise.resolve({\n      status: 201,\n    }),\n  ),\n  putContact: jest.fn(),\n}));\n\ntype NavigationProps = StackNavigationProp<RootStackParamList, 'ChooseAvatar'>;\n\nconst createTestProps = (props: Partial<NavigationProps>) => ({\n  navigation: {\n    navigate: jest.fn(),\n    replace: jest.fn(),\n    ...props,\n  } as NavigationProps,\n  ...props,\n});\n\ndescribe('ChooseAvatar', () => {\n  test('navigates to List screen after successful contact creation', async () => {\n    const props = createTestProps({});\n\n    const {getByPlaceholderText, getByLabelText, getAllByTestId} =\n      renderWithProviders(\n        <ChooseAvatar\n          route={{\n            key: 'ChooseAvatar',\n            name: 'ChooseAvatar',\n            params: {isEdit: false},\n          }}\n          {...props}\n        />,\n      );\n\n    fireEvent.press(getAllByTestId('avatar-image')[0]);\n    expect(\n      getByLabelText('button-save').props.accessibilityState.disabled,\n    ).toBe(false);\n\n    fireEvent.press(getByLabelText('button-save'));\n\n    await waitFor(() => {\n      expect(postContact).toHaveBeenCalledTimes(1);\n      expect(props.navigation.replace).toHaveBeenCalledWith('List');\n    });\n  });\n\n  //   test('navigates to List screen after successful contact update', async () => {\n  //     const navigationMock = {replace: jest.fn()};\n  //     const route = {params: {isEdit: true}};\n  //     const {getByText} = render(\n  //       <Provider store={store}>\n  //         <ChooseAvatar navigation={navigationMock} route={route} />\n  //       </Provider>,\n  //     );\n\n  //     const updateButton = getByText('Update');\n\n  //     fireEvent.press(updateButton);\n\n  //     await waitFor(() => {\n  //       expect(putContact).toHaveBeenCalledTimes(1);\n  //       expect(navigationMock.replace).toHaveBeenCalledWith('List');\n  //     });\n  //   });\n\n  //   test('displays error message when contact creation fails', async () => {\n  //     const navigationMock = {replace: jest.fn()};\n  //     const route = {params: {isEdit: false}};\n  //     const {getByText} = render(\n  //       <Provider store={store}>\n  //         <ChooseAvatar navigation={navigationMock} route={route} />\n  //       </Provider>,\n  //     );\n\n  //     const saveButton = getByText('Save');\n\n  //     postContact.mockRejectedValueOnce(new Error('Failed to create contact'));\n\n  //     fireEvent.press(saveButton);\n\n  //     await waitFor(() => {\n  //       expect(postContact).toHaveBeenCalledTimes(1);\n  //       expect(navigationMock.replace).not.toHaveBeenCalled();\n  //       expect(getByText('Error')).toBeTruthy();\n  //       expect(getByText('Failed to create contact')).toBeTruthy();\n  //     });\n  //   });\n\n  //   test('displays error message when contact update fails', async () => {\n  //     const navigationMock = {replace: jest.fn()};\n  //     const route = {params: {isEdit: true}};\n  //     const {getByText} = render(\n  //       <Provider store={store}>\n  //         <ChooseAvatar navigation={navigationMock} route={route} />\n  //       </Provider>,\n  //     );\n\n  //     const updateButton = getByText('Update');\n\n  //     putContact.mockRejectedValueOnce(new Error('Failed to update contact'));\n\n  //     fireEvent.press(updateButton);\n\n  //     await waitFor(() => {\n  //       expect(putContact).toHaveBeenCalledTimes(1);\n  //       expect(navigationMock.replace).not.toHaveBeenCalled();\n  //       expect(getByText('Error')).toBeTruthy();\n  //       expect(getByText('Failed to update contact')).toBeTruthy();\n  //     });\n  //   });\n});\n"],"mappings":"AAcAA,WAAA,GAAKC,IAAI,CAAC,oBAAoB,EAAE;EAAA,OAAO;IACrCC,WAAW,EAAEC,IAAI,CAACC,EAAE,CAAC;MAAA,OACnBC,OAAO,CAACC,OAAO,CAAC;QACdC,MAAM,EAAE;MACV,CAAC,CAAC;IAAA,CACJ,CAAC;IACDC,UAAU,EAAEL,IAAI,CAACC,EAAE,CAAC;EACtB,CAAC;AAAA,CAAC,CAAC;AAAC,IAAAK,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AArBJ,IAAAE,MAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,YAAA,GAAAH,OAAA;AAOA,IAAAI,aAAA,GAAAL,sBAAA,CAAAC,OAAA;AACA,IAAAK,QAAA,GAAAL,OAAA;AAGA,IAAAM,UAAA,GAAAN,OAAA;AAA2D,IAAAO,WAAA,GAAAP,OAAA;AAAA,SAAAV,YAAA;EAAA,IAAAkB,QAAA,GAAAR,OAAA;IAAAP,IAAA,GAAAe,QAAA,CAAAf,IAAA;EAAAH,WAAA,YAAAA,YAAA;IAAA,OAAAG,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAa3D,IAAMgB,eAAe,GAAG,SAAlBA,eAAeA,CAAIC,KAA+B;EAAA,OAAAC,MAAA,CAAAC,MAAA;IACtDC,UAAU,EAAAF,MAAA,CAAAC,MAAA;MACRE,QAAQ,EAAErB,IAAI,CAACC,EAAE,CAAC,CAAC;MACnBqB,OAAO,EAAEtB,IAAI,CAACC,EAAE,CAAC;IAAC,GACfgB,KAAK;EACU,GACjBA,KAAK;AAAA,CACR;AAEFM,QAAQ,CAAC,cAAc,EAAE,YAAM;EAC7BC,IAAI,CAAC,4DAA4D,MAAAhB,kBAAA,CAAAiB,OAAA,EAAE,aAAY;IAC7E,IAAMR,KAAK,GAAGD,eAAe,CAAC,CAAC,CAAC,CAAC;IAEjC,IAAAU,oBAAA,GACE,IAAAC,8BAAmB,EACjB,IAAAb,WAAA,CAAAc,GAAA,EAACjB,aAAA,CAAAc,OAAY,EAAAP,MAAA,CAAAC,MAAA;QACXU,KAAK,EAAE;UACLC,GAAG,EAAE,cAAc;UACnBC,IAAI,EAAE,cAAc;UACpBC,MAAM,EAAE;YAACC,MAAM,EAAE;UAAK;QACxB;MAAE,GACEhB,KAAK,CACV,CACH,CAAC;MAVIiB,oBAAoB,GAAAR,oBAAA,CAApBQ,oBAAoB;MAAEC,cAAc,GAAAT,oBAAA,CAAdS,cAAc;MAAEC,cAAc,GAAAV,oBAAA,CAAdU,cAAc;IAY3DC,sBAAS,CAACC,KAAK,CAACF,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;IAClDG,MAAM,CACJJ,cAAc,CAAC,aAAa,CAAC,CAAClB,KAAK,CAACuB,kBAAkB,CAACC,QACzD,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IAEbL,sBAAS,CAACC,KAAK,CAACH,cAAc,CAAC,aAAa,CAAC,CAAC;IAE9C,MAAM,IAAAQ,oBAAO,EAAC,YAAM;MAClBJ,MAAM,CAACxC,oBAAW,CAAC,CAAC6C,qBAAqB,CAAC,CAAC,CAAC;MAC5CL,MAAM,CAACtB,KAAK,CAACG,UAAU,CAACE,OAAO,CAAC,CAACuB,oBAAoB,CAAC,MAAM,CAAC;IAC/D,CAAC,CAAC;EACJ,CAAC,EAAC;AAkEJ,CAAC,CAAC"}