205d1ceb65f4e09607a3304270600b1c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Detail;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _Typography = _interopRequireDefault(require("../components/Typography"));
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _Button = _interopRequireDefault(require("../components/Button"));
var _Gap = _interopRequireDefault(require("../components/Gap"));
var _contact = require("../apis/contact");
var _UserAvatar = _interopRequireDefault(require("../components/UserAvatar"));
var _reactRedux = require("react-redux");
var _lucideReactNative = require("lucide-react-native");
var _native = require("@react-navigation/native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function Detail(_ref) {
  var navigation = _ref.navigation,
    params = _ref.route.params;
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    contact = _useState2[0],
    setContact = _useState2[1];
  var isFocused = (0, _native.useIsFocused)();
  var dispatch = (0, _reactRedux.useDispatch)();
  function getData(_x) {
    return _getData.apply(this, arguments);
  }
  function _getData() {
    _getData = (0, _asyncToGenerator2.default)(function* (id) {
      try {
        var response = yield (0, _contact.getContact)(id);
        if (response.status === 200) {
          setContact(response.data.data);
        }
      } catch (error) {
        _reactNative.Alert.alert('Error', error.message);
      }
    });
    return _getData.apply(this, arguments);
  }
  function deleteData(_x2) {
    return _deleteData.apply(this, arguments);
  }
  function _deleteData() {
    _deleteData = (0, _asyncToGenerator2.default)(function* (id) {
      try {
        yield (0, _contact.deleteContact)(id);
        navigation.goBack();
      } catch (error) {
        _reactNative.Alert.alert('Error', error.message);
      }
    });
    return _deleteData.apply(this, arguments);
  }
  (0, _react.useEffect)(function () {
    getData(params.id);
  }, [params.id, isFocused]);
  function onClickEdit() {
    dispatch({
      type: 'SET_FORM',
      payload: {
        firstName: contact == null ? void 0 : contact.firstName,
        lastName: contact == null ? void 0 : contact.lastName,
        age: contact == null ? void 0 : contact.age,
        photo: contact == null ? void 0 : contact.photo,
        id: contact == null ? void 0 : contact.id
      }
    });
    navigation.navigate('Form', {
      isEdit: true
    });
  }
  function onClickDelete() {
    _reactNative.Alert.alert('Delete contact', `Are you sure delete ${contact == null ? void 0 : contact.firstName} ${contact == null ? void 0 : contact.lastName}?`, [{
      text: 'Cancel',
      style: 'cancel',
      isPreferred: true
    }, {
      text: 'Sure',
      style: 'default',
      isPreferred: false,
      onPress: function () {
        var _onPress = (0, _asyncToGenerator2.default)(function* () {
          yield deleteData(params.id);
        });
        function onPress() {
          return _onPress.apply(this, arguments);
        }
        return onPress;
      }()
    }], {
      cancelable: true
    });
  }
  return (0, _jsxRuntime.jsxs)(_reactNativeSafeAreaContext.SafeAreaView, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.header,
      children: [(0, _jsxRuntime.jsx)(_Typography.default, {
        children: "Detail"
      }), (0, _jsxRuntime.jsx)(_Button.default, {
        onPress: onClickEdit,
        children: (0, _jsxRuntime.jsx)(_lucideReactNative.EditIcon, {
          color: "white"
        })
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
      children: contact && (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.wrapper,
        children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.imageWrapper,
          children: (0, _jsxRuntime.jsx)(_UserAvatar.default, {
            firstName: contact.firstName,
            lastName: contact.lastName,
            photo: contact.photo,
            size: 150
          })
        }), (0, _jsxRuntime.jsx)(_Gap.default, {
          y: 20
        }), (0, _jsxRuntime.jsx)(_Typography.default, {
          variant: "button",
          children: "First Name"
        }), (0, _jsxRuntime.jsx)(_Typography.default, {
          variant: "subHeading",
          children: contact.firstName
        }), (0, _jsxRuntime.jsx)(_Gap.default, {
          y: 20
        }), (0, _jsxRuntime.jsx)(_Typography.default, {
          variant: "button",
          children: "Last Name"
        }), (0, _jsxRuntime.jsx)(_Typography.default, {
          variant: "subHeading",
          children: contact.lastName
        }), (0, _jsxRuntime.jsx)(_Gap.default, {
          y: 20
        }), (0, _jsxRuntime.jsx)(_Typography.default, {
          variant: "button",
          children: "Age"
        }), (0, _jsxRuntime.jsx)(_Typography.default, {
          variant: "subHeading",
          children: contact.age
        }), (0, _jsxRuntime.jsx)(_Gap.default, {
          y: 60
        }), (0, _jsxRuntime.jsx)(_Button.default, {
          onPress: onClickDelete,
          style: styles.buttonContainer,
          "aria-label": "button-delete",
          children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.buttonWrapper,
            children: [(0, _jsxRuntime.jsx)(_lucideReactNative.Trash2, {
              color: "white"
            }), (0, _jsxRuntime.jsx)(_Typography.default, {
              variant: "button",
              children: "Delete"
            })]
          })
        })]
      })
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#18181b'
  },
  header: {
    backgroundColor: '#09090b',
    padding: 20,
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center'
  },
  wrapper: {
    padding: 20,
    flex: 1
  },
  imageWrapper: {
    flex: 1,
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center'
  },
  buttonContainer: {
    backgroundColor: '#f43f5e'
  },
  buttonWrapper: {
    flexDirection: 'row',
    gap: 2,
    justifyContent: 'center',
    alignItems: 'center'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,