fee61537e37f32ddc3a4d0bdfb7c1bc1
_getJestObj().mock('../../apis/contact', function () {
  return {
    getContacts: jest.fn()
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useIsFocused: jest.fn()
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _List = _interopRequireDefault(require("../List"));
var _contact = require("../../apis/contact");
var _testUtils = require("../../utils/test-utils");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var createTestProps = function createTestProps(props) {
  return Object.assign({
    navigation: Object.assign({
      navigate: jest.fn()
    }, props)
  }, props);
};
describe('List', function () {
  test('renders correctly and fetches contacts', (0, _asyncToGenerator2.default)(function* () {
    var mockContacts = [{
      id: '111',
      firstName: 'John',
      lastName: 'Doe',
      age: 20,
      photo: 'https://picsum.photos/200'
    }, {
      id: '222',
      firstName: 'Jane',
      lastName: 'Smith',
      age: 20,
      photo: 'https://picsum.photos/200'
    }];
    var mockedGetContacts = _contact.getContacts;
    mockedGetContacts.mockResolvedValueOnce({
      data: {
        data: mockContacts
      },
      status: 200
    });
    var props = createTestProps({});
    var _renderWithProviders = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_List.default, Object.assign({
        route: {
          key: 'List',
          name: 'List'
        }
      }, props))),
      getByText = _renderWithProviders.getByText;
    _reactNative.screen.debug();
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('Contact')).toBeTruthy();
      expect(getByText('John Doe')).toBeTruthy();
      expect(getByText('Jane Smith')).toBeTruthy();
    });
    expect(_contact.getContacts).toHaveBeenCalledTimes(1);
  }));
  test('displays error message when fetching contacts fails', (0, _asyncToGenerator2.default)(function* () {
    var mockedGetContacts = _contact.getContacts;
    mockedGetContacts.mockResolvedValueOnce({
      data: {
        data: null
      },
      status: 500
    });
    var _renderWithProviders2 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_List.default, Object.assign({
        route: {
          key: 'List',
          name: 'List'
        }
      }, props))),
      getByText = _renderWithProviders2.getByText;
    expect(getByText('Loading...')).toBeTruthy();
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('Error')).toBeTruthy();
      expect(getByText('something went wrong')).toBeTruthy();
    });
    expect(_contact.getContacts).toHaveBeenCalledTimes(1);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,