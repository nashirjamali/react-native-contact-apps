4f1697ff63f9743eece103c87ec0c7ad
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ContactItem = _interopRequireDefault(require("../ContactItem"));
var _jsxRuntime = require("react/jsx-runtime");
describe('ContactItem', function () {
  var contact = {
    firstName: 'John',
    lastName: 'Doe',
    photo: 'https://example.com/avatar.png',
    age: 2,
    id: '111'
  };
  afterEach(function () {
    jest.clearAllMocks();
  });
  test('renders correctly with contact data', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContactItem.default, {
        contact: contact
      })),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    var avatar = getByTestId('user-avatar-img');
    var name = getByText('John Doe');
    expect(avatar.props.firstName).toBe('John');
    expect(avatar.props.lastName).toBe('Doe');
    expect(avatar.props.photo).toBe('https://example.com/avatar.png');
    expect(name).toBeTruthy();
  });
  test('calls onPress when pressed', function () {
    var onPressMock = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContactItem.default, {
        contact: contact,
        onPress: onPressMock
      })),
      getByTestId = _render2.getByTestId;
    var touchable = getByTestId('user-avatar-text');
    _reactNative.fireEvent.press(touchable);
    expect(onPressMock).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Db250YWN0SXRlbSIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJjb250YWN0IiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJwaG90byIsImFnZSIsImlkIiwiYWZ0ZXJFYWNoIiwiamVzdCIsImNsZWFyQWxsTW9ja3MiLCJ0ZXN0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsImRlZmF1bHQiLCJnZXRCeVRleHQiLCJnZXRCeVRlc3RJZCIsImF2YXRhciIsIm5hbWUiLCJleHBlY3QiLCJwcm9wcyIsInRvQmUiLCJ0b0JlVHJ1dGh5Iiwib25QcmVzc01vY2siLCJmbiIsIl9yZW5kZXIyIiwib25QcmVzcyIsInRvdWNoYWJsZSIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZCJdLCJzb3VyY2VzIjpbIkNvbnRhY3RJdGVtLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICByZW5kZXIsXG4gIGZpcmVFdmVudCxcbiAgc2NyZWVuLFxuICB3YWl0Rm9yLFxufSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgQ29udGFjdEl0ZW0gZnJvbSAnLi4vQ29udGFjdEl0ZW0nO1xuXG5kZXNjcmliZSgnQ29udGFjdEl0ZW0nLCAoKSA9PiB7XG4gIGNvbnN0IGNvbnRhY3QgPSB7XG4gICAgZmlyc3ROYW1lOiAnSm9obicsXG4gICAgbGFzdE5hbWU6ICdEb2UnLFxuICAgIHBob3RvOiAnaHR0cHM6Ly9leGFtcGxlLmNvbS9hdmF0YXIucG5nJyxcbiAgICBhZ2U6IDIsXG4gICAgaWQ6ICcxMTEnLFxuICB9O1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIHRlc3QoJ3JlbmRlcnMgY29ycmVjdGx5IHdpdGggY29udGFjdCBkYXRhJywgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeVRleHQsIGdldEJ5VGVzdElkfSA9IHJlbmRlcig8Q29udGFjdEl0ZW0gY29udGFjdD17Y29udGFjdH0gLz4pO1xuXG4gICAgY29uc3QgYXZhdGFyID0gZ2V0QnlUZXN0SWQoJ3VzZXItYXZhdGFyLWltZycpO1xuICAgIGNvbnN0IG5hbWUgPSBnZXRCeVRleHQoJ0pvaG4gRG9lJyk7XG5cbiAgICBleHBlY3QoYXZhdGFyLnByb3BzLmZpcnN0TmFtZSkudG9CZSgnSm9obicpO1xuICAgIGV4cGVjdChhdmF0YXIucHJvcHMubGFzdE5hbWUpLnRvQmUoJ0RvZScpO1xuICAgIGV4cGVjdChhdmF0YXIucHJvcHMucGhvdG8pLnRvQmUoJ2h0dHBzOi8vZXhhbXBsZS5jb20vYXZhdGFyLnBuZycpO1xuICAgIGV4cGVjdChuYW1lKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIHRlc3QoJ2NhbGxzIG9uUHJlc3Mgd2hlbiBwcmVzc2VkJywgKCkgPT4ge1xuICAgIGNvbnN0IG9uUHJlc3NNb2NrID0gamVzdC5mbigpO1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoXG4gICAgICA8Q29udGFjdEl0ZW0gY29udGFjdD17Y29udGFjdH0gb25QcmVzcz17b25QcmVzc01vY2t9IC8+LFxuICAgICk7XG5cbiAgICBjb25zdCB0b3VjaGFibGUgPSBnZXRCeVRlc3RJZCgndXNlci1hdmF0YXItdGV4dCcpO1xuICAgIGZpcmVFdmVudC5wcmVzcyh0b3VjaGFibGUpO1xuXG4gICAgZXhwZWN0KG9uUHJlc3NNb2NrKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFNQSxJQUFBRSxZQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBeUMsSUFBQUcsV0FBQSxHQUFBSCxPQUFBO0FBRXpDSSxRQUFRLENBQUMsYUFBYSxFQUFFLFlBQU07RUFDNUIsSUFBTUMsT0FBTyxHQUFHO0lBQ2RDLFNBQVMsRUFBRSxNQUFNO0lBQ2pCQyxRQUFRLEVBQUUsS0FBSztJQUNmQyxLQUFLLEVBQUUsZ0NBQWdDO0lBQ3ZDQyxHQUFHLEVBQUUsQ0FBQztJQUNOQyxFQUFFLEVBQUU7RUFDTixDQUFDO0VBRURDLFNBQVMsQ0FBQyxZQUFNO0lBQ2RDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLENBQUM7RUFDdEIsQ0FBQyxDQUFDO0VBRUZDLElBQUksQ0FBQyxxQ0FBcUMsRUFBRSxZQUFNO0lBQ2hELElBQUFDLE9BQUEsR0FBaUMsSUFBQUMsbUJBQU0sRUFBQyxJQUFBYixXQUFBLENBQUFjLEdBQUEsRUFBQ2YsWUFBQSxDQUFBZ0IsT0FBVztRQUFDYixPQUFPLEVBQUVBO01BQVEsQ0FBRSxDQUFDLENBQUM7TUFBbkVjLFNBQVMsR0FBQUosT0FBQSxDQUFUSSxTQUFTO01BQUVDLFdBQVcsR0FBQUwsT0FBQSxDQUFYSyxXQUFXO0lBRTdCLElBQU1DLE1BQU0sR0FBR0QsV0FBVyxDQUFDLGlCQUFpQixDQUFDO0lBQzdDLElBQU1FLElBQUksR0FBR0gsU0FBUyxDQUFDLFVBQVUsQ0FBQztJQUVsQ0ksTUFBTSxDQUFDRixNQUFNLENBQUNHLEtBQUssQ0FBQ2xCLFNBQVMsQ0FBQyxDQUFDbUIsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUMzQ0YsTUFBTSxDQUFDRixNQUFNLENBQUNHLEtBQUssQ0FBQ2pCLFFBQVEsQ0FBQyxDQUFDa0IsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN6Q0YsTUFBTSxDQUFDRixNQUFNLENBQUNHLEtBQUssQ0FBQ2hCLEtBQUssQ0FBQyxDQUFDaUIsSUFBSSxDQUFDLGdDQUFnQyxDQUFDO0lBQ2pFRixNQUFNLENBQUNELElBQUksQ0FBQyxDQUFDSSxVQUFVLENBQUMsQ0FBQztFQUMzQixDQUFDLENBQUM7RUFFRlosSUFBSSxDQUFDLDRCQUE0QixFQUFFLFlBQU07SUFDdkMsSUFBTWEsV0FBVyxHQUFHZixJQUFJLENBQUNnQixFQUFFLENBQUMsQ0FBQztJQUM3QixJQUFBQyxRQUFBLEdBQXNCLElBQUFiLG1CQUFNLEVBQzFCLElBQUFiLFdBQUEsQ0FBQWMsR0FBQSxFQUFDZixZQUFBLENBQUFnQixPQUFXO1FBQUNiLE9BQU8sRUFBRUEsT0FBUTtRQUFDeUIsT0FBTyxFQUFFSDtNQUFZLENBQUUsQ0FDeEQsQ0FBQztNQUZNUCxXQUFXLEdBQUFTLFFBQUEsQ0FBWFQsV0FBVztJQUlsQixJQUFNVyxTQUFTLEdBQUdYLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQztJQUNqRFksc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDRixTQUFTLENBQUM7SUFFMUJSLE1BQU0sQ0FBQ0ksV0FBVyxDQUFDLENBQUNPLGdCQUFnQixDQUFDLENBQUM7RUFDeEMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=