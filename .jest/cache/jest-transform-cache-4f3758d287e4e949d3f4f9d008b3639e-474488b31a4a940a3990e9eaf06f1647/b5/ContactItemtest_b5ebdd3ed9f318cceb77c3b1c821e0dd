e3d713485490ba0a9e3287dbae709dca
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ContactItem = _interopRequireDefault(require("../ContactItem"));
var _jsxRuntime = require("react/jsx-runtime");
describe('ContactItem', function () {
  var contact = {
    firstName: 'John',
    lastName: 'Doe',
    photo: 'https://example.com/avatar.png',
    age: 2,
    id: '111'
  };
  jest.spyOn(global, 'fetch').mockResolvedValue(Promise.resolve({
    ok: true,
    status: 404
  }));
  test('renders correctly with contact data', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContactItem.default, {
        contact: contact
      })),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var avatar = getByTestId('user-avatar-text');
      var name = getByText('John Doe');
      expect(avatar.props.children.props.children).toBe('JD');
      expect(name).toBeTruthy();
    });
  }));
  test('calls onPress when pressed', (0, _asyncToGenerator2.default)(function* () {
    var onPressMock = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContactItem.default, {
        contact: contact,
        onPress: onPressMock
      })),
      getByTestId = _render2.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var touchable = getByTestId('user-avatar-text');
      _reactNative.fireEvent.press(touchable);
    });
    expect(onPressMock).toHaveBeenCalled();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Db250YWN0SXRlbSIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJjb250YWN0IiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJwaG90byIsImFnZSIsImlkIiwiamVzdCIsInNweU9uIiwiZ2xvYmFsIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJQcm9taXNlIiwicmVzb2x2ZSIsIm9rIiwic3RhdHVzIiwidGVzdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiZ2V0QnlUZXh0IiwiZ2V0QnlUZXN0SWQiLCJ3YWl0Rm9yIiwiYXZhdGFyIiwibmFtZSIsImV4cGVjdCIsInByb3BzIiwiY2hpbGRyZW4iLCJ0b0JlIiwidG9CZVRydXRoeSIsIm9uUHJlc3NNb2NrIiwiZm4iLCJfcmVuZGVyMiIsIm9uUHJlc3MiLCJ0b3VjaGFibGUiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWQiXSwic291cmNlcyI6WyJDb250YWN0SXRlbS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgcmVuZGVyLFxuICBmaXJlRXZlbnQsXG4gIHdhaXRGb3IsXG4gIHNjcmVlbixcbn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IENvbnRhY3RJdGVtIGZyb20gJy4uL0NvbnRhY3RJdGVtJztcblxuZGVzY3JpYmUoJ0NvbnRhY3RJdGVtJywgKCkgPT4ge1xuICBjb25zdCBjb250YWN0ID0ge1xuICAgIGZpcnN0TmFtZTogJ0pvaG4nLFxuICAgIGxhc3ROYW1lOiAnRG9lJyxcbiAgICBwaG90bzogJ2h0dHBzOi8vZXhhbXBsZS5jb20vYXZhdGFyLnBuZycsXG4gICAgYWdlOiAyLFxuICAgIGlkOiAnMTExJyxcbiAgfTtcblxuICBqZXN0XG4gICAgLnNweU9uKGdsb2JhbCwgJ2ZldGNoJylcbiAgICAubW9ja1Jlc29sdmVkVmFsdWUoUHJvbWlzZS5yZXNvbHZlKHtvazogdHJ1ZSwgc3RhdHVzOiA0MDR9IGFzIFJlc3BvbnNlKSk7XG5cbiAgdGVzdCgncmVuZGVycyBjb3JyZWN0bHkgd2l0aCBjb250YWN0IGRhdGEnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qge2dldEJ5VGV4dCwgZ2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxDb250YWN0SXRlbSBjb250YWN0PXtjb250YWN0fSAvPik7XG5cbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGNvbnN0IGF2YXRhciA9IGdldEJ5VGVzdElkKCd1c2VyLWF2YXRhci10ZXh0Jyk7XG4gICAgICBjb25zdCBuYW1lID0gZ2V0QnlUZXh0KCdKb2huIERvZScpO1xuXG4gICAgICBleHBlY3QoYXZhdGFyLnByb3BzLmNoaWxkcmVuLnByb3BzLmNoaWxkcmVuKS50b0JlKCdKRCcpO1xuICAgICAgZXhwZWN0KG5hbWUpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnY2FsbHMgb25QcmVzcyB3aGVuIHByZXNzZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgb25QcmVzc01vY2sgPSBqZXN0LmZuKCk7XG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcihcbiAgICAgIDxDb250YWN0SXRlbSBjb250YWN0PXtjb250YWN0fSBvblByZXNzPXtvblByZXNzTW9ja30gLz4sXG4gICAgKTtcblxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgY29uc3QgdG91Y2hhYmxlID0gZ2V0QnlUZXN0SWQoJ3VzZXItYXZhdGFyLXRleHQnKTtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyh0b3VjaGFibGUpO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KG9uUHJlc3NNb2NrKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBTUEsSUFBQUUsWUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQXlDLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUV6Q0ksUUFBUSxDQUFDLGFBQWEsRUFBRSxZQUFNO0VBQzVCLElBQU1DLE9BQU8sR0FBRztJQUNkQyxTQUFTLEVBQUUsTUFBTTtJQUNqQkMsUUFBUSxFQUFFLEtBQUs7SUFDZkMsS0FBSyxFQUFFLGdDQUFnQztJQUN2Q0MsR0FBRyxFQUFFLENBQUM7SUFDTkMsRUFBRSxFQUFFO0VBQ04sQ0FBQztFQUVEQyxJQUFJLENBQ0RDLEtBQUssQ0FBQ0MsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUN0QkMsaUJBQWlCLENBQUNDLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDO0lBQUNDLEVBQUUsRUFBRSxJQUFJO0lBQUVDLE1BQU0sRUFBRTtFQUFHLENBQWEsQ0FBQyxDQUFDO0VBRTFFQyxJQUFJLENBQUMscUNBQXFDLE1BQUFDLGtCQUFBLENBQUFDLE9BQUEsRUFBRSxhQUFZO0lBQ3RELElBQUFDLE9BQUEsR0FBaUMsSUFBQUMsbUJBQU0sRUFBQyxJQUFBcEIsV0FBQSxDQUFBcUIsR0FBQSxFQUFDdEIsWUFBQSxDQUFBbUIsT0FBVztRQUFDaEIsT0FBTyxFQUFFQTtNQUFRLENBQUUsQ0FBQyxDQUFDO01BQW5Fb0IsU0FBUyxHQUFBSCxPQUFBLENBQVRHLFNBQVM7TUFBRUMsV0FBVyxHQUFBSixPQUFBLENBQVhJLFdBQVc7SUFFN0IsTUFBTSxJQUFBQyxvQkFBTyxFQUFDLFlBQU07TUFDbEIsSUFBTUMsTUFBTSxHQUFHRixXQUFXLENBQUMsa0JBQWtCLENBQUM7TUFDOUMsSUFBTUcsSUFBSSxHQUFHSixTQUFTLENBQUMsVUFBVSxDQUFDO01BRWxDSyxNQUFNLENBQUNGLE1BQU0sQ0FBQ0csS0FBSyxDQUFDQyxRQUFRLENBQUNELEtBQUssQ0FBQ0MsUUFBUSxDQUFDLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7TUFDdkRILE1BQU0sQ0FBQ0QsSUFBSSxDQUFDLENBQUNLLFVBQVUsQ0FBQyxDQUFDO0lBQzNCLENBQUMsQ0FBQztFQUNKLENBQUMsRUFBQztFQUVGZixJQUFJLENBQUMsNEJBQTRCLE1BQUFDLGtCQUFBLENBQUFDLE9BQUEsRUFBRSxhQUFZO0lBQzdDLElBQU1jLFdBQVcsR0FBR3hCLElBQUksQ0FBQ3lCLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLElBQUFDLFFBQUEsR0FBc0IsSUFBQWQsbUJBQU0sRUFDMUIsSUFBQXBCLFdBQUEsQ0FBQXFCLEdBQUEsRUFBQ3RCLFlBQUEsQ0FBQW1CLE9BQVc7UUFBQ2hCLE9BQU8sRUFBRUEsT0FBUTtRQUFDaUMsT0FBTyxFQUFFSDtNQUFZLENBQUUsQ0FDeEQsQ0FBQztNQUZNVCxXQUFXLEdBQUFXLFFBQUEsQ0FBWFgsV0FBVztJQUlsQixNQUFNLElBQUFDLG9CQUFPLEVBQUMsWUFBTTtNQUNsQixJQUFNWSxTQUFTLEdBQUdiLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQztNQUNqRGMsc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDRixTQUFTLENBQUM7SUFDNUIsQ0FBQyxDQUFDO0lBRUZULE1BQU0sQ0FBQ0ssV0FBVyxDQUFDLENBQUNPLGdCQUFnQixDQUFDLENBQUM7RUFDeEMsQ0FBQyxFQUFDO0FBQ0osQ0FBQyxDQUFDIn0=